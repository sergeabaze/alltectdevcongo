<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWPF4.Controls.Interactions.XamSpellChecker.v17.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.AutomationPeers.XamSpellCheckerDialogWindowAutomationPeer">
            <summary>
            Exposes <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow" /> types to UI
            automation.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamSpellCheckerDialogWindowAutomationPeer.#ctor(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.AutomationPeers.XamSpellCheckerDialogWindowAutomationPeer"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="T:Infragistics.SpellChecker.AdvancedTextBoundary">
            <summary>Extends SimpleTextBoundary to included more advanced parsing.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.AdvancedTextBoundary.AllowXML">
            <summary>
            Whether to ignore XML/HTML tags.  This should be set to true for RichTextBox support, but is false by default.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.AdvancedTextBoundary.Following(System.Int32)">
            <summary>
            This ignores xml tags butted between text.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.AdvancedTextBoundary.Preceding(System.Int32)">
            <summary>
            This ignores xml tags butted between text.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.AdvancedTextBoundary.isAtNonWhiteSpace(System.Int32)">
            <summary>
            Whether the character at the position is between a non whitespace character.
            </summary>
        </member>
        <member name="T:Infragistics.SpellChecker.ChangeWordEventArgs">
            <summary>Holds data for the ChangeWord event.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.ChangeWordEventArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a new ChangeWordEventArgs.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.ChangeWordEventArgs.OldWord">
            <summary>
            The word being replaced.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.ChangeWordEventArgs.NewWord">
            <summary>
            The new word.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.ChangeWordEventArgs.Index">
            <summary>
            The index of the word in the text.
            </summary>
        </member>
        <member name="T:Infragistics.SpellChecker.CultureText">
            <summary>Contains the text for the checker in different cultures</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.DictFile.WordList">
            <summary>WordList or ReverseList</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.DictFile.ReverseList">
            <summary>WordList or ReverseList</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.DictFile.#ctor(System.String)">
            <summary>
            Creates a new DictFile object working on the file in dictFilePath.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.DictFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a new DictFile object working on the file in dictFilePath.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.DictFile.ReadList(System.Int32)">
            <summary>
            Returns a byte array of the words in the list of the specified type.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.DictFile.GetDecodedFileStream">
            <summary>
            Return the decoded file stream.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.DictFile.GetStreamDimensions(System.Int32)">
            <summary>
            Gets the start and length of the wordlist.
            </summary>
        </member>
        <member name="T:Infragistics.SpellChecker.IInternalCheckerEngine">
            <summary>Defines the interface required for a class to be used as a checker engine</summary>
            <remarks>This is the interface which any checker engine must have, by implementing this interface any object can be
            used to parse text and identify 'bad words'.
            It is not necessary to functionally implement all members, for this reason an abstract empty implementation class is provided (CheckerEngineAdapter) which can be extended and overridden for desired functionality.
            </remarks>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.Check(System.String)">
            <summary>Checks the text for errors.</summary>
            <exception cref="T:System.ArgumentNullException">if text parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.Check(System.String,System.Int32)">
            <summary>
            Checks the text for errors starting at a givne position.
            </summary>
            <param name="text">The text to spellcheck</param>
            <param name="startPosition">The position to start spell checking.</param>
            <exception cref="T:System.ArgumentNullException">if text parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.LookUp(System.String)">
            <summary>
            Looks up a <c>word</c> in the dictionary and returns true if it is in there.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.NextBadWord">
            <summary>Gets the next bad word in the list that was identified by Check.</summary>
            <remarks>Check must be called before this method.</remarks>
            <returns>The next BadWord object from the text.  This must return null (C#) or nothing (VB.NET) when no more bad words exist.</returns>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.TextBoundary">
            <summary>The AdvancedTextBoundary class to use to parse words.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.FindSuggestions">
            <summary>Returns an ArrayList of Strings that are suitable suggestions for the current bad word (that is, the one last returned by NextBadWord()).</summary>
            <remarks>If no suggestions can be found, this should return an empty ArrayList.  This method should be thread safe if operating with RapidSpell Desktop.</remarks>
            <exception cref="T:Infragistics.SpellChecker.NoCurrentBadWordException">If NextBadWord() hasn't been run first AND found an erroneous word.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.SetIncludeUserDictionaryInSuggestions(System.Boolean)">
            <summary>Sets whether to include the user dictionary in suggestions taken from this engine.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.SetUserDictionary(Infragistics.SpellChecker.UserDictionary)">
            <summary>Sets the UserDictionary object to be used as a user dictionary source.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.SetUserDictionary(System.IO.Stream)">
            <summary>Sets the UserDictionary file path to be used as a user dictionary source.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.AddWord(System.String)">
            <summary>Adds a word to the user dictionary, if it exists.</summary>
            <remarks>Should return true if the word was added successfully, false otherwise.</remarks>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.RemoveWord(System.String)">
            <summary>
            Removes a word from the user dictionary, if it exists.
            </summary>
            <remarks>Should return true if the word was successfully removed, false otherise.</remarks>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.SetSuggestionsMethod(Infragistics.Controls.Interactions.SuggestionsMethod)">
            <summary>Sets the suggestions method, where method is an integer identifier.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.SetAllowCapitalizedWords(System.Boolean)">
            <summary>Sets whether to ignore capitalized words.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.AllowXML">
            <summary>Whether to ignore XML tags in the text.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.SetConsiderationRange(System.Int32)">
            <summary>Sets the breadth of the suggestions search.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.SetSeparateHyphenWords(System.Boolean)">
            <summary>Sets whether to separate words with hyphens in them into separate words.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.userDictionary">
            <summary>The user dictionary, this should be null (C#) or nothing (VB.NET) if no user dictionary is being used.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.DictFile">
            <summary>
            The Dictionary to be used.  If none is specified, then the English Dictionary will be used.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.LanguageParser">
            <summary>The type of language parsing to use.</summary>
            <remarks>E.g. If the dictionary is set to French, you should use the French parser.</remarks>
            <returns>This implementation always returns ENGLISH.</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.SetPosition(System.Int32)">
            <summary>Sets the pointer position for the <c>NextBadWord</c> iterator.</summary>
            <remarks>
            Further calls to <c>NextBadWord</c> will look for the next bad word from position <c>pos</c>.
            If position &gt; the text length is set to the text length.
            If position &lt; 0, it is set to zero.
            </remarks>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.GetIncludeUserDictionaryInSuggestions">
            <summary>
            Gets whether the user dictionary should be used in finding suggestions for misspelt words.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.GetAllowCapitalizedWords">
            <summary>
            Gets whether to ignore words that start with capital letters.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.GetConsiderationRange">
            <summary>
            Gets the factor for words to consider for suggestions.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.ChangeBadWord(System.String)">
            <summary>Changes the current bad word to <c>newWord</c> in the text.</summary>
            <param name="newWord">replaces the current misspelt word.</param>
            <returns>void</returns>
            <exception cref="T:Infragistics.SpellChecker.NoCurrentBadWordException">if nextBadWord() hasn't been run first AND found an erroneous word.</exception>
            <exception cref="T:System.ArgumentNullException">if newWord parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.IInternalCheckerEngine.IgnoreAll(System.String)">
            <summary>
            Marks <c>word</c> to be ignored in the rest of the text.
            </summary>
            <param name="word">to ignore</param>
            <returns>void</returns>
            <exception cref="T:System.ArgumentNullException">if word parameter is null.</exception>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.CheckHyphenatedText">
            <summary>
            Whether to 'look into' text with hyphens (-), if the word has hyphens in it and CheckHyphenatedText is set true (default), the parts of the text around the hyphens will be checked individually.
            </summary>
            <remarks>E.g. "socio-economic" will be checked as "socio" and "economic".</remarks>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.CheckCompoundWords">
            <summary>Whether to check for compound words, setting this to true is essential for languages such as German which 
            allow for compound words.</summary>
            <remarks>If this=false then Lookup("thesewordsarejoined") = false
            <p>If this=true then Lookup("thesewordsarejoined") = true</p>
            <p>If this=false then Lookup("abcdef") = false</p>
            <p>If this=true then Lookup("abcdef") = false</p>
            <p>Setting this to true will degrade lookup performance</p>
            </remarks>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.SuggestSplitWords">
            <summary>Whether to look for connected words in suggestions.</summary>
            <remarks>if this=true then suggestions may include joined words.
            <p>Eg; suggestions for "myhouse" will include "my house"</p>
            </remarks>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.AllowWordsWithDigits">
            <summary>Whether to ignore words with numbers in them (eg. A10 or 7-11).</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.CurrentBadWord">
            <summary>Gets the current bad word (last returned by NextBadWord).</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.AllowMixedCase">
            <summary>
            Whether to allow words spelt with mixed case, e.g. "MIxEd."
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.AllowCaseInsensitiveSuggestions">
            <summary>Whether to allow suggestions for correctly spelled words with mix case.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.AllowAnyCase">
            <summary>
            Whether to allow words spelt with any case, e.g. "africa" instead of "Africa."  This is more relaxed than AllowMixedCase.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.IInternalCheckerEngine.SplitWordThreshold">
            <summary>
            The property coincides with SuggestSplitWords.  The value of the property determines the minimum size of each word in order for it to become a suggestion.  For example, "myhouse" has two words "my" and "house" in order for "my house" to be a suggestion, the SplitWordThreshold must be set to 2 or smaller. A lower threshold results in worse performance.
            </summary>
        </member>
        <member name="T:Infragistics.SpellChecker.NoCurrentBadWordException">
            <summary>Thrown if NextBadWord has not been run first and found a mis-spelt word.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.NoCurrentBadWordException.#ctor">
            <summary>
            Initializes a new instance of the NoCurrentBadWordException class.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.NoCurrentBadWordException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NoCurrentBadWordException class with a custom message.
            </summary>
            <param name="msg">Useful text string describing the exception.</param>
        </member>
        <member name="M:Infragistics.SpellChecker.NoCurrentBadWordException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the NoCurrentBadWordException class with a custom message.
            </summary>
            <param name="msg">Useful text string describing the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Infragistics.SpellChecker.Permuter">
            <summary>Gets permutations (stores small n=1,2,3,4,5 for quick access), this is used to find anagrams for suggestions</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.Permuter.#ctor(System.Int32)">
            <summary>Generates all permutations of NN numbers.</summary>
            <remarks>E.g. if NN = 3 this will generate 123,132,213,231,312,321 (not in typographic order, but transposition order).</remarks>
        </member>
        <member name="M:Infragistics.SpellChecker.Permuter.GetPermutation(System.Int32)">
            <summary>
            Returns a permutation of a zero based array at index p.  If p&gt; number of permutations stored this will return the last permutation in the set.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.Permuter.GetNumberOfPermutations">
            <summary>
            Gets total number of permutations.
            </summary>
        </member>
        <member name="T:Infragistics.SpellChecker.PhoneticsProcessor">
            Generates the phonetic (sounds like) code for a word.
        </member>
        <member name="M:Infragistics.SpellChecker.PhoneticsProcessor.MetaPhone(System.String)">
            @param txt the word to find the phonetic code for
            @return String the phonetic code for the txt
        </member>
        <member name="M:Infragistics.SpellChecker.PhoneticsProcessor.HasSameMetaPhone(System.String,System.String)">
            @param txt word to check if has same metaphone as
            @param metaphone the meta phone to compare with
            @return boolean true if txt has same metaphone
        </member>
        <member name="T:Infragistics.SpellChecker.SimpleTextBoundary">
            <summary>A simple implementation of Java's word BreakIterator</summary>
            <note>does not treat punctuation the same, Java's one treats ! and \s differently
            this treats anything that isnt a letter the same.</note>
        </member>
        <member name="F:Infragistics.SpellChecker.SimpleTextBoundary.theText">
            <summary>The text being parsed.</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SimpleTextBoundary.shw">
            <summary>Whether to simply treat hyphens as breaking chars.</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SimpleTextBoundary.lp">
            <summary>Language rules to use when parsing.</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SimpleTextBoundary.ENGLISH">
            <summary>English text parsing.</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SimpleTextBoundary.FRENCH">
            <summary>French text parsing.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SimpleTextBoundary.SeparateHyphenWords">
            <summary>
            Whether to treat hyphenated (-) words as separate words.  The default is false.
            </summary>
            <remarks>For e.g. if this is true, text like "cheap-deals" will be treated as two words, "cheap" and "deals", otherwise this will be treated as one word "cheap-deals".</remarks>
        </member>
        <member name="P:Infragistics.SpellChecker.SimpleTextBoundary.LanguageParsing">
            <summary>The language parsing to be used.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SimpleTextBoundary.Last">
            <summary>
            Return the last boundary.  The iterator's current position is set to the last boundary.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SimpleTextBoundary.SetText(System.String)">
            <summary>Sets the text to be analysed.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SimpleTextBoundary.Following(System.Int32)">
            <summary>
            Return the first boundary after the specified offset.
            </summary>
            <param name="offset">the offset to start</param>
            <returns>The first boundary after offset as an integer.</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.SimpleTextBoundary.Preceding(System.Int32)">
            <summary>
            Return the first boundary before the specified offset.
            </summary>
            <param name="offset">the offset to start</param>
            <returns>Returns the first boundary before the offset as an integer.</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.SimpleTextBoundary.IsBoundaryRight(System.Int32)">
            <summary>Whether <c>offset</c> is one place after the last character in a word.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SimpleTextBoundary.IsBoundaryLeft(System.Int32)">
            <summary>
            Whether <c>offset</c> is a boundary to the left of text.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SimpleTextBoundary.IsBoundary(System.Int32)">
            <summary>
            Determines if a character at the <c>offset</c> is a boundary.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SimpleTextBoundary.isAtNonWhiteSpace(System.Int32)">
            <summary>
            Returns whether the character at the position is a whitespace character.  This is contextually relevant.
            </summary>
        </member>
        <member name="T:Infragistics.SpellChecker.SpellChecker">
             <summary>Spell checker engine, checks a text string for spelling errors and makes suggested corrections.</summary>
             <remarks>  This is a non-GUI component, suitable for the business/logic layer of your application.
               You would use this component in web server based applications.
               This component can be used in 2 different ways.  The most common usage, in an iterative fashion is detailed below, but
             it may also be used on a query by query basis.
               To use this component in an iterative way you must first call <c>Check</c> to set the text to check and 
             then iterate through 
             <c>NextBadWord()</c> to identify misspelt words.  <c>NextBadWord</c> will return
             a BadWord object and internally locate the
             the misspelt word in the text, then you can call <c>FindSuggestions</c>
             which will return a ArrayList of suggestions as String objects.  You may also call <c>ChangeBadWord(replacement)</c>
             to replace that current misspelt word in the text.
              <c>NextBadWord()</c> will return null when the text has been checked. <c>GetAmendedText</c> returns the current
             state of the text with corrections.
              
             Calling <c>ChangeBadWord</c> or <c>FindSuggestions</c> before <c>NextBadWord</c> has been called
             and returned a BadWord (i.e. not null) will result in a <see cref="T:Infragistics.SpellChecker.NoCurrentBadWordException"/>.
            </remarks>
             <example>
               Check some text, find suggestions and replace mis-spelt words with "replacement". 
            	
              <code>
            	webSpellChecker c = new webSpellChecker(); 
            	BadWord badWord; 
            	ArrayList suggestions; 
            
            	 //check some text.  
            	c.Check("This is sume text."); 
             
            	//iterate through all bad words in the text.  
            	while((badWord = c.NextBadWord())!=null){ 
             
            		Console.WriteLine(badWord.GetWord() + "- is not spelt correctly. Suggestions:"); 
             
            		try{ 
            			//get suggestions for the current bad word.  
            			suggestions = c.FindSuggestions(); 
             
            			//display all suggestions.  
            			for(int i=0; i&lt;suggestions.Count; i++){
            				Console.WriteLine(suggestions[i]);
            			}
             
            			//change the bad word in the text with "replacement".  
            			c.ChangeBadWord("replacement"); 
             
            		} catch (NoCurrentBadWordException e){ 
            			Console.WriteLine(e); 
            		} 
             
            	} 
            	Console.WriteLine(c.GetAmendedText());  
            	</code>
               </example>
            
            <remarks><para>
             The second way to use this component is simply to query words yourself using <c>Lookup(word)</c> to check if <c>word</c>
             is in the lexicon/dictionary and <c>FindSuggestions(word)</c> to find spelling suggestions for <c>word</c>.
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.wordStart">
            <summary>The start index of the current word being checked/parsed.</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.wordEnd">
            <summary>The end index of the current word being checked/parsed.</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.ignoreList">
            ArrayList of words to be ignored.
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.badWordList">
            ArrayList of mis-spelt words in the text.
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.theText">
            a copy of the text being checked.
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.wordIterator">
            word iterator
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.dontSuggest">
            <summary>Don't suggest words in this array (swear words).</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker._userDictionary">
             <summary>The UserDictionary being used.</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.OPTIMIZE_FOR_SPEED">
            <summary>Indicator for optimization (OPTIMIZE_FOR_SPEED only works with PhoneticSuggestions method).</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.OPTIMIZE_FOR_MEMORY">
            <summary>Indicator for optimization (OPTIMIZE_FOR_SPEED only works with PhoneticSuggestions method).</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.SpellChecker.overrideEval">
            used by GUI to override the change word disability
        </member>
        <member name="E:Infragistics.SpellChecker.SpellChecker.ChangeWord">
            <summary>Change word event, fired when a word is changed.</summary>
        </member>
        <member name="T:Infragistics.SpellChecker.SpellChecker.ChangeWordEventHandler">
            <summary>Change word event handler delegate.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.SplitWordThreshold">
            <summary>
            The property coincides with SuggestSplitWords.  The value of the property determines the minimum size of each word in order for it to become a suggestion.  For example, "myhouse" has two words, "my" and "house."  In order for "my house" to be a suggestion, the SplitWordThreshold must be set to 2 or smaller.  A lower threshold results in worse performance.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.TextBoundary">
            <summary>The AdvancedTextBoundary class to use to parse words.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.CheckCompoundWords">
            <summary>
            Whether to check for compound words.  Setting this to true is essential for languages such as German which allow for compound words.
            </summary>
            <remarks>
            If this=false then Lookup("thesewordsarejoined") = false
            <p>If this=true then Lookup("thesewordsarejoined") = true</p>
            	<p>If this=false then Lookup("abcdef") = false</p>
            	<p>If this=true then Lookup("abcdef") = false</p>
            	<p>Setting this to true will degrade lookup performance by a maximum of approximately 100[1-1/n] percent (where n is the number of letters in the word) for misspelt words.  There is no preformance degredation for correctly spelt words.  On average for texts with mostly correctly spelt words the performance degredation for the Check method is roughly 25%.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.SuggestSplitWords">
            <summary>Whether to look for connected words in suggestions.</summary>
            <remarks>
            If this=true then suggestions may include joined words.
            <p>E.g. suggestions for "myhouse" will include "my house"</p>
            Setting this to true (default) has a slight performance impact.
            </remarks>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.AllowXML">
            <summary>
            Whether to ignore XML/HTML tags.  This should be set to true for RichTextBox support, but is false by default.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.CheckHyphenatedText">
            <summary>
            Whether to 'look into' text with hyphens (-).  If the word has hyphens in it and CheckHyphenatedText is set to true (default), the parts of the text around the hyphens will be checked individually.
            </summary>
            <remarks>E.g. "socio-economic" will be checked as "socio" and "economic".</remarks>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.LanguageParser">
            <summary>The type of language parsing to use.</summary>
            <remarks>E.g. if the dictionary is set to French, you should use the French parser.</remarks>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.AllowMixedCase">
            <summary>
            Whether to allow words spelt with mixed case, e.g. "MIxEd" - also see AllowAnyCase.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.AllowCaseInsensitiveSuggestions">
            <summary>
            Whether to allow suggestions for correctly spelled words with mixed case.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.AllowAnyCase">
            <summary>
            Whether to allow words spelt with incorrect case, e.g. "africa", instead of "Africa."  This is more relaxed than AllowMixedCase.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.userDictionary">
             <summary>The UserDictionary being used, may be null if no user dictionary is being used.</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.IgnoreList">
            <summary>
            The words to ignore.  Note this list is changed by IgnoreAll.
            </summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.AllowWordsWithDigits">
            <summary>Whether to ignore words with numbers in them (eg. A10 or 7-11).</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.CurrentBadWord">
            <summary>Gets the current bad word (last returned by NextBadWord).</summary>
        </member>
        <member name="P:Infragistics.SpellChecker.SpellChecker.IgnoreRtfCodes">
            <summary>Sets whether this should ignore Rtf (or any escaped) codes in the text.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.Dispose(System.Boolean)">
            <summary>
            Disposes of resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.SetSuggestionsMethod(Infragistics.Controls.Interactions.SuggestionsMethod)">
            <summary>
            Sets the suggestions method to use.  Either PhoneticSuggestions or HashingSuggestions.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GetSuggestionsMethod">
            <summary>
            Gets the suggestions method to use.  Either PhoneticSuggestions or HashingSuggestions.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.SetIncludeUserDictionaryInSuggestions(System.Boolean)">
            <summary>
            Sets whether the user dictionary should be used in finding suggestions for misspelt words.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GetIncludeUserDictionaryInSuggestions">
            <summary>
            Gets whether the user dictionary should be used in finding suggestions for misspelt words.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.SetAllowCapitalizedWords(System.Boolean)">
            <summary>
            Sets whether to ignore words with capital letters.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GetAllowCapitalizedWords">
            <summary>
            Gets whether to ignore words with capital letters.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.SetConsiderationRange(System.Int32)">
            <summary>
            Sets the factor for words to consider for suggestions.  Lower values are faster but consider less words for suggestions.  The default is 80.  If w &lt;= 1 this method won't do anything.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GetConsiderationRange">
            <summary>
            Gets the factor for words to consider for suggestions.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.SetSeparateHyphenWords(System.Boolean)">
            <summary>
            Sets whether to treat hyphenated (-) words as separate words.  The default is false.
            </summary>
            <remarks>For e.g. if this is true text like "cheap-deals" will be treated as two words, "cheap" and "deals."  Otherwise this will be treated as one word, "cheap-deals".  Also see CheckHyphenatedText.</remarks>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GetSeparateHyphenWords">
            <summary>
            Gets whether to treat hyphenated (-) words as separate words.  The default is false.
            </summary>
            <remarks>For e.g. if this is true text like "cheap-deals" will be treated as two words "cheap" and "deals", otherwise this will be treated as one word, "cheap-deals".</remarks>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.ReadWordListStream(System.Collections.Generic.List{System.String},System.Int32,Infragistics.SpellChecker.DictFile,System.String)">
            <summary>
            Reads list from the stream.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.AddWord(System.String)">
            <summary>
            Adds a <c>word</c> to the user dictionary (if it has been specified).
            </summary>
            <param name="word">String to add to user dictionary, if it is being used.</param>
            <returns>Boolean, true if the word is now in the user dictionary, false if the word could not be added to the user dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">If word parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.NextBadWord">
            <summary>
            Returns the next mis-spelt word in the text as a BadWord object.
            </summary>
            <returns>Keyoti.RapidSpell.BadWord or null if there are no more bad words.</returns>
            @see Keyoti.rapidSpell.BadWord
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.ChangeBadWord(System.String)">
            <summary>
            Changes the current bad word to the <c>newWord</c> in the text.
            </summary>
            <param name="newWord">replaces the current misspelt word.</param>
            <returns>void</returns>
            <exception cref="T:Infragistics.SpellChecker.NoCurrentBadWordException">if nextBadWord() hasn't been run first AND found an erroneous word.</exception>
            <exception cref="T:System.ArgumentNullException">if newWord parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.Check(System.String,System.Int32)">
            <summary>
            Checks text for spelling correctness.  From startPosition in text, mis-spelt words can be accessed through <c>nextBadWord</c>.
            </summary>
            <remarks>The property startPosition should be &gt;=0 but if it is &lt; 0 it is set = 0.</remarks>
            <param name="text">the text to be checked</param>
            <param name="startPosition">the position in the text to begin checking from</param>
            <returns>void</returns>
            <exception cref="T:System.ArgumentNullException">if text parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.convertHtmlEntities(System.String)">
            <summary>
            Converts HTML entity codes to their Unicode characters.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.Check(System.String)">
            <summary>
            Checks text for spelling correctness.  From the beginning of text, mis-spelt words can be accessed through <c>nextBadWord</c>.
            </summary>
            <param name="text">to spell check.</param>
            <returns>void</returns>
            <exception cref="T:System.ArgumentNullException">if text parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.FindSuggestions">
            <summary>
            Gets an enumeration of String suggestions for spellings of the current bad word.
            </summary>
            <returns>ArrayList of String suggestions for the current bad word.</returns>
            <exception cref="T:Infragistics.SpellChecker.NoCurrentBadWordException">If NextBadWord() hasn't been run first AND found an erroneous word.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.FindSuggestions(System.String)">
            <summary>
            Gets an enumeration of String suggestions for the word.
            </summary>
            <param name="word">the word to check the spelling of.</param>
            <returns>ArrayList of String suggestions for the word.</returns>
            <exception cref="T:System.ArgumentNullException">if word parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.FindSuggestions(System.String,System.Boolean)">
            <summary>
            Gets an enumeration of String suggestions for the word.
            </summary>
            <param name="word">the word to check the spelling of.</param>
            <param name="searchLowerCase">whether to return suggestions for word in a lower case form (if it's capitalized).</param>
            <returns>ArrayList of String suggestions for the word.</returns>
            <exception cref="T:System.ArgumentNullException">if word parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GetAmendedText">
            <summary>
            Returns the original text sent to check() but with any alterations made through <c>change</c>.
            </summary>
            <returns>String of the text after corrections, null if there is no text.</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.IgnoreAll(System.String)">
            <summary>
            Marks <c>word</c> to be ignored in the rest of the text.
            </summary>
            <param name="word">to ignore</param>
            <returns>void</returns>
            <exception cref="T:System.ArgumentNullException">if word parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.LookUp(System.String)">
            <summary>
            Checks if the query is in the main dictionary or user.
            </summary>
            <remarks>This method is inconsiderate of the words in IgnoreList.</remarks>
            <param name="query">the word to check spelling of</param>
            <returns>True if spelt correctly, false if it is not in the dictionary.</returns>
            <exception cref="T:System.ArgumentNullException"> if query parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.FindCompoundWords(System.String,System.Collections.IList)">
            <summary>
            Finds the compound words in the <c>text</c> and puts them in <c>subwords</c>.  Set <c>subwords</c> to null/nothing to just find if the <c>text</c> has a compound word formation.
            </summary>
            <remarks>
            Only adds words to the list if all are valid.  In other words, this will not find all words that are part of the <c>text</c>, but only the words that all make up the <c>text</c>.
            <p>E.g. "catchmentarea" has words "catchment" and "area" but not "cat", "me" etc.</p>
            The order of the words in the list is the reverse of their order in the <c>text</c>.
            </remarks>
            <param name="text">The text to find compound words in</param>
            <param name="subwords">A list that formative sub-words will be added to, can be null/nothing.</param>
            <returns>True if the <c>text</c> is entirely formed from compound words, False if not.</returns>
            <exception cref="T:System.ArgumentNullException">if text is null</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.FindSplitWords(System.String,System.Collections.IList)">
            <summary>
            Finds correctly spelled words in the <c>text</c> and puts them in <c>subwords</c>.  Set <c>subwords</c> to null/nothing to just find if the <c>text</c> has compound word formation.
            </summary>
            <remarks>
            Only adds words to the list if all are valid.  In other words, this will not find all words that are part of the <c>text</c>, but only the words that all make up the <c>text</c>.
            <p>E.g. "catchmentarea" has words "catchment" and "area" but not "cat", "me" etc.</p>
            The order of the words in the list is the reverse of their order in the <c>text</c>.
            </remarks>
            <param name="text">The text to find compound words in</param>
            <param name="subwords">A list that formative sub-words will be added to, can be null/nothing.</param>
            <returns>True if the <c>text</c> is entirely formed from compound words, False if not.</returns>
            <exception cref="T:System.ArgumentNullException">if text is null</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.FindAnagrams(System.String,System.Collections.IList)">
            <summary>Finds anagrams of <c>word</c> and puts them in <c>anagrams</c> if not already present.</summary>
            <remarks></remarks>
            <param name="word">The word to find anagrams of</param>
            <param name="anagrams">A list that anagrams will be added to.</param>
            <exception cref="T:System.ArgumentNullException">if word is null/nothing</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.SetUserDictionary(System.IO.Stream)">
            <summary>
            Set the user dictionary to be used.
            </summary>
            <param name="userDictionaryFile">A file to be used as a user dictionary.</param>
            <exception cref="T:System.ArgumentNullException">If userDictionaryFile is null</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.SetUserDictionary(Infragistics.SpellChecker.UserDictionary)">
            <summary>
            Set the user dictionary to be used.
            </summary>
            <remarks>If the userDictionary can not be created/read it will be ignored.</remarks>
            <param name="userDictionary">a UserDictionary object representing a user dictionary</param>
            <exception cref="T:System.ArgumentNullException">if userDictionary is null.</exception>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.MakeCap(System.String)">
            Capitalises first letter of word
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.LookUpMainDictionary(System.String)">
            <summary>
            Checks if the query is in the word dictionary.  Returns true if it doesnt start with a letter or apostrophe.
            </summary>
            <param name="query">the word to check spelling of</param>
            <returns>Boolean true if spelt correctly, false if not in the dictionary.</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.LookUpUserDictionary(System.String)">
            Look up the query in the user dictionary if it exists 
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GetPreviousWord">
            Returns the previous word in the text, and moves word pointers in process.
            <returns>String the next word in the text</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GetNextWord">
            <summary>Returns the next word in the text.</summary>
            <returns>String of the next word in the text.</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.PreCheck">
            Scan theText and record all mis-spelt words in badWordList and return the word pointers to the start.
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.SetPosition(System.Int32)">
            <summary>Sets the pointer position for the <c>NextBadWord</c> iterator.</summary>
            <remarks>Further calls to <c>NextBadWord</c> will look for the next bad word from position <c>pos</c>.
            If position &gt; the text length it is set to the text length.
            If position &lt; 0, it is set to zero.</remarks>
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.GeneratePhoneticList">
            Generate a big array of phonetic codes for the dictionary, this will save reprocessing redundently,
            at the expense of memory.
        </member>
        <member name="T:Infragistics.SpellChecker.SpellChecker.ReverseSorter">
            Sort by length of string.
        </member>
        <member name="T:Infragistics.SpellChecker.SpellChecker.ResourceDecoder">
            The resource decoder, which takes the byte array from wordlist and decodes it.
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.ResourceDecoder.DecodeWordList(System.Collections.Generic.List{System.String},System.Byte[])">
            Decode byte array in to list, returns number of words in list, is thread safe
        </member>
        <member name="M:Infragistics.SpellChecker.SpellChecker.ResourceDecoder.DecodeWordList(System.Collections.Generic.List{System.String},System.Byte[],System.String)">
            Decode byte array in to list, returns number of words in list, is thread safe
            encoding is either "UTF8" or "Unicode"
        </member>
        <member name="T:Infragistics.SpellChecker.UserDictionary">
            <summary>Represents the UserDictionary</summary>
        </member>
        <member name="F:Infragistics.SpellChecker.UserDictionary.valid">
            Whether the file is valid 
        </member>
        <member name="F:Infragistics.SpellChecker.UserDictionary.wordList">
            array holding all lines in dict.
        </member>
        <member name="M:Infragistics.SpellChecker.UserDictionary.#ctor">
            <summary>
            Constructs an invalid UserDictionary.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.UserDictionary.#ctor(System.IO.Stream)">
            <summary>Construct a UserDictionary based on a stream.</summary>
            <param name="userDictionaryFile">The file used for a user dictionary.</param>
        </member>
        <member name="M:Infragistics.SpellChecker.UserDictionary.IsValid">
            <summary>Returns whether the dictionary file is valid.</summary>
        </member>
        <member name="M:Infragistics.SpellChecker.UserDictionary.AddWord(System.String)">
            <summary>Tries to add <c>word</c> to this dictionary</summary>
            <param name="word">String containing the new word</param>
            <returns>true if added successfully, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.UserDictionary.RemoveWord(System.String)">
            <summary>
            Tries to remove a word from this dictionary.
            </summary>
            <param name="word">String contianing the word to remove.</param>
            <returns>True if the word was removed successfully; False otherwise</returns>
        </member>
        <member name="M:Infragistics.SpellChecker.UserDictionary.ReadDict">
            <summary>
            Read dictionary a file.
            </summary>
        </member>
        <member name="M:Infragistics.SpellChecker.UserDictionary.WriteDict(System.String)">
            Write dictionary file ////
        </member>
        <member name="T:Infragistics.BadWord">
            <summary>Represents a mis-spelt word in the text.</summary>
        </member>
        <member name="F:Infragistics.BadWord.REASON_SPELLING">
            <summary>BadWord reason, incorrect spelling.</summary>
        </member>
        <member name="M:Infragistics.BadWord.GetReason">
            <summary>Gets the reason that this is a bad word.</summary>
        </member>
        <member name="P:Infragistics.BadWord.Reason">
            <summary>Gets the reason that this is a bad word.</summary>
        </member>
        <member name="M:Infragistics.BadWord.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Constructs a BadWord (REASON_SPELLING) instance.</summary>
            <param name="word">the word String that is misspelt</param>
            <param name="caretStart">the position in the original text</param>
            <param name="caretEnd">the end position in the text</param>
        </member>
        <member name="M:Infragistics.BadWord.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a BadWord instance.</summary>
            <param name="word">the word String that is misspelt</param>
            <param name="caretStart">the position in the original text</param>
            <param name="caretEnd">the end position in the text</param>
            <param name="reason">the reason this is a bad word,  REASON_SPELLING</param>
        </member>
        <member name="P:Infragistics.BadWord.Suggestions">
            <summary>
            List of potential corrections for the <see cref="T:Infragistics.BadWord"/>.
            </summary>
        </member>
        <member name="T:Infragistics.WordOccurrence">
            <summary>Represents a word in the text.</summary>
        </member>
        <member name="P:Infragistics.WordOccurrence.StartPosition">
            <summary>Gets the position of the start of this word in the main text.</summary>
        </member>
        <member name="P:Infragistics.WordOccurrence.EndPosition">
            <summary>Gets the position of the end of this word in the main text.</summary>
        </member>
        <member name="P:Infragistics.WordOccurrence.Word">
            <summary>Gets the string of this bad word.</summary>
        </member>
        <member name="M:Infragistics.WordOccurrence.GetStartPosition">
            <summary>Gets the position of the start of this word in the main text.</summary>
            <returns>Integer position in the text where this word starts.</returns>
        </member>
        <member name="M:Infragistics.WordOccurrence.GetEndPosition">
            <summary>Gets the position of the end of this word in the main text.</summary>
            <returns>Integer position in the text where this word ends</returns>
        </member>
        <member name="M:Infragistics.WordOccurrence.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Constructs a BadWord instance.</summary>
            <param name="word">the word String that is misspelt</param>
            <param name="caretStart">the position in the original text</param>
            <param name="caretEnd">the end position in the text</param>
        </member>
        <member name="M:Infragistics.WordOccurrence.GetWord">
            <summary>Gets the String of this bad word.</summary>
            <returns>String in this BadWord.</returns>
        </member>
        <member name="T:Infragistics.DialogStringResources">
            <summary>
            A resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.NotInDictionary">
            <summary>
            Not in dictionary string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.Context">
            <summary>
            Context string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.Loading">
            <summary>
            Loading string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.UseThisInstead">
            <summary>
            Use this instead string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.Change">
            <summary>
            Change string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.ChangeAll">
            <summary>
            Change all string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.Ignore">
            <summary>
            Ignore string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.IgnoreAll">
            <summary>
            Ignore all string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.Suggestions">
            <summary>
            Suggestions string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.PreviousField">
            <summary>
            Previous field string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.NextField">
            <summary>
            Next field string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.Ok">
            <summary>
            Ok string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.AddToDictionary">
            <summary>
            Add to dictionary string.
            </summary>
        </member>
        <member name="P:Infragistics.DialogStringResources.SpellCheckComplete">
            <summary>
            Spellcheck complete string.,
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog">
            <summary>
            The control shows the progress while the dictionary is downloaded from uri location. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog.SpellChecker">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/> that is associated with this <see cref="T:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog.#ctor">
            <summary>
            Initialize new instance from the class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog.ProgressValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog.ProgressValue"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog.ProgressValue">
            <summary>
            Returns a value representing the percentage of the downloding process that has been completed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog.CancelAsyncDictionaryLoad">
            <summary>
            If a <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/> is associated, will call to the <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/> to cancel it's dictionary load.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog.GetParameter(Infragistics.Controls.CommandSource)">
            <summary>
            Returns the object that defines the parameters necessary to execute the command.
            </summary>
            <param name="source">The CommandSource object which defines the command to be executed.</param>
            <returns>The object necessary for the command to complete.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog.SupportsCommand(System.Windows.Input.ICommand)">
            <summary>
            Returns if the object will support a given command type.
            </summary>
            <param name="command">The command to be validated.</param>
            <returns>True if the object recognizes the command as actionable against it.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.SuggestionsMethod">
            <summary>
             The type of Suggestions that will be returned. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.SuggestionsMethod.HashingSuggestions">
            <summary>
            Suggestions will be determined by hashing the word.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.SuggestionsMethod.PhoneticSuggestions">
            <summary>
            Suggestions will be determined phonetically.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.LanguageType">
            <summary>Enumeration of language types.</summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.LanguageType.English">
            <summary>The English language.</summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.LanguageType.Dutch">
            <summary>The Dutch language.</summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.LanguageType.French">
            <summary>The French language.</summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.LanguageType.German">
            <summary>The German language.</summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.LanguageType.Italian">
            <summary>The Italian language.</summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.LanguageType.Portuguese">
            <summary>The Portuguese language.</summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.LanguageType.Spanish">
            <summary>The Spanish language.</summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.LanguageType.NotSet">
            <summary>
            Defaults to the English language.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.SpellCheckingMode">
            <summary>
            Whether the dialog will be modal. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.SpellCheckingMode.ModalDialog">
            <summary>
            The dialog will be modal. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.SpellCheckingMode.NonModalDialog">
            <summary>
            The dialog will be modalless. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand">
            <summary>
            An enumeration of available commands for the <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.Ignore">
            <summary>
            Ignores the current misspelled word.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.IgnoreAll">
            <summary>
            Ignores the current misspelled word and continues to ignore it for future sessions.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.Change">
            <summary>
            Changes the current misspelled word with the corrected version.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.ChangeAll">
            <summary>
            Replaces all instances of the current misspelled word with the corrected version.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.Done">
            <summary>
            Finishes the current spellcheck session.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.CloseDialog">
            <summary>
            Closes the spell checker dialog.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.CancelDialog">
            <summary>
            Closes the spellchecker dialog and passes true for the canceled parameter of the spellcheck complete event args.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.NextField">
            <summary>
            Moves to the next editor to be spell checked.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.PreviousField">
            <summary>
            Moves to the previous spell check editor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.Cancel">
            <summary>
            Cancel the download process of the dictionaries
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommand.AddToDictionary">
            <summary>
            Adds the current bad word to the user dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.XamSpellCheckerCommand">
            <summary>
            An enumeration of available commands for the <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/> object.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerCommand.SpellCheck">
            <summary>
            Begins a spell check operation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerCommand.CancelAsyncDictionaryDownload">
            <summary>
            Cancels the current asynchrnous dictionary download.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.SpellCheckCompletedEventArgs">
            <summary>
            Event args for the <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheckCompleted"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.SpellCheckCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Creates a new <see cref="T:Infragistics.Controls.Interactions.SpellCheckCompletedEventArgs"/> instance. 
            </summary>
            <param name="error">Gets a value that indicates which error occurred during an asynchronous operation.</param>
            <param name="canceled">Gets a value that indicates whether an asynchronous operation has been canceled.</param>
            <param name="state">Gets the unique identifier for the asynchronous task.</param>
        </member>
        <member name="T:Infragistics.Controls.Interactions.PerformanceOptions">
            <summary>
            Class which contains the options which influence to performance of spelling
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.PerformanceOptions.AllowCapitalizedWords">
            <summary>
            Gets/Sets whether to Allow words with all capital letters. 
            </summary>
            <remarks>
            Performance increases marginally if set to true. When set to "True" words that only have
            capitalized letters are ignored. When set to "False", 
            words with all capitalized letters will be treated as a normal word. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.PerformanceOptions.CheckCompoundWords">
            <summary>
            Gets/Sets whether to check for compound words.
            </summary>
            <remarks>
            <p>Setting this to true is essential for languages such as German which allow for compound words.
            For example: if the word is "thesewordsarejoined" when the property is set to "False" the word 
            would be marked as misspelled. But when set to "True" the word would be marked as spelled 
            correctly. However, if one of the words inside of the
            compound word was misspelled, the whole word would be marked as misspelled. 
            </p>
            <p>Setting this to true will degrade lookup performance by a maximum of approximately 100[1-1/n] percent (where n is the number of letters in the word) for misspelt words.</p>
            <p>There is no performance degredation for correctly spelt words.</p>
            <p>On average for texts with mostly correctly spelt words the performance degredation for the Check method is roughly 25%.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.PerformanceOptions.ConsiderationRange">
            <summary>
            Gets/Sets the factor for how close words need to be to be suggested.
            </summary>
            <remarks>
            The size factor for words to consider for suggestions. Lower values are faster but consider 
            less words for suggestions. When the property is set to a value less than 0 it will default to 80. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.PerformanceOptions.SplitWordThreshold">
            <summary>
            The value of the property determines the minimum size of each word in order for it to become a suggestion. 
            </summary>
            <remarks>
            The property coincides with SuggestSplitWords. The value of the property determines the minimum 
            size of each word in order for it to become a suggestion. For example, "myhouse" has two words, 
            "my" and "house." In order for "my house" to be a suggestion, the SplitWordThreshold must be 
            set to 2 or less. A lower threshold results in worse performance. 
            /// </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.PerformanceOptions.SuggestSplitWords">
            <summary>
            Gets/Sets whether to look for connected words in suggestions.
            </summary>
            <remarks>
            When set to "True" suggestions may include 
            joined words. For example: if the misspelled word was "helloworld," suggestions would include 
            "hello world." Note: when turned on there will be a slight hit in performance.  
            /// </remarks>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.SpellCheckerDialogRootPanel">
            <summary>
            A panel that should used as the Root Element of the <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.SpellCheckerDialogRootPanel.SupportsCommand(System.Windows.Input.ICommand)">
            <summary>
            Returns if the object will support a given command type.
            </summary>
            <param name="command">The command to be validated.</param>
            <returns>True if the object recognizes the command as actionable against it.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.SpellCheckerDialogRootPanel.GetParameter(Infragistics.Controls.CommandSource)">
            <summary>
            Returns the object that defines the parameters necessary to execute the command.
            </summary>
            <param name="source">The CommandSource object which defines the command to be executed.</param>
            <returns>The object necessary for the command to complete.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.SpellOptions">
            <summary>
            The <see cref="T:Infragistics.Controls.Interactions.SpellOptions"/> class lists properties which determine how the spell check operation will proceed and react to issues found 
            in the text.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.AllowAnyCase">
            <summary>
             Gets/Sets whether to allow words spelt with any case, e.g. "africa" instead of "Africa."  This is more relaxed than AllowMixedCase.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.AllowCaseInsensitiveSuggestions">
            <summary>
            Gets/Sets whether to allow suggestions for correctly spelled words with mixed case. 
            </summary>
            <remarks>   
            For example: if AllowMixedCase is false and the word "tHE" is passed to the WebSpellChecker, 
            when set to "True" you will recieve suggestions, when set to "False" you will not. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.AllowMixedCase">
            <summary>
            Gets/Sets whether to allow words spelt with mixed case, e.g. "MIxEd." 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.AllowWordsWithDigits">
            <summary>
            Gets/Sets whether to Allow words with numbers in them (eg. A10 or 7-11). 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.AllowXml">
            <summary>
            Gets/Sets whether to Allow XML/HTML tags, false by default. 
            </summary>
            <remarks>
            This identifies XML tags as anything in between &lt; and &gt; characters.  Therefore it will 
            cause undesirable effects in text such as &amp;quot; the sign for less than is &lt; and the 
            sign for greater than is &gt; &amp;quot;.  Of course in HTML that should have been written as 
            &amp;quot; the sign for less than is &amp;lt; and the sign for greater than is &amp;gt; &amp;quot;;
             anyway, which would be fine.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.CheckHyphenatedText">
            <summary>
            Gets/Sets whether to check text with hyphenate.
            </summary>
            <remarks>
            When set to "True" the hyphenated text is checked as separate words. When set to "False" the 
            hyphenated text is checked as one word. If that word is in the dictionary it will be marked as 
            correct. True: The word "after-effect" would be treated as "after" and "effect". False: The word
            "after-effect" would be treated as "after-effect". For both "true" and "false", if misspelled 
            the whole word will be marked as misspelled. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.IncludeUserDictionaryInSuggestions">
            <summary>
            Gets/Sets whether the user dictionary should be used in finding suggestions for misspelt words.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.LanguageParser">
            <summary>
            Gets/Sets the language parser to use. 
            </summary>
            <remarks>
            This should match the language of the main dictionary where possible. 
            This is used to give hints to the parser about how punctuation is used (e.g. apostrophe is used differently in English and French).
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.SeparateHyphenWords">
            <summary>
            Gets/Sets whether the hyphenated text is treated as separate words. 
            </summary>
            <remarks>
            When set to "True" the hyphenated text is treated as separate words. For e.g. if this is true 
            text like "cheap-deals" will be treated as two words "cheap" and "deals". If one of the words
            was misspelled only that word would be marked as misspelled. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.SpellOptions.SuggestionsMethod">
            <summary>
            Gets/Sets the method by which suggestions are determined. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.XamSpellChecker">
            <summary>
            A visual representation allowing a user to spellcheck a string.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.#ctor">
            <summary>
            Initializes a new instance of the XamSpellChecker class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.#cctor">
            <summary>
            Static constructor for the <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellChecker.CurrentBadWordProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.XamSpellChecker.CurrentBadWord"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.CurrentBadWord">
            <summary>
            Gets the current bad word, name is empty if there is no more bad words.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheckDialog">
            <summary>
            Gets a reference to the spell checker controls <see cref="T:Infragistics.Controls.Interactions.XamDialogWindow"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryUri">
            <summary>
            Gets or sets the Uri that the dictionary is at.
            </summary>
            <remarks>
            <p class="body">When you set this property, the download process starts immediately and asynchronously.
            You can subscribe for <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryProgressChanged"/> event to know the percents that were downloaded.</p>
            <p class="body">You can use <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryDownloadCompleted"/> to be notified when the download process has been completed. </p>
            <p class="note">The spellchecking process doesn’t start until the dictionary load is completed.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.UserDictionaryUri">
            <summary>
            Gets or sets the Uri that the dictionary is at.
            </summary>
            <remarks>
            <p class="body">When you set this property, the download process starts immediately and asynchronously.</p>
            <p class="body">You can use <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.UserDictionaryDownloadCompleted"/> to be notified when the download process has been completed.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.DialogSettings">
            <summary>
            Gets a reference to the <see cref="P:Infragistics.Controls.Interactions.XamSpellChecker.DialogSettings"/> object that controls all the properties of the <see cref="P:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheckDialog"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellChecker.PerformanceOptionsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.XamSpellChecker.PerformanceOptions"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.PerformanceOptions">
            <summary>
            Gets the options available for the spell checker engine. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryLoadProgressDialogStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryLoadProgressDialogStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryLoadProgressDialogStyle">
            <summary>
            Gets or sets the style for the <see cref="T:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog"/>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellChecker.SpellOptionsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.XamSpellChecker.SpellOptions"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.SpellOptions">
            <summary>
            Gets or sets the options that pertain to how the <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/> returns it's results.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheckTargets">
            <summary>
            A collection of <see cref="T:System.Windows.Data.BindingBase"/>'s which are used to determine which editiable fields will be spell checked.
            </summary>         
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.AddWordToUserDictionary(System.String)">
            <summary>
            Adds a word to the current <see cref="T:Infragistics.SpellChecker.UserDictionary"/>.
            </summary>
            <param name="word">The word to add to the user dictionary.</param>
            <exception cref="T:System.InvalidOperationException">
            The user dictionary has not been set.
            </exception>
            <returns>True if the word was added to the user dictionary; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheckComplete(System.Boolean)">
            <summary>
            Finishes the current spellcheck session.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.LoadDictionary(System.String)">
            <summary>
            Loads stored dictionary from isolated storage.
            </summary>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.LoadUserDictionary(System.String)">
            <summary>
            Loads stored user dictionary from isolated storage.
            </summary>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.RemoveWordFromUserDictionary(System.String)">
            <summary>
            Removes a word from the current <see cref="T:Infragistics.SpellChecker.UserDictionary"/>.
            </summary>
            <param name="word">The word to be removed from the user dictionary.</param>
            <exception cref="T:System.InvalidOperationException">
            The user dictionary has not been set.
            </exception>
            <returns>True if the word was removed from the user dictionary; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.SaveDictionary(System.String)">
            <summary>
            Saves current dictionary in isolated storage.
            </summary>
            <param name="fileName">The name of the file.</param>
            <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">If the file already exists and can not be deleted.</exception>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.SaveUserDictionary(System.String)">
            <summary>
            Saves current user dictionary in isolated storage
            </summary>
            <param name="fileName">The name of file</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheck">
            <summary>
            Spellchecks the string that is in the TextToSpellCheck property.
            </summary>
            <remarks>
            <p class="note">The spellchecking process doesn’t start until the dictionary load is completed.</p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">You can not start spell checking while the previous is not finished.</exception>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheck(System.String)">
            <summary>
            Spellchecks the given string, and sets the TextToSpellCheck property.
            </summary>
            <param name="text">The Text that is used to spellcheck.</param>
            <remarks>
            <p class="note">The spellchecking process doesn’t start until the dictionary load is completed.</p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">You can not start spell checking while the previuos is not finished.</exception>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.OnDictionaryDownloadCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryDownloadCompleted"/> event. 
            </summary>
            <param name="args">A AsyncCompletedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.OnUserDictionaryDownloadCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.UserDictionaryDownloadCompleted"/> event. 
            </summary>
            <param name="args">A AsyncCompletedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.OnDictionaryProgressChanged(System.Int32)">
            <summary>
            Fires the <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryProgressChanged"/> event. 
            </summary>
            <param name="percent">the progress value</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.OnUserDictionaryProgressChanged(System.Int32)">
            <summary>
            Fires the <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.UserDictionaryProgressChanged"/> event. 
            </summary>
            <param name="percent">the progress value</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.OnSpellCheckCompleted(Infragistics.Controls.Interactions.SpellCheckCompletedEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheckCompleted"/> event. 
            </summary>
            <param name="args">The data for the event</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.CancelAsyncDictionaryDownload">
            <summary>
            Cancels a pending asynchronous operation. 
            </summary>
            <remarks class="body">
            When you call the CancelAsyncDictionaryDownload method, your application still receives the completion event associated
            with the operation. For example, if you call CancelAsyncDictionaryDownload to cancel a <see cref="M:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheck"/> operation
            and you have specified an event handler for the <see cref="E:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheckCompleted"/> event, your event handler
            receives notification that the operation has ended. To learn whether the operation completed 
            successfully, check the Cancelled property of the <see cref="T:Infragistics.Controls.Interactions.SpellCheckCompletedEventArgs"/> for the relevant 
            completed event handler. 
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.RegisterResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds an additonal Resx file in which the control will pull its resources from.
            </summary>
            <param name="name">The name of the embedded resx file that contains the resources to be used.</param>
            <param name="assembly">The assembly in which the resx file is embedded.</param>
            <remarks>Don't include the extension of the file, but prefix it with the default Namespace of the assembly.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.UnregisterResources(System.String)">
            <summary>
            Removes a previously registered resx file.
            </summary>
            <param name="name">The name of the embedded resx file that was used for registration.</param>
            <remarks>
            Note: this won't have any effect on controls that are already in view and are already displaying strings.
            It will only affect any new controls created.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/> when a new template is applied. 
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryDownloadCompleted">
            <summary>
            Occurs when the dictionary is loaded.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Interactions.XamSpellChecker.UserDictionaryDownloadCompleted">
            <summary>
            Occurs when the user dictionary is loaded.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Interactions.XamSpellChecker.DictionaryProgressChanged">
            <summary>
            Occurs when the dictionary file is being downloaded and indicates download progress.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Interactions.XamSpellChecker.UserDictionaryProgressChanged">
            <summary>
            Occurs when the user dictionary file is being downloaded and indicates download progress.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Interactions.XamSpellChecker.SpellCheckCompleted">
            <summary>
            Occurs after all or a part of text is about to be spell checked. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.Dispose(System.Boolean)">
            <summary>
            A call to Dispose(false) clean up native resources. A call to Dispose(true) 
            clean up both managed and native resources.	
            </summary>
            <param name="cleanAll"></param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.SupportsCommand(System.Windows.Input.ICommand)">
            <summary>
            Returns if the object will support a given command type.
            </summary>
            <param name="command">The command to be validated.</param>
            <returns>True if the object recognizes the command as actionable against it.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.GetParameter(Infragistics.Controls.CommandSource)">
            <summary>
            Returns the object that defines the parameters necessary to execute the command.
            </summary>
            <param name="source">The CommandSource object which defines the command to be executed.</param>
            <returns>The object necessary for the command to complete.</returns>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.PropertiesToIgnore">
            <summary>
            Gets a List of properties that shouldn't be saved when the PersistenceManager goes to save them.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellChecker.PriorityProperties">
            <summary>
            Gets a List of properties that should be applied, before even trying to look at any other property on the object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellChecker.FinishedLoadingPersistence">
            <summary>
            Used to clean up after the Persistence framework is done loading this control.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.TargetElement">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.Primitives.TargetElement.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.Primitives.TargetElement.Value"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.Primitives.TargetElement.Value">
            <summary>
            Gets/Sets the Value associated with the element.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.XamSpellCheckerCommandBase">
            <summary>
            Base class for all commands that deal with a <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.XamSpellCheckerCommandBase.CanExecute(System.Object)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.XamSpellCheckerCommandBase.CanExecuteDialogCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Reports if the <see cref="M:Infragistics.Controls.Interactions.Primitives.XamSpellCheckerCommandBase.CanExecuteDialogCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)"/> can be executed on the <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/>.
            </summary>
            <param name="dialog">The dialog that the command will be executed against.</param>
            <returns>True if the dialog can support this command.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.XamSpellCheckerCommandBase.Execute(System.Object)">
            <summary>
            Executes the command 
            </summary>
            <param name="parameter">The <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object that will be executed against.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.XamSpellCheckerCommandBase.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes the specific command on the specified <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/>
            </summary>
            <param name="dialog"></param>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.AddToDictionaryCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will change the current misspelled word.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.AddToDictionaryCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes change command on the supplied SpellCheckDialog.
            </summary>
            <param name="dialog">A <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object that will be used to apply command.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.AddToDictionaryCommand.CanExecute(System.Object)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.CancelAsyncDictionaryCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object which will cancel the dictionaries downloading.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.CancelAsyncDictionaryCommand.CanExecute(System.Object)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.CancelAsyncDictionaryCommand.Execute(System.Object)">
            <summary>
            Executes the command 
            </summary>
            <param name="parameter">The <see cref="T:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog"/> object that will be executed against.</param>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.IgnoreCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will ignore the current misspelled word.  This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.IgnoreCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes ignore command on the supplied XamSpellChecker.
            </summary>
            <param name="dialog">A <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object that will be used to apply command.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.IgnoreCommand.CanExecuteDialogCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="dialog">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.IgnoreAllCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will ignore the current misspelled word in whole text.  This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.IgnoreAllCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes ignore command on the supplied SpellCheckDialog.
            </summary>
            <param name="dialog">A <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object that will be used to apply command.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.IgnoreAllCommand.CanExecuteDialogCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="dialog">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.ChangeCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will change the current misspelled word.  This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.ChangeCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes change command on the supplied SpellCheckDialog.
            </summary>
            <param name="dialog">A <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object that will be used to apply command.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.ChangeCommand.CanExecuteDialogCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="dialog">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.ChangeAllCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will change the current misspelled word in whole text.  This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.ChangeAllCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes ignore command on the supplied SpellCheckDialog.
            </summary>
            <param name="dialog">A <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object that will be used to apply command.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.ChangeAllCommand.CanExecuteDialogCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="dialog">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.CloseDialogCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will close the spell checker dialog window. This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.CloseDialogCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes the close dialog command.
            </summary>
            <param name="dialog"></param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.CloseDialogCommand.CanExecute(System.Object)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.CancelDialogCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will close the spell checker dialog window. This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.CancelDialogCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes the close dialog command.
            </summary>
            <param name="dialog"></param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.CancelDialogCommand.CanExecute(System.Object)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.NextFieldCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will begin spell checking the next field. This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.NextFieldCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes next editor command on the supplied SpellCheckDialog.
            </summary>
            <param name="dialog">A <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object that will be used to apply command.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.NextFieldCommand.CanExecuteDialogCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="dialog">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.PreviousFieldCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object that will begin spell checking the previous field. This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.PreviousFieldCommand.ExecuteCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Executes previous field command on the supplied SpellCheckDialog.
            </summary>
            <param name="dialog">A <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object that will be used to apply command.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.PreviousFieldCommand.CanExecuteDialogCommand(Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="dialog">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="T:Infragistics.Controls.Interactions.Primitives.SpellCheckCommand">
            <summary>
            A <see cref="T:Infragistics.CommandBase"/> object used to execute spell check commands. This command only works from whithin the spell
            checker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.SpellCheckCommand.CanExecute(System.Object)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.Primitives.SpellCheckCommand.Execute(System.Object)">
            <summary>
            Executes the command 
            </summary>
            <param name="parameter">The <see cref="T:Infragistics.Controls.Interactions.DictionaryLoadProgressDialog"/> object that will be executed against.</param>
        </member>
        <member name="T:Infragistics.Controls.Interactions.XamSpellCheckerCommandSource">
            <summary>
            The command source object for <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/> object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellCheckerCommandSource.CommandType">
            <summary>
            Gets / Sets the XamSpellCheckerCommand which is to be executed by the command.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellCheckerCommandSource.ResolveCommand">
            <summary>
            Generates the <see cref="T:System.Windows.Input.ICommand"/> object that will execute the command.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommandSource">
            <summary>
            The command source object for <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommandSource.CommandType">
            <summary>
            Gets / Sets the XamSpellCheckerCommand which is to be executed by the command.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellCheckerDialogCommandSource.ResolveCommand">
            <summary>
            Generates the <see cref="T:System.Windows.Input.ICommand"/> object that will execute the command.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings">
            <summary>
            Contains the properties for the <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.CurrentWordBrushProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.CurrentWordBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.CurrentWordBrush">
            <summary>
            Gets or sets the brush that is used to highlight the current word in the context.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.SpellCheckDialogStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.SpellCheckDialogStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.SpellCheckDialogStyle">
            <summary>
            Gets or sets the style for the <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/>       
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.ModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.Mode"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.Mode">
            <summary>
            Gets or sets the type of spell checking that will be performed (basically, will a dialog be displayed or not). 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogSettings.DialogStringResources">
            <summary>
            Contains all of the string resources used in the <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow">
            <summary>
            The Dialog displayed by the <see cref="T:Infragistics.Controls.Interactions.XamSpellChecker"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow.#ctor">
            <summary>
            Creates an instance of the XamSpellCheckerDialog control. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow"/> when a new template is applied. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow.SpellChecker">
            <summary>
            Reference to the XamSpellChecker dialog window.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow.ApplyBadWordContext(System.Windows.Controls.TextBlock)">
            <summary>
            Sets a TextBlock with the current bad word highlighted and with context.
            </summary>
            <param name="txt">The textbox that the context should be applied to.</param>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow.GetParameter(Infragistics.Controls.CommandSource)">
            <summary>
            Returns the object that defines the parameters necessary to execute the command.
            </summary>
            <param name="source">The CommandSource object which defines the command to be executed.</param>
            <returns>The object necessary for the command to complete.</returns>
        </member>
        <member name="M:Infragistics.Controls.Interactions.XamSpellCheckerDialogWindow.SupportsCommand(System.Windows.Input.ICommand)">
            <summary>
            Returns if the object will support a given command type.
            </summary>
            <param name="command">The command to be validated.</param>
            <returns>True if the object recognizes the command as actionable against it.</returns>
        </member>
        <member name="T:Infragistics.ICheckerEngine">
            <summary>
            Represents a control engine that can spellcheck a string.
            </summary>
        </member>
        <member name="M:Infragistics.ICheckerEngine.Check(System.String)">
            <summary>Checks the text for errors.</summary>
            <param name="text">The text that is spellchecked.</param>
            <exception cref="T:System.ArgumentNullException">if text parameter is null.</exception>
        </member>
        <member name="M:Infragistics.ICheckerEngine.NextBadWord">
            <summary>Gets the next bad word in the list that was identified by Check.</summary>
            <remarks>Check must be called before this method.</remarks>
            <returns>The next BadWord object from the text.  This must return null (C#) or nothing (VB.NET) when no more bad words exist.</returns>
        </member>
        <member name="M:Infragistics.ICheckerEngine.FindSuggestions">
            <summary>Returns an ArrayList of Strings that are suitable suggestions for the current bad word (that is, the one last returned by NextBadWord()).</summary>
            <remarks>If no suggestions can be found, this should return an empty List.  This method should be thread safe if operating with RapidSpell Desktop.</remarks>
            <exception cref="T:Infragistics.SpellChecker.NoCurrentBadWordException">If NextBadWord() hasn't been run first AND found an erroneous word.</exception>
        </member>
        <member name="M:Infragistics.ICheckerEngine.AddWord(System.String)">
            <summary>Adds a word to the user dictionary, if it exists.</summary>
            <remarks>Should return true if the word was added successfully, false otherwise.</remarks>
        </member>
        <member name="M:Infragistics.ICheckerEngine.RemoveWord(System.String)">
            <summary>
            Removes a word from the user dictionary, if it exists.
            </summary>
            <remarks>Should return true if the word was successfully removed, false otherise.</remarks>
        </member>
        <member name="M:Infragistics.ICheckerEngine.SetPosition(System.Int32)">
            <summary>Sets the pointer position for the <c>NextBadWord</c> iterator.</summary>
            <remarks>
            Further calls to <c>NextBadWord</c> will look for the next bad word from position <c>pos</c>.
            If position &gt; the text length is set to the text length.
            If position &lt; 0, it is set to zero.
            </remarks>
        </member>
        <member name="P:Infragistics.ICheckerEngine.DictionaryUri">
            <summary>
            Gets or sets the dictionary that will be used for spell checking.
            </summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.IncludeUserDictionaryInSuggestions">
            <summary>
             Gets a value indicating whether  the user dictionary should be used in finding suggestions for misspelt words.
            </summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.SuggestionsMethod">
            <summary>Sets the suggestions method, where method is an integer identifier.</summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.AllowCapitalizedWords">
            <summary>Sets whether to ignore capitalized words.</summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.AllowXML">
            <summary>Whether to ignore XML tags in the text.</summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.ConsiderationRange">
            <summary>
            Gets/Sets the factor for how close words need to be to be suggested.
            </summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.SeparateHyphenWords">
            <summary>
            Gets/Sets whether to separate words with hyphens in them into separate words.        
            </summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.LanguageParser">
            <summary>The type of language parsing to use.</summary>
            <remarks>E.g. If the dictionary is set to French, you should use the French parser.</remarks>
            <returns>This implementation always returns ENGLISH.</returns>
        </member>
        <member name="P:Infragistics.ICheckerEngine.CheckHyphenatedText">
            <summary>
            Whether to 'look into' text with hyphens (-), if the word has hyphens in it and CheckHyphenatedText is set true (default), the parts of the text around the hyphens will be checked individually.
            </summary>
            <remarks>E.g. "socio-economic" will be checked as "socio" and "economic".</remarks>
        </member>
        <member name="P:Infragistics.ICheckerEngine.CheckCompoundWords">
            <summary>Whether to check for compound words, setting this to true is essential for languages such as German which 
            allow for compound words.</summary>
            <remarks>If this=false then Lookup("thesewordsarejoined") = false
            <p>If this=true then Lookup("thesewordsarejoined") = true</p>
            <p>If this=false then Lookup("abcdef") = false</p>
            <p>If this=true then Lookup("abcdef") = false</p>
            <p>Setting this to true will degrade lookup performance</p>
            </remarks>
        </member>
        <member name="P:Infragistics.ICheckerEngine.SuggestSplitWords">
            <summary>Whether to look for connected words in suggestions.</summary>
            <remarks>if this=true then suggestions may include joined words.
            <p>Eg; suggestions for "myhouse" will include "my house"</p>
            </remarks>
        </member>
        <member name="P:Infragistics.ICheckerEngine.AllowWordsWithDigits">
            <summary>Whether to ignore words with numbers in them (eg. A10 or 7-11).</summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.AllowMixedCase">
            <summary>
            Whether to allow words spelt with mixed case, e.g. "MIxEd."
            </summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.AllowCaseInsensitiveSuggestions">
            <summary>Whether to allow suggestions for correctly spelled words with mix case.</summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.AllowAnyCase">
            <summary>
            Whether to allow words spelt with any case, e.g. "africa" instead of "Africa."  This is more relaxed than AllowMixedCase.
            </summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.SplitWordThreshold">
            <summary>
            The property coincides with SuggestSplitWords.  The value of the property determines the minimum size of each word in order for it to become a suggestion.  For example, "myhouse" has two words "my" and "house" in order for "my house" to be a suggestion, the SplitWordThreshold must be set to 2 or smaller. A lower threshold results in worse performance.
            </summary>
        </member>
        <member name="P:Infragistics.ICheckerEngine.UserDictionary">
            <summary>
            Sets the stream for the user define dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.SpellCheckerWrapper">
            <summary>
            Provides the ability to spell-check a string.
            </summary>
        </member>
        <member name="M:Infragistics.SpellCheckerWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:Infragistics.SpellChecker"/> class.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.DictionaryUri">
            <summary>
            Gets or sets the Uri that the dictionary is at.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.UserDictionary">
            <summary>
            Sets the stream that the dictionary is at.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.AllowAnyCase">
            <summary>
            Gets or sets a value indicating whether to allow words spelt with any case, e.g. "africa" instead of "Africa."  This is more relaxed than AllowMixedCase.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.AllowCapitalizedWords">
            <summary>
            Gets/Sets a value indicating whether to ignore words that start with capital letters.
            </summary> 
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.AllowCaseInsensitiveSuggestions">
            <summary>
            Gets or sets a value indicating whether to allow suggestions for correctly spelled words with mix case.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.AllowMixedCase">
            <summary>
            Gets or sets a value indicating whether to allow words spelt with mixed case, e.g. "MIxEd."
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.AllowWordsWithDigits">
            <summary>
            Gets or sets a value indicating whether to ignore words with numbers in them (eg. A10 or 7-11).
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.AllowXML">
            <summary>
            Gets/Sets a value indicating whether to ignore XML tags in the text.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.CheckCompoundWords">
            <summary>Gets or sets a value indicating whether to check for compound words, setting this to true is essential for languages such as German which 
            allow for compound words.</summary>
            <remarks>If this=false then Lookup("thesewordsarejoined") = false
            <p>If this=true then Lookup("thesewordsarejoined") = true</p>
            <p>If this=false then Lookup("abcdef") = false</p>
            <p>If this=true then Lookup("abcdef") = false</p>
            <p>Setting this to true will degrade lookup performance</p>
            </remarks>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.CheckHyphenatedText">
            <summary>
            Gets or sets a value indicating whether to 'look into' text with hyphens (-), if the word has hyphens in it and CheckHyphenatedText is set true (default), the parts of the text around the hyphens will be checked individually.
            </summary>
            <remarks>E.g. "socio-economic" will be checked as "socio" and "economic".</remarks>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.ConsiderationRange">
            <summary>
            Gets/Sets the factor for how close words need to be to be suggested.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.IncludeUserDictionaryInSuggestions">
            <summary>
            Gets/Sets a value indicating whether  the user dictionary should be used in finding suggestions for misspelt words.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.LanguageParser">
            <summary>Gets or sets the type of language parsing to use.</summary>
            <remarks>E.g. If the dictionary is set to French, you should use the French parser.</remarks>        
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.SeparateHyphenWords">
            <summary>
            Gets/Sets whether to separate words with hyphens in them into separate words.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.SplitWordThreshold">
            <summary>
            Gets or sets the minimum size of each word in order for it to become a suggestion.  For example, "myhouse" has two words "my" and "house" in order for "my house" to be a suggestion, the SplitWordThreshold must be set to 2 or smaller. A lower threshold results in worse performance.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.SuggestionsMethod">
            <summary>
            Gets/Sets the suggestions should be done using hashing or phonetically.
            </summary>
        </member>
        <member name="P:Infragistics.SpellCheckerWrapper.SuggestSplitWords">
            <summary>Gets or sets a value indicating whether to look for connected words in suggestions.</summary>
            <remarks>if this=true then suggestions may include joined words.
            <p>Eg; suggestions for "myhouse" will include "my house"</p>
            </remarks>
        </member>
        <member name="M:Infragistics.SpellCheckerWrapper.Check(System.String)">
            <summary>Checks the text for errors.</summary>
            <param name="text">The text that is spellchecked.</param>
            <exception cref="T:System.ArgumentNullException">if text parameter is null.</exception>
        </member>
        <member name="M:Infragistics.SpellCheckerWrapper.NextBadWord">
            <summary>Gets the next bad word in the list that was identified by Check.</summary>
            <remarks>Check must be called before this method.</remarks>
            <returns>The next BadWord object from the text.  Only one instance of the BadWord class is used.  
            This must return a empty string "" as the word when no more bad words exist.</returns>        
        </member>
        <member name="M:Infragistics.SpellCheckerWrapper.FindSuggestions">
            <summary>Returns an List of Strings that are suitable suggestions for the current bad word (that is, the one last returned by NextBadWord()).</summary>
            <remarks>If no suggestions can be found, this should return an empty List.</remarks>
            <exception cref="T:Infragistics.SpellChecker.NoCurrentBadWordException">If NextBadWord() hasn't been run first AND found an erroneous word.</exception>
            <returns>A list of the suggested words.</returns>
        </member>
        <member name="M:Infragistics.SpellCheckerWrapper.AddWord(System.String)">
            <summary>Adds a word to the user dictionary, if it exists.</summary>
            <param name="word">The word that is added to the user dictionary.</param>
            <remarks>Should return true if the word was added successfully, false otherwise.</remarks>
            <returns>Returns true if the word was added.</returns>
        </member>
        <member name="M:Infragistics.SpellCheckerWrapper.RemoveWord(System.String)">
            <summary>
            Removes a word from the user dictionary, if it exists.
            </summary>
            <param name="word">The word to remove from the user dictionary.</param>
            <returns>Returns true if the word was successfully removed, false otherwise</returns>
        </member>
        <member name="M:Infragistics.SpellCheckerWrapper.SetPosition(System.Int32)">
            <summary>Sets the pointer position for the <c>NextBadWord</c> iterator.</summary>
            <remarks>
            Further calls to <c>NextBadWord</c> will look for the next bad word from position <c>pos</c>.
            If position &gt; the text length is set to the text length.
            If position &lt; 0, it is set to zero.
            </remarks> 
            <param name="pos">The position that it will start looking for bad words from.</param>
        </member>
    </members>
</doc>
