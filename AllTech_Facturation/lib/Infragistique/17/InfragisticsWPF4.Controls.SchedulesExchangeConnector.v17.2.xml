<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWPF4.Controls.SchedulesExchangeConnector.v17.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Controls.Schedules.ExchangeVersion">
            <summary>
            Represents the various Microsoft Exchange Server versions
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeVersion.AutoDetect">
            <summary>
            Auto-detects the server version on the first connection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeVersion.Exchange2007_SP1">
            <summary>
            Microsoft Exchange 2007, Service Pack 1
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeVersion.Exchange2010">
            <summary>
            Microsoft Exchange 2010
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeVersion.Exchange2010_SP1">
            <summary>
            Microsoft Exchange 2010, Service Pack 1
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector">
            <summary>
            Used for providing schedule data from a Microsoft Exchange Server.
            </summary>
            <seealso cref="P:Infragistics.Controls.Schedules.XamScheduleDataManager.DataConnector"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector"/> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.AreActivitiesSupported(Infragistics.Controls.Schedules.ActivityType)">
            <summary>
            Indicates whether the activities of the specified activity type are supported by this data connector.
            </summary>
            <param name="activityType">Activity type.</param>
            <returns>True if the specified activities are supported. False otherwise.</returns>
            <remarks>
            <para class="body">
            This method is used by the data manager to determine if activities of the specified type are supported by the data connector.
            If they are not supported, relevant user interface will be disabled or hidden in the schedule controls.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityFeatureSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityFeature,Infragistics.Controls.Schedules.ResourceCalendar)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityOperationSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityOperation,Infragistics.Controls.Schedules.ResourceCalendar)"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.BeginEdit(Infragistics.Controls.Schedules.ActivityBase,Infragistics.DataErrorInfo@)">
            <summary>
            Begins modifications to an activity.
            </summary>
            <param name="activity">ActivityBase derived object that is to be modified.</param>
            <param name="errorInfo">If there's an error this will be set to a new DataErrorInfo object with the error information.</param>
            <returns>A value indicating whether the operation succeeded.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> BeginEdit cannot be called more than once without an intervening call to CancelEdit or EndEdit. Successive BeginEdit
            calls should result an error and return false.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CancelEdit(Infragistics.Controls.Schedules.ActivityBase,Infragistics.DataErrorInfo@)">
            <summary>
            Cancels modifications to an existing activity or cancels a new activity that was created by the 
            <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CreateNew(Infragistics.Controls.Schedules.ActivityType,Infragistics.DataErrorInfo@)"/> call however one that hasn't been committed yet.
            </summary>
            <param name="activity">ActivityBase derived object that was put in edit state by <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.BeginEdit(Infragistics.Controls.Schedules.ActivityBase,Infragistics.DataErrorInfo@)"/> call
            or one that was created using <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CreateNew(Infragistics.Controls.Schedules.ActivityType,Infragistics.DataErrorInfo@)"/> method however one that hasn't been committed yet.</param>
            <param name="errorInfo">If there's an error this will be set to a new DataErrorInfo object with the error information.</param>
            <returns>True to indicate that the operation was successful, False otherwise.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> <b>CancelEdit</b> method is called by the <see cref="T:Infragistics.Controls.Schedules.XamScheduleDataManager"/>
            to cancel modifications to an existing activity. It also calls this method to cancel and discard a 
            new activity that was created using the <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CreateNew(Infragistics.Controls.Schedules.ActivityType,Infragistics.DataErrorInfo@)"/> method, however the activity must 
            not have been committed yet. This is typically done when the user cancels the dialog for creating 
            a new activity, like the new appointment dialog.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.EndEdit(Infragistics.Controls.Schedules.ActivityBase,System.Boolean)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CancelEdit(Infragistics.Controls.Schedules.ActivityBase,Infragistics.DataErrorInfo@)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Remove(Infragistics.Controls.Schedules.ActivityBase)"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CancelPendingOperation(Infragistics.OperationResult)">
            <summary>
            Cancels a pending operation.
            </summary>
            <param name="operation">Pending operation that is to be canceled.</param>
            <returns>True to indicate that the operation was successful, False otherwise.</returns>
            <remarks>
            <para class="body">
            <b>CancelPendingOperation</b> method is called to cancel a pending operation. It's only valid for
            operations that are still pending, that is their <see cref="P:Infragistics.OperationResult.IsComplete"/> is false.
            </para>
            <para class="body">
            An example of how this method is used is as follows. <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.GetActivities(Infragistics.Controls.Schedules.ActivityQuery)"/>
            method returns <see cref="T:Infragistics.Controls.Schedules.ActivityQueryResult"/> object. The activities can be retrieved 
            asynchronously. Before the activities are retrieved, there may be a need for canceling the operation.
            For example, the user scrolls the schedule control to a different range of dates in which case
            it's not necessary to retrieve activities for the previously visible date range. In such a case,
            the previous query operation will be canceled if it's still pending.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CreateNew(Infragistics.Controls.Schedules.ActivityType,Infragistics.DataErrorInfo@)">
            <summary>
            Creates a new ActivityBase derived instance based on the activityType parameter.
            </summary>
            <param name="activityType">Indicates the type of activity to create.</param>
            <param name="errorInfo">If there's an error this will be set to a new DataErrorInfo object with the error information.</param>
            <returns>A new ActivityBase derived object created according to the activityType parameter.</returns>
            <remarks>
            <para class="body">
            <b>CreateActivity</b> creates a new <see cref="T:Infragistics.Controls.Schedules.ActivityBase"/> derived object, like Appointment, Journal, or Task. 
            Which activity type to create is specified by the <paramref name="activityType"/> parameter. Note that the created activity 
            doesn't get committed to the data source until <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.EndEdit(Infragistics.Controls.Schedules.ActivityBase,System.Boolean)"/> method is called. Also if you wish to
            not commit the created activity then it is necessary to call <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CancelEdit(Infragistics.Controls.Schedules.ActivityBase,Infragistics.DataErrorInfo@)"/> 
            so the activity object can be properly discarded by the the data connector.
            </para>
            <para class="body">
            <b>Note:</b> <b>CreateNew</b> method is called by the <see cref="T:Infragistics.Controls.Schedules.XamScheduleDataManager"/> to create a 
            new Appointment, Journal, or Task object. This is typically done when the user initiates creation 
            of a new activity in one of the calendar view controls. If the user commits the appointment then 
            <i>EndEdit</i> method is called to commit the activity. If the user cancels the activity creation 
            then <i>CancelEdit</i> method is called to discard the activity object.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CancelEdit(Infragistics.Controls.Schedules.ActivityBase,Infragistics.DataErrorInfo@)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.EndEdit(Infragistics.Controls.Schedules.ActivityBase,System.Boolean)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Remove(Infragistics.Controls.Schedules.ActivityBase)"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.EndEdit(Infragistics.Controls.Schedules.ActivityBase,System.Boolean)">
            <summary>
            Commits a new or modified activity.
            </summary>
            <param name="activity">A new or modified ActivityBase derived instance.</param>
            <returns><see cref="T:Infragistics.Controls.Schedules.ActivityOperationResult"/> instance which may be initialized with the result
            asynchronously.</returns>
            <remarks>
            <para class="body">
            <b>EndEdit</b> method is used to commit a modified activity, or a new activity that 
            was created using the <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CreateNew(Infragistics.Controls.Schedules.ActivityType,Infragistics.DataErrorInfo@)"/> method.
            </para>
            <param name="force">True to force the edit operation to end. Used when user interface
            being used to perform the edit operation cannot remain in edit mode and therefore the
            edit operation must be ended.
            </param>
            <para class="body">
            <b>Note</b> that the operation of committing an activity can be performed either synchronously
            or asynchronously. If the operation is performed synchronously then the information regarding
            the result of the operation will be contained in the returned <i>ActivityOperationResult</i>
            instance. If the operation is performed asynchronously, the method will return an 
            <i>ActivityOperationResult</i> instance whose results will be initialized later when they
            are available via the ActivityOperationResult's <see cref="M:Infragistics.Controls.Schedules.ItemOperationResult`1.InitializeResult(Infragistics.DataErrorInfo,System.Boolean)"/>
            method. The caller, which may be a schedule control, will indicate via the UI that the operation
            is pending and when the results are initialized (via <see cref="M:Infragistics.Controls.Schedules.ItemOperationResult`1.InitializeResult(Infragistics.DataErrorInfo,System.Boolean)"/>), 
            it will show the user with appropriate status of the operation.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CreateNew(Infragistics.Controls.Schedules.ActivityType,Infragistics.DataErrorInfo@)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CancelEdit(Infragistics.Controls.Schedules.ActivityBase,Infragistics.DataErrorInfo@)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Remove(Infragistics.Controls.Schedules.ActivityBase)"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.EndEdit(Infragistics.Controls.Schedules.Resource,System.Boolean)">
            <summary>
            Commits a modified Resource object.
            </summary>
            <param name="resource">A modified Resource object.</param>
            <returns><see cref="T:Infragistics.OperationResult"/> instance which may be initialized with the result
            asynchronously.</returns>
            <remarks>
            <para class="body">
            <b>EndEdit</b> method is used to commit a modified Resource object.
            </para>
            <param name="force">True to force the edit operation to end. Used when user interface
            being used to perform the edit operation cannot remain in edit mode and therefore the
            edit operation must be ended.
            </param>
            <para class="body">
            <b>Note</b> that the operation of committing an activity can be performed either synchronously
            or asynchronously. If the operation is performed synchronously then the information regarding
            the result of the operation will be contained in the returned <i>OperationResult</i>
            instance. If the operation is performed asynchronously, the method will return an 
            <i>OperationResult</i> instance whose results will be initialized later when they
            are available via the OperationResult's <see cref="M:Infragistics.OperationResult.InitializeResult(Infragistics.DataErrorInfo,System.Boolean)"/>
            method. The caller, which may be a schedule control, will indicate via the UI that the operation
            is pending and when the results are initialized (via <see cref="M:Infragistics.OperationResult.InitializeResult(Infragistics.DataErrorInfo,System.Boolean)"/>), 
            it will show the user with appropriate status of the operation.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.GetActivities(Infragistics.Controls.Schedules.ActivityQuery)">
            <summary>
            Gets activities that meet the criteria specified by the <i>query</i> parameter.
            </summary>
            <param name="query">Query criteria - contains information about which activities to get.</param>
            <returns><see cref="T:Infragistics.Controls.Schedules.ActivityQueryResult"/> object that contains the activities that meet the 
            criteria specified by the <i>query</i> parameter.</returns>
            <remarks>
            <para class="body">
            <b>Note:</b> <b>GetActivities</b> method is called by the <see cref="T:Infragistics.Controls.Schedules.XamScheduleDataManager"/> 
            to retrieve appointments, tasks, journals or a combination of the three for one or more 
            resources as needed to display them in calendar view controls that may be associated with
            it. This method may get called multiple times to satisfy
            multiple calendar view controls and also may get called again as dates are navigated in
            those calendar view controls.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.GetDefaultCategoryColors(System.Boolean@)">
            <summary>
            Returns the collection of colors which should be displayed in the drop down when modifying a category.
            </summary>
            <param name="areCustomCategoryColorsAllowed">Indicates whether the user can use any color when creating a custom category.</param>
            <returns>The collection of default colors or null if the normal default colors should be used.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.GetSupportedActivityCategories(Infragistics.Controls.Schedules.ActivityBase)">
            <summary>
            Gets the list of activity categories that are supported for the specified activity. Default implementation returns <i>null</i>.
            </summary>
            <param name="activity">Activity for which to get the list of supported categories.</param>
            <returns>IEnumerable that can optionally implement INotifyCollectionChanged to notify
            of changes to the list.</returns>
            <remarks>
            <para class="body">
            This method is used to retrieve the list of activity categories that are supported by the specified activity.
            It's used by the activity dialogs to display the list of applicable categories from which the user can select
            one or more categories.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.InitializeEditCopy(Infragistics.Controls.Schedules.ActivityBase)">
            <summary>
            Allows the data connector to perform any additional initialization on the edit copy before the edit operation begins.
            </summary>
            <param name="editCopy">The copy of the original activity being edited.</param>
            <remarks>
            <para class="body">
            <b>Note:</b> <b>InitializeEditCopy</b> is called by the <see cref="M:Infragistics.Controls.Schedules.XamScheduleDataManager.BeginEditWithCopy(Infragistics.Controls.Schedules.ActivityBase,System.Boolean,Infragistics.DataErrorInfo@)"/> 
            method after creating the edit copy, but before returning it to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityEditingAllowed(Infragistics.Controls.Schedules.ActivityBase,Infragistics.Controls.Schedules.EditableActivityProperty)">
            <summary>
            Indicates whether the specified property can be edited on the specified activity.
            </summary>
            <param name="activity">Activity instance on which the property might be edited.</param>
            <param name="property">The property to check whether editing is allowed.</param>
            <returns>True if the property can be edited. False otherwise.</returns>
            <remarks>
            <para class="body">
            This method is used by the data manager to determine if the specified property can be edited for an activity of
            If the property cannot be edited, the appropriate part of the UI will be disabled to prevent the user from editing
            that property.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityFeatureSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityFeature,Infragistics.Controls.Schedules.ResourceCalendar)">
            <summary>
            Indicates whether the specified feature is supported for the activities of the specified type.
            </summary>
            <param name="activityType">Activity type for which to check if the specified feature is supported.</param>
            <param name="activityFeature">Feature to check for support.</param>
            <param name="calendar">Resource calendar context.</param>
            <returns>True if the feature is supported. False otherwise.</returns>
            <remarks>
            <para class="body">
            This method is used by the data manager to determine if the specified feature is supported for activities of
            the specified type that belong the specified calendar. If the feature is not supported, relevant user interface 
            will be disabled or hidden in the schedule controls.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ScheduleDataConnectorBase.IsActivityOperationSupported(Infragistics.Controls.Schedules.ActivityBase,Infragistics.Controls.Schedules.ActivityOperation)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.AreActivitiesSupported(Infragistics.Controls.Schedules.ActivityType)"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityOperationSupported(Infragistics.Controls.Schedules.ActivityBase,Infragistics.Controls.Schedules.ActivityOperation)">
            <summary>
            Indicates whether the specified activity operation for the specified activity type is supported.
            </summary>
            <param name="activity">Activity instance on which the operation is going to be performed.</param>
            <param name="activityOperation">Activity operation.</param>
            <returns>True if the operation is supported. False otherwise.</returns>
            <remarks>
            <para class="body">
            This method is used by the data manager to determine if the specified operation is supported for the specified activity.
            This method is called when there's a context of an activity object available, for which the operation is to be performed.
            If there's no context of an activity available, then the overload <see cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityOperationSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityOperation,Infragistics.Controls.Schedules.ResourceCalendar)"/>
            that takes in an <see cref="T:Infragistics.Controls.Schedules.ActivityType"/> value is used by the data manager to determine if an operation
            can be performed. If the operation is not supported, relevant user interface will be disabled or hidden in 
            the schedule controls.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityOperationSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityOperation,Infragistics.Controls.Schedules.ResourceCalendar)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityFeatureSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityFeature,Infragistics.Controls.Schedules.ResourceCalendar)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.AreActivitiesSupported(Infragistics.Controls.Schedules.ActivityType)"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityOperationSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityOperation,Infragistics.Controls.Schedules.ResourceCalendar)">
            <summary>
            Indicates whether the specified activity operation for the specified activity type is supported.
            </summary>
            <param name="activityType">Activity type.</param>
            <param name="activityOperation">Activity operation.</param>
            <param name="calendar">ResourceCalendar for which to check if the operation can be performed.</param>
            <returns>True if the operation is supported. False otherwise.</returns>
            <remarks>
            <para class="body">
            This method is used by the data manager to determine if the specified operation is supported for the activities of the specified type
            for the specified resource calendar. If the operation is not supported, relevant user interface will be disabled or hidden in 
            the schedule controls.
            </para>
            <para class="body">
            When the context of an activity object for which the operation is being performed available, the overload
            <see cref="M:Infragistics.Controls.Schedules.ScheduleDataConnectorBase.IsActivityOperationSupported(Infragistics.Controls.Schedules.ActivityBase,Infragistics.Controls.Schedules.ActivityOperation)"/> that takes in the activity is used.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ScheduleDataConnectorBase.IsActivityOperationSupported(Infragistics.Controls.Schedules.ActivityBase,Infragistics.Controls.Schedules.ActivityOperation)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityFeatureSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityFeature,Infragistics.Controls.Schedules.ResourceCalendar)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.AreActivitiesSupported(Infragistics.Controls.Schedules.ActivityType)"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsResourceFeatureSupported(Infragistics.Controls.Schedules.Resource,Infragistics.Controls.Schedules.ResourceFeature)">
            <summary>
            Indicates whether the specified feature is supported for the specified resource.
            </summary>
            <param name="resource">Resource instance.</param>
            <param name="resourceFeature">Resource feature.</param>
            <returns>True if the feature is supported. False otherwise.</returns>
            <remarks>
            <para class="body">
            This method is used by the data manager to determine if the specified feature is supported for a resource.
            If the feature is not supported, relevant user interface will be disabled or hidden in the schedule controls.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsActivityFeatureSupported(Infragistics.Controls.Schedules.ActivityType,Infragistics.Controls.Schedules.ActivityFeature,Infragistics.Controls.Schedules.ResourceCalendar)"/>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.RecurringTaskGenerationBehavior">
            <summary>
            Gets the value indicating how this connector generates recurring tasks.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Remove(Infragistics.Controls.Schedules.ActivityBase)">
            <summary>
            Removes an activity.
            </summary>
            <param name="activity">ActivityBase derived instance to remove.</param>
            <returns><see cref="T:Infragistics.Controls.Schedules.ActivityOperationResult"/> instance.</returns>
            <remarks>
            <para class="body">
            <b>Note</b> that the operation of removing an activity can be performed either synchronously
            or asynchronously. If the operation is performed synchronously then the information regarding
            the result of the operation will be contained in the returned <i>ActivityOperationResult</i>
            instance. If the operation is performed asynchronously, the method will return an 
            <i>ActivityOperationResult</i> instance whose results will be initialized later when they
            are available via the ActivityOperationResult's InitializeResult
            method. The caller, which may be a schedule control, will indicate via the UI that the operation
            is pending and when the results are initialized (via InitializeResult), 
            it will show the user with appropriate status of the operation.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CreateNew(Infragistics.Controls.Schedules.ActivityType,Infragistics.DataErrorInfo@)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.EndEdit(Infragistics.Controls.Schedules.ActivityBase,System.Boolean)"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.CancelEdit(Infragistics.Controls.Schedules.ActivityBase,Infragistics.DataErrorInfo@)"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.ResolveActivityCategories(Infragistics.Controls.Schedules.ActivityBase)">
            <summary>
            Gets the activity categories that are currently applied to the specified activity. 
            Default implementation returns <i>null</i>.
            </summary>
            <param name="activity">Activity for which to get the list of currently applied activity categories.</param>
            <returns>IEnumerable that can optionally implement INotifyCollectionChanged to notify
            of changes to the list.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.GetSupportedActivityCategories(Infragistics.Controls.Schedules.ActivityBase)"/>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.ResourceItems">
            <summary>
            Gets the resources collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.SubscribeToReminders(Infragistics.Controls.Schedules.ResourceCalendar,Infragistics.Controls.Schedules.ReminderSubscriber,Infragistics.DataErrorInfo@)">
            <summary>
            Subscribes to reminders for the activities of the specified calendar. Note that more than one 
            subscriber can be subscribed to a single calendar as well as multiple calendars can be 
            subscribed to.
            </summary>
            <param name="calendar">This calendars activity reminders will be delivered to the specified subscribed.</param>
            <param name="subscriber">When a reminder is due for an activity, the subscriber's <see cref="M:Infragistics.Controls.Schedules.ReminderSubscriber.DeliverReminder(Infragistics.Controls.Schedules.ReminderInfo)"/> method will be invoked.</param>
            <param name="error">If there's an error, this will be set to error information.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UnsubscribeFromReminders(Infragistics.Controls.Schedules.ResourceCalendar,Infragistics.Controls.Schedules.ReminderSubscriber)">
            <summary>
            Unsubscribes from activity reminders of the specified calendar. If the specified subscriber hadn't been subscribed
            previously then this method will take no action.
            </summary>
            <param name="calendar">The calendar's activity reminders to unsubscribe from.</param>
            <param name="subscriber">Subscriber instance.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.VerifyInitialState(System.Collections.Generic.List{Infragistics.DataErrorInfo})">
            <summary>
            Called to verify that the data connector has sufficient state to operate.
            </summary>
            <param name="errorList">A list to receive the errors.</param>
            <remarks>
            <para class="note"><b>Note</b>: this method gets called once by the <see cref="T:Infragistics.Controls.Schedules.XamScheduleDataManager"/> when it is verifying its initial state.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Connect">
            <summary>
            Forces a connection to the Exchange server. If the data connector is already connected to the server, this method does nothing.
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Disconnect"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Disconnect">
            <summary>
            Disconnects the data connector from the Exchange server.
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Connect"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollForChanges">
            <summary>
            Forces the connector to poll the Exchange server for changes.
            </summary>
            <remarks>
            This can be called at any time, regardless of the <see cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollingInterval"/> value.
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollingInterval"/>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PreInitialize">
            <summary>
            Performs some initialization on a background thread to shorten initial loading time. 
            This only needs to be called once when an application first starts.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsPollingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsPolling"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsPolling">
            <summary>
            Gets the value indicating whether the connector is currently polling for changes on the Exchange server.
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsPollingProperty"/>
            <seealso cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollingInterval"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollForChanges"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollingIntervalProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollingInterval"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollingInterval">
            <summary>
            Returns or sets the interval at which the client will poll the server for changes.
            The default is 30 seconds.
            </summary>
            <remarks>
            <para class="body">
            To disable polling, set the interval to TimeSpan.Zero.
            </para>
            </remarks>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollingIntervalProperty"/>
            <seealso cref="M:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.PollForChanges"/>
            <seealso cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.IsPolling"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.ServerConnectionSettingsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.ServerConnectionSettings"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.ServerConnectionSettings">
            <summary>
            Gets or sets the settings used to connect with the Microsoft Exchange Server.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The value is set after the first connection to the server has been made.
            </exception>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.ServerConnectionSettingsProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UseDefaultCredentialsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UseDefaultCredentials"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UseDefaultCredentials">
            <summary>
            Gets or sets the value indicating whether one of the users should be the user currently logged on to the system.
            </summary>
            <remarks>
            <p class="body">
            UseDefaultCredentials can be used in conjunction with the <see cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Users"/> collection. If it is, the logged in user will
            just be added as another user when connecting to the server.
            </p>
            <p class="body">
            When UseDefaultCredentials is True, the Resource created to represent the user will have a Id of "{domain}\{userName}"
            in lowercase.
            </p>
            </remarks>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UseDefaultCredentialsProperty"/>
            <seealso cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Users"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UsersProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Users"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.Users">
            <summary>
            Gets or sets the collection of users whose calendars should be retrieved from the server.
            </summary>
            <p class="body">
            Each user will have a Resource instance to represent it with an Id of "{Domain}\{UserName}" from the ExchangeUser.
            </p>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UsersProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UseServerWorkingHoursProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UseServerWorkingHours"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UseServerWorkingHours">
            <summary>
            Gets or sets the value indicating whether the custom working hours should be downloaded from the server for each user.
            </summary>
            <remarks>
            <p class="body">
            If this value is True, the working hours on the XamScheduleDataManager.Settings property are ignored.
            </p>
            </remarks>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeScheduleDataConnector.UseServerWorkingHoursProperty"/>
        </member>
        <member name="T:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings">
            <summary>
            Represents the settings to use when connecting to the Microsoft Exchange Server. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings"/> instance.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.AcceptGZipEncodingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.AcceptGZipEncoding"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.AcceptGZipEncoding">
            <summary>
            Gets or sets the value indicating whether the server should return information compressed with GZip.
            </summary>
            <remarks>
            <p class="body">
            The server will only send Gzip compressed data if this value is True and the server is configured to send GZip compressed responses.
            </p>
            </remarks>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.AcceptGZipEncodingProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.CookieContainerProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.CookieContainer"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.CookieContainer">
            <summary>
            Gets or sets the cookies associated with the server.
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.CookieContainerProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.HttpHeadersProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.HttpHeaders"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.HttpHeaders">
            <summary>
            Gets or sets the HTTP headers which should be sent with each request to the server.
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.HttpHeadersProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.PreAuthenticateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.PreAuthenticate"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.PreAuthenticate">
            <summary>
            Gets or sets the value indicating whether HTTP pre-authentication should be used when connecting to the server.
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.PreAuthenticateProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.RequestedServerVersionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.RequestedServerVersion"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.RequestedServerVersion">
            <summary>
            Gets or sets the requested version of the server.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The value is set after the first connection to the server has been made.
            </exception>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.RequestedServerVersionProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.TimeoutProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.Timeout"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.Timeout">
            <summary>
            Gets or sets the timeout used when requesting information from the server, in milliseconds.
            </summary>
            <remarks>
            <p class="body">
            If this is not set, a value of 100000 will be used.
            </p>
            </remarks>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.TimeoutProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.UrlProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.Url"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.Url">
            <summary>
            Gets or sets the URL to the Microsoft Exchange Server. 
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.UrlProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.UserAgentProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.UserAgent"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.UserAgent">
            <summary>
            Gets or sets the value of the user-agent HTTP header.
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.UserAgentProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.WebProxyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.WebProxy"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.WebProxy">
            <summary>
            Gets or sets the web proxy used when connecting to the server.
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.ExchangeServerConnectionSettings.WebProxyProperty"/>
        </member>
        <member name="T:Infragistics.Controls.Schedules.ExchangeUser">
            <summary>
            Represents a user which can login to the Microsoft Exchange Server. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeUser.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.ExchangeUser"/> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeUser.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.ExchangeUser"/> instance.
            </summary>
            <param name="userName">The user name of the user.</param>
            <param name="password">The password of the user.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeUser.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.ExchangeUser"/> instance.
            </summary>
            <param name="userName">The user name of the user.</param>
            <param name="password">The password of the user.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeUser.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.ExchangeUser"/> instance.
            </summary>
            <param name="userName">The user name of the user.</param>
            <param name="password">The password of the user.</param>
            <param name="domain">The domain or computer to which the user belongs.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.ExchangeUser.#ctor(System.String,System.Security.SecureString,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.ExchangeUser"/> instance.
            </summary>
            <param name="userName">The user name of the user.</param>
            <param name="password">The password of the user.</param>
            <param name="domain">The domain or computer to which the user belongs.</param>
        </member>
        <member name="E:Infragistics.Controls.Schedules.ExchangeUser.PropertyChanged">
            <summary>
            Occurs when a property value is changed on the <see cref="T:Infragistics.Controls.Schedules.ExchangeUser"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeUser.Domain">
            <summary>
            Gets or sets the domain or computer to which the user belongs.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeUser.Password">
            <summary>
            Gets or sets the password of the user.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.ExchangeUser.UserName">
            <summary>
            Gets or sets the user name of the user.
            </summary>
        </member>
    </members>
</doc>
