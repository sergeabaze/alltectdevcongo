<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Infragistics4.Services.Schedules.WcfConnectorService.v17.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.InfragisticsFeatureAttribute">
            <summary>
            Indicates an exposed type or member which was added as part of a new feature.
            </summary>
        </member>
        <member name="M:Infragistics.InfragisticsFeatureAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.InfragisticsFeatureAttribute" /> instance.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Exclude">
            <summary>
            Gets or sets the value indicating whether member or type should be excluded from the internal feature documentation.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.FeatureName">
            <summary>
            Gets or sets a short name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.SubFeatureName">
            <summary>
            Gets or sets a more granular sub-feature name description of the feature.
            </summary>
        </member>
        <member name="P:Infragistics.InfragisticsFeatureAttribute.Version">
            <summary>
            Gets or sets the version in which the feature was added.
            </summary>
        </member>
        <member name="E:Infragistics.Collections.Services.AggregateCollection`1.CollectionChanged">
            <summary>
            Raised when the collection's contents change.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.AggregateCollection`1.Collections">
            <summary>
            Gets or sets the list of collections that constitue this aggregate collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.AggregateCollection`1.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.AggregateCollection`1.IsReadOnly">
            <summary>
            Indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.Services.ObservableCollectionExtended`1">
            <summary>
            An extended <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> that supports adding and removing multiple items at once.
            </summary>
            <typeparam name="T">The type of item that the collection will contain. If T implements <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> then the collection will hook the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event of all objects added to the collection.</typeparam>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.Services.ObservableCollectionExtended`1" />
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.Services.ObservableCollectionExtended`1" />
            </summary>
            <param name="list">The list from which elements are inserted</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.Services.ObservableCollectionExtended`1" />
            </summary>
            <param name="hookItemPropertyChanged">Specifies whether to hook into PropertyChanged notifications of items.</param>
            <param name="hookItemListeners">Specifies whether to hook into item listeners.</param>
        </member>
        <member name="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.IsUpdating">
            <summary>
            Returns true if the change notifications have been suspended using the <see cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.BeginUpdate" /> method.
            </summary>
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.EndUpdate" />
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.BeginUpdate" />
        </member>
        <member name="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged">
            <summary>
            Returns a boolean indicating whether the derived collection should have its <see cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdded(`0)" /> and <see cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemRemoved(`0)" /> methods invoked.
            </summary>
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemRemoved(`0)" />
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdded(`0)" />
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdding(`0)" />
        </member>
        <member name="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.PropChangeListeners">
            <summary>
            List of listeners that will be added as a listener to the contained items.
            Also collection change notifications will be raised on the listeners as well.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of a collection to the end of this collection.
            </summary>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.BeginUpdate">
            <summary>
            Prevents change notifications (e.g. <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />) from being raised.
            </summary>
            <remarks>
            <p class="note">The <see cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.EndUpdate" /> method must be called exactly once for each time that the <b>BeginUpdate</b> method is called.</p>
            </remarks>
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.EndUpdate" />
            <seealso cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.IsUpdating" />
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.BinarySearch(`0)">
            <summary>
            Searches the entire list for the specified element and returns the zero based index.
            </summary>
            <param name="item">The item to locate</param>
            <returns>The zero based index if found; otherwise the bitwise complement of the index of the next larger element.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire list for the specified element using the specified comparer and returns the zero based index.
            </summary>
            <param name="item">The item to locate</param>
            <param name="comparer">The object to use when comparing the elements in the collection</param>
            <returns>The zero based index if found; otherwise the bitwise complement of the index of the next larger element.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.EndUpdate">
            <summary>
            Resumes change notifications (e.g. <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />).
            </summary>
            <remarks>
            <p class="note">The <b>EndUpdate</b> method must be called exactly once for each time that the <see cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.BeginUpdate" /> method is called.</p>
            </remarks>
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.BeginUpdate" />
            <seealso cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.IsUpdating" />
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.ReInitialize(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears and repopulates the collection with the specified 
            </summary>
            <param name="collection">The collection of items that should be used to repopulate the collection.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a contiguous block of items from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnBeginUpdate">
            <summary>
            Invoked when BeginUpdate is first called and <see cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.IsUpdating" /> becomes true.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnEndUpdate">
            <summary>
            Invoked when EndUpdate is called and <see cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.IsUpdating" /> becomes false.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdded(`0)">
            <summary>
            Invoked when an item has been added if the <see cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged" /> returns true.
            </summary>
            <param name="itemAdded">The item that was added</param>
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemRemoved(`0)" />
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdding(`0)" />
            <seealso cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged" />
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdding(`0)">
            <summary>
            Invoked when an item is about to be added if the <see cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged" /> returns true.
            </summary>
            <param name="itemAdded">The item that is being added</param>
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemRemoved(`0)" />
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdded(`0)" />
            <seealso cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged" />
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemRemoved(`0)">
            <summary>
            Invoked when an item has been removed if the <see cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged" /> returns true.
            </summary>
            <param name="itemRemoved">The item that was removed</param>
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdded(`0)" />
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdding(`0)" />
            <seealso cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged" />
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemRemoving(`0)">
            <summary>
            Invoked when an item is about to be removed if the <see cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged" /> returns true.
            </summary>
            <param name="item">The item that is being removed.</param>
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemRemoved(`0)" />
            <seealso cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdding(`0)" />
            <seealso cref="P:Infragistics.Collections.Services.ObservableCollectionExtended`1.NotifyItemsChanged" />
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemPropertyChanged(Infragistics.Collections.Services.ItemPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Collections.Services.ObservableCollectionExtended`1.ItemPropertyChanged" /> event with the specified arguments.
            </summary>
            <param name="e">The event arguments for the event to be raised.</param>
        </member>
        <member name="E:Infragistics.Collections.Services.ObservableCollectionExtended`1.ItemPropertyChanged">
            <summary>
            Raised when an object in the collection raises its <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> The <b>ItemPropertyChanged</b> event will only be raised if the 
            type T implements <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.ClearItems">
            <summary>
            Removes all the items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts a new item at the specified index in the collection.
            </summary>
            <param name="index">The index at which to insert the <paramref name="item" /></param>
            <param name="item">The object to insert in the collection</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves an item from one index in the collection to a new location.
            </summary>
            <param name="oldIndex">The index of the item to relocate</param>
            <param name="newIndex">The new index of the item currently located at index <paramref name="oldIndex" /></param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> event.
            </summary>
            <param name="e">The arguments providing information about the collection change.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event.
            </summary>
            <param name="e">The arguments providing information about the property change.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index">The index of the item in the collection to be removed.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces an item at the specified index in the collection 
            </summary>
            <param name="index">Index of the item to replace</param>
            <param name="item">The item to insert into the collection.</param>
        </member>
        <member name="T:Infragistics.Collections.Services.ItemPropertyChangedEventArgs">
            <summary>
            Event arguments for a property changed on another object.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ItemPropertyChangedEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.Services.ItemPropertyChangedEventArgs" />
            </summary>
            <param name="item">The item whose property has changed</param>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="P:Infragistics.Collections.Services.ItemPropertyChangedEventArgs.Item">
            <summary>
            Returns the item whose property has changed.
            </summary>
            <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName" />
        </member>
        <member name="T:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1">
            <summary>
            Represents a read-only collection of items.
            </summary>
            <typeparam name="T">Type of items contained in the collection.</typeparam>
        </member>
        <member name="M:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1" />.
            </summary>
            <param name="source">This is the list that this ReadOnlyNotifyCollection will wrap and provide items from.</param>
        </member>
        <member name="E:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.CollectionChanged">
            <summary>
            Raised when the collection's contents change.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.Item(System.Int32)">
            <summary>
            Returns the item at the specified index.
            </summary>
            <param name="index">Index of the item to get.</param>
            <returns>Item at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.Contains(`0)">
            <summary>
            Indicates whether the specified item is in the collection.
            </summary>
            <param name="item">Item to check if it's contained in the collection.</param>
            <returns>True if the item exists in the collection, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from this collection to the specified array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">The location in the destination array where the items will be copied.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.GetEnumerator">
            <summary>
            Returns the enumerator for enumerating items in the collection.
            </summary>
            <returns>IEnumerator instance.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item in the collection.
            </summary>
            <param name="item">The item whose index will be returned.</param>
            <returns>The index of the item if the item exists in the collection, -1 otherwise.</returns>
        </member>
        <member name="P:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.IsReadOnly">
            <summary>
            Indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.Source">
            <summary>
            Gets the source collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.ReadOnlyNotifyCollection`1.PropChangeListeners">
            <summary>
            Gets collection of property change listeners.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.Services.ISparseArrayItem">
            <summary>
            This interface can be implemented on items to be contained in the sparse 
            array to get a fast IndexOf operation.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ISparseArrayItem.GetOwnerData(Infragistics.Collections.Services.SparseArray)">
            <summary>
            Gets the owner data of the item.
            </summary>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><b>GetOwnerData</b> and <see cref="M:Infragistics.Collections.Services.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Collections.Services.SparseArray)" /> methods are used by the <see cref="T:Infragistics.Collections.Services.SparseArray" /> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Collections.Services.SparseArray)">
            <summary>
            Sets the owner data of the item.
            </summary>
            <param name="ownerData"></param>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><see cref="M:Infragistics.Collections.Services.ISparseArrayItem.GetOwnerData(Infragistics.Collections.Services.SparseArray)" /> and <b>SetOwnerData</b> methods are used by the <see cref="T:Infragistics.Collections.Services.SparseArray" /> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Collections.Services.ISparseArrayMultiItem">
            <summary>
            ISparseArrayMultiItem interface.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.ISparseArrayMultiItem.ScrollCount">
            <summary>
            Gets the scroll count of this item. If the scroll count is 0 then item 
            is considered hidden otherwise it's considered visible. Scroll count must 
            be a non-negative number.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ISparseArrayMultiItem.GetItemAtScrollIndex(System.Int32)">
            <summary>
            Returns a descendant item at the specified index. The returned item 
            doesn't necessarily have to be an immediate child.
            </summary>
            <param name="scrollIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Collections.Services.ICreateItemCallback">
            <summary>
            ICreateItemCallback interface.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ICreateItemCallback.CreateItem(Infragistics.Collections.Services.SparseArray,System.Int32)">
            <summary>
            Returns a new item to be assigned to a location in the array. CreateItem should not 
            set the new item at the location in the array. Array and relativeIndex are provided 
            for information only. Also the implementation should not modify array in any way 
            otherwise results will be undefined.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.Services.SparseArray">
            <summary>
            SparseArray class.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.Services.SparseArray.VisibleItemsEnumerator">
            <summary>
            Enumerates visible items in the sparse array. If createItemCallback is specified,
            new items are created to fill null slots otherwise null slots are ignored even
            though they are considered to be visible.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.Services.SparseArray" /> class with the default factor
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.Services.SparseArray" /> class
            </summary>
            <param name="useOwnerData">If true then either all items should implement ISparseArrayItem interface or the derived class should override <see cref="M:Infragistics.Collections.Services.SparseArray.GetOwnerData(System.Object)" /> and <see cref="M:Infragistics.Collections.Services.SparseArray.SetOwnerData(System.Object,System.Object)" /> methods to maintain owner data for items.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.Services.SparseArray" /> class .
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.Services.SparseArray" /> class.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.#ctor(System.Int32,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.Services.SparseArray" /> class.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
            <param name="useOwnerData">If true then all the items must implement ISparseArrayItem interface.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.#ctor(System.Boolean,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.Services.SparseArray" /> class.
            </summary>
            <param name="manageScrollCounts"></param>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.#ctor(System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor"></param>
            <param name="useOwnerData"></param>
            <param name="manageScrollCounts"></param>
        </member>
        <member name="P:Infragistics.Collections.Services.SparseArray.Count">
            <summary>
            Retruns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.SparseArray.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.SparseArray.IsSynchronized">
            <summary>
            Indicates whether this collection is synchronized. Always returns false.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.SparseArray.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize thread access.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.SparseArray.NonNullItems">
            <summary>
            Returns a new instance of enumerable that can be used to enumerate through only the non-null items in the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Expand(System.Int32)">
            <summary>
            Expands the array to the new count. New count must be greater than or equal to the 
            current count. This has the same logical effect as adding new count - current count 
            number of null items at the end of the array.
            </summary>
            <param name="newCount"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Add(System.Object)">
            <summary>
            Adds the speicifed item at the end of the collection.
            </summary>
            <param name="item"></param>
            <returns>The index at which the item was added.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified location in the array.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.AddRange(System.Collections.ICollection)">
            <summary>
            Adds items in the specified collection to the end of the collection.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts items in the specified collection to the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Move(System.Object,System.Int32)">
            <summary>
            Moves the specified item to a new location.
            </summary>
            <param name="item">Item to move.</param>
            <param name="newIndex">New location of the item.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the itemIndex to newIndex.
            </summary>
            <param name="itemIndex">Item at this index will be moved.</param>
            <param name="newIndex">Item will be moved to this index.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.IndexOf(System.Object)">
            <summary>
            Retruns the index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes count number of items starting at the specified index in the array.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Remove(System.Object)">
            <summary>
            Removes the specified item. If the item doesn't exist in the collection, it does nothing.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Contains(System.Object)">
            <summary>
            Returns true if the specified item is contained in the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Clear">
            <summary>
            Removes all items from the array.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.CopyTo(System.Array,System.Int32,Infragistics.Collections.Services.ICreateItemCallback)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.ToArray">
            <summary>
            Returns a new array containing all the elements of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.ToArray(System.Type)">
            <summary>
            Returns a new array of specified type containing all the elements of this collection.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetItem(System.Int32,Infragistics.Collections.Services.ICreateItemCallback)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index"></param>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Reverse">
            <summary>
            Reverses the order of items in the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of items in the specified range.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the array.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.SortGeneric``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the array using generic array to achieve slightly better performance.
            </summary>
            <typeparam name="T">The array is assumed to contain objects of type T.</typeparam>
            <param name="comparer">Comparer to compare the elements of the array with.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.Compact">
            <summary>
            Removes data structures allocated for empty slots in the sparse array.
            </summary>
            <remarks>
            <para class="body">
            Over time setting non-null slots to null can result in sparse array holding onto
            data structures that are not necessary since all the associated slots are null
            values. Calling this method will cause the sparse array to release those data 
            structures.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetOwnerData(System.Object)">
            <summary>
            Returns the owner data of the item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.SetOwnerData(System.Object,System.Object)">
            <summary>
            Sets the owner data on item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item"></param>
            <param name="ownerData"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetVisibleCount">
            <summary>
            Returns the visible count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetScrollCount">
            <summary>
            Returns the scroll count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetVisibleIndexOf(Infragistics.Collections.Services.ISparseArrayMultiItem)">
            <summary>
            Returns the visible index associted with the specified item. Item must be contained 
            within the array. If the item is hidden, that is it's ScrollCount is 0, the this
            method returns -1.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetVisibleIndexOf(Infragistics.Collections.Services.ISparseArrayMultiItem,System.Boolean)">
            <summary>
            Returns the visible index associted with the specified item. Item must be contained 
            within the array.
            </summary>
            <param name="item"></param>
            <param name="ignoreItemHiddenState">If false then returns -1 if the item is hidden. 
            If true, returns the visible index of item as it would have been if it were visible.
            This parameter doesn't have any effect on the returned value if the item is not hidden.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetVisibleIndexOf(System.Int32,System.Boolean)">
            <summary>
            Gets the visible index of the item at the specified index. If the item hasn't been allocated
            yet then it assumes it's visible.
            </summary>
            <param name="itemIndex">Index of the item in the sparse array.</param>
            <param name="ignoreItemHiddenState">If false and the item is hidden, returns -1. Otherwise returns
            the visible index as if it were visible.</param>
            <returns>Visible index.</returns>
            <remarks>
            <para class="body">
            This method is typically used when the item at a specific index hasn't been allocated yet
            and one needs to calculate its visible index.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetScrollIndexOf(Infragistics.Collections.Services.ISparseArrayMultiItem)">
            <summary>
            Gets the scroll index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetScrollIndexOf(Infragistics.Collections.Services.ISparseArrayMultiItem,System.Boolean)">
            <summary>
            Gets the scroll index of the specified item.
            </summary>
            <param name="item"></param>
            <param name="ignoreItemHiddenState">If false then returns -1 if the item is hidden. 
            If true, returns the visible index of item as it would have been if it were visible.
            This parameter doesn't have any effect on the returned value if the item is not hidden.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetItemAtVisibleIndexOffset(Infragistics.Collections.Services.ISparseArrayMultiItem,System.Int32,Infragistics.Collections.Services.ICreateItemCallback)">
            <summary>
            Returns offset'th visible item from startItem. StartItem can be hidden in which case
            it will start from the next visible item. Offset can be 0. If the resulting visible
            index is out of bounds, returns null.
            </summary>
            <param name="startItem"></param>
            <param name="offset"></param>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetItemAtVisibleIndex(System.Int32,Infragistics.Collections.Services.ICreateItemCallback)">
            <summary>
            Returns the item at the specified visible index. This method returns null if the visible index is out of bounds.
            </summary>
            <param name="visibleIndex">Visible index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified visible index if none exists at that visible index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetItemAtScrollIndex(System.Int32,Infragistics.Collections.Services.ICreateItemCallback)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Scroll index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetItemContainingScrollIndex(System.Int32@,Infragistics.Collections.Services.ICreateItemCallback)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Scroll index at which to get the item. It will be modified to be the offset into the item's descendants.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetItemAtScrollIndexHelper(System.Int32,Infragistics.Collections.Services.ICreateItemCallback,System.Boolean,System.Int32@)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Visible index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <param name="traverseHierarchy">If false then the method return the item in this sparse array that contains the 
            specified scroll index. If true then it may traverse down the sparse array hierarchy to get the item at the
            specified scroll index from a sparse array that's at a lower level.</param>
            <param name="offsetIntoItem">If traverseHierarchy is false then this will be set to the scroll index relative 
            to the returned item.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.NotifyItemScrollCountChanged(Infragistics.Collections.Services.ISparseArrayMultiItem)">
            <summary>
            Whenever a scroll count of an item contained within this collection is changed, 
            the collection must be notified of the change. If not notified of such a change,
            behavior of various scroll and visible index related methods will be undefined.
            </summary>
            <param name="item">Item whose scroll count changed.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.DirtyScrollCountInfo">
            <summary>
            Dirties scroll count info for the whole collection so next time it will be re-calculated.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.OnScrollCountChanged">
            <summary>
            Called by the sparse array whenever visible count or scroll count changes or is dirtied. Default implementation does nothing. This may get called multiple times for the same change as well as may get called even when the count doesn't change but is simply dirtied.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.OnItemCreated(System.Object,System.Int32)">
            <summary>
            Called when the sparese array creates an item by calling CreateItem
            on the ICreateItemCallback instance that gets passed into the method
            that initiates the creatio of the item (like GetItem method for example).
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.OnDeserializationComplete">
            <summary>
            Sets the owner data on all the items contained in the tree. Typically you do not 
            need to call this as the sprase array automatically manages the owner data as you
            add and remove items. This is useful if you deserialize the sparse array and
            need to make sure that the owner data are set properly on the contained items.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetVisibleItems(Infragistics.Collections.Services.ICreateItemCallback)">
            <summary>
            Returns all the visible items. New items will be created to fill null slots via
            createItemCallback parameter if it's non-null.
            </summary>
            <param name="createItemCallback">Used to create items to fill null slots. If null, null items will be skipped.</param>
            <returns>Visible items in this sparse array.</returns>
        </member>
        <member name="P:Infragistics.Collections.Services.SparseArray.InCalculatingScrollCount">
            <summary>
            Indicates whether the sparse array is currently in the process of calculating its scroll count.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetEnumerator">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.SparseArray.GetEnumerator(Infragistics.Collections.Services.ICreateItemCallback)">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection. New elements will be created to fill null slots via
            createItemCallback parameter if it's non-null.
            </summary>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Collections.Services.TypedEnumerable`1">
            <summary>
            Typed enumerable that wraps a non-typed enumerable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Collections.Services.TypedEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor.
            </summary>
            <param name="e">Enumerable</param>
        </member>
        <member name="T:Infragistics.Collections.Services.WeakDictionary`2">
            <summary>
            IDictionary implementation that manages keys and/or values as weak references so they can be
            garbage collected.
            </summary>
            <typeparam name="TKey">Type of keys</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.WeakDictionary`2" />.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.WeakDictionary`2" />.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.WeakDictionary`2" />.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.WeakDictionary`2" />.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Single,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.WeakDictionary`2" />.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="loadFactor">Specifies load factor. Must be greater than 0 and less than or equal to 1.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.CreateKeyWeakReference(`0)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="key">Key object.</param>
            <returns>Weak reference to the key.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.CreateValueWeakReference(`1)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="value">Value object.</param>
            <returns>Weak reference to the value.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.ExpandCollapseHelper(System.Boolean)">
            <summary>
            Expands or contracts the size of storage based on the new count after an operation,
            like add, remove or clear, is performed.
            </summary>
            <param name="expandOnly">Specifies that the storage should only be expanded, and not contracted.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry to the dictionary. If an entry with the specified key already exists, 
            this method throws an exception.
            </summary>
            <param name="key">Key of the entry to add.</param>
            <param name="value">Value to associate with the key.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.Clear">
            <summary>
            Removes all entries from the dictionary.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.Compact(System.Boolean)">
            <summary>
            Removes entries from the dictionary where keys are no longer alive (have been garbage 
            collected). Note that keys can get garbage collected during the process of compacting 
            and therefore it's not guarrenteed that all the entries in the dictionary will be 
            with live keys after this operation is completed.
            </summary>
            <param name="removeEntriesWithNullValues">Whether to also remove entries where
            value is null or has been garbage collected.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if an entry with the specified key exists in the dictionary.
            </summary>
            <param name="key">Key to check for existence.</param>
            <returns>Returns true if an entry with the specified key exists in the dictionary.</returns>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key. Set will add an entry for the key 
            if it doesn't already exist.
            </summary>
            <param name="key">Value associated with this key will be returned.</param>
            <returns>Value associated with the specified key.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key. Does nothing if the specified key doesn't exist.
            </summary>
            <param name="key">Key of the entry to remove.</param>
            <returns>True if an entry was removed. False if entry with the specified key was not found.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key. If the entry doesn't exist, returns false.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakDictionary`2.Count">
            <summary>
            Returns the number of entries in the dictionary. Note that this will not take into account 
            any garbage collected items - they will be included in the count.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakDictionary`2.Keys">
            <summary>
            Returns the keys in the dictionary. Only keys with non-null values are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakDictionary`2.Values">
            <summary>
            Returns the values in the dictionary. Only values with non-null keys are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            Returns the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            Returns the values in the dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.Services.WeakList`1">
            <summary>
            A strongly typed list class that manages items using WeakReferences so the items in this list
            can be garbage collected. Items collected by garbage collector will be replaced
            by null. The <see cref="M:Infragistics.Collections.Services.WeakList`1.Compact" /> method can be used to remove entries
            from the list that have been garbage collected.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.Enumerator.#ctor(Infragistics.Collections.Services.WeakList{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="list">List to enumerate.</param>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakList`1.Enumerator.Current">
            <summary>
            Returns the current item.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.Enumerator.MoveNext">
            <summary>
            Moves to next item.
            </summary>
            <returns>Returns false if the enumerator is exhausted.</returns>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified location.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakList`1.SyncRoot">
            <summary>
            Returns the object with which to syncrhonize.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds specified items to the list.
            </summary>
            <param name="items">Items to add to the list.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.Compact">
            <summary>
            Removes entries from the list that are no longer alive. Note that entries can
            get garbase collected during the process of compacting and therefore it's not
            guarrenteed that all the items will remain alive after this method returns.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.Contains(`0)">
            <summary>
            Returns true if the specified item is contained within this list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from the list to the specified array starting at index location in the specified array.
            </summary>
            <param name="array">The array to which to copy items.</param>
            <param name="index">The location in the array at which to start copying.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating the live items.
            </summary>
            <returns>An enumerator for the <see cref="T:Infragistics.Collections.Services.WeakList`1" /></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item. If the item doesn't exist then returns -1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item at the specified location in the list.
            </summary>
            <param name="index">The location at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the list. If the item doesn't 
            exist in the list then this method does nothing.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at specified index.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a contiguous block of items from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for enumerating this list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Returns true if the list is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Returns true if the list is fixed size.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Returns true if the list is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.WeakList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Returns true if this list is syncrhonized.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.Services.WeakList">
            <summary>
            List class that manages items using WeakReferences so the items in this list
            can be garbage collected. Items collected by garbage collector will be replaced
            by null. The <see cref="M:Infragistics.Collections.Services.WeakList`1.Compact" /> method can be used to remove entries
            from the list that have been garbage collected.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakList.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.Services.WeakList" />
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakSet`1.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.WeakSet`1" />.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakSet`1.Compact">
            <summary>
            Removes entries that are no longer alive (have been garbage 
            collected). Note items can get garbage collected during the process of compacting 
            and therefore it's not guarrenteed that all the entries in the set will be 
            alive after this operation is completed.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.WeakSet`1.ToList">
            <summary>
            Gets a list of all items in the collection. This should be used instead of the List&lt;T&gt; constructor when
            creating a list because using the constructor is subject to race conditions with the garbage collector.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ItemNotificationCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Infragistics.Collections.Services.ViewList`1">
            <summary>
            Represents a list of view items that are created based on a list of data items.
            </summary>
            <typeparam name="T">Type of items contained in the collection.</typeparam>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.#ctor(System.Collections.IEnumerable,Infragistics.Services.IViewItemFactory{`0},System.Boolean,System.Func{Infragistics.Collections.Services.ViewList{`0},System.Collections.IEnumerable})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.ViewList`1" />.
            </summary>
            <param name="source">List of data items.</param>
            <param name="viewItemsFactory">Used for creating and new T instances for each data item in the source and also setting/getting their associated data items.</param>
            <param name="hookIntoItems">Specifies whether to hook into items in the list via their ISupportPropertyChangeNotifications implementations.</param>
            <param name="preverifyCallback">Called before the view list is verified.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor. Creates a new instance of <see cref="T:Infragistics.Collections.Services.ViewList`1" />.
            </summary>
            <param name="source">Source items collection. Any modifications made to the source collection
            will be reflected by this collection.</param>
            <remarks>
            <para class="body">
            <b>Note</b> that the <i>ViewList&lt;T&gt;</i> is a read-only collection. Any modifications made to 
            the source collection are reflected by this collection, assuming the source collection implements 
            INotifyCollectionChanged interface.
            </para>
            </remarks>
        </member>
        <member name="E:Infragistics.Collections.Services.ViewList`1.CollectionChanged">
            <summary>
            Raised when the collection's contents change.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.ViewList`1.Item(System.Int32)">
            <summary>
            Returns the item at the specified index.
            </summary>
            <param name="index">Index of the item to get.</param>
            <returns>Item at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called to raise CollectionChanged notification as well as notify property change listeners added
            via ISupportPropertyChangeNotifications interface.
            </summary>
            <param name="eventArgs">Collection change event args.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.Contains(`0)">
            <summary>
            Indicates whether the specified item is in the collection.
            </summary>
            <param name="item">Item to check if it's contained in the collection.</param>
            <returns>True if the item exists in the collection, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from this collection to the specified array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">The location in the destination array where the items will be copied.</param>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.GetEnumerator">
            <summary>
            Returns the enumerator for enumerating items in the collection.
            </summary>
            <returns>IEnumerator instance.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item in the collection.
            </summary>
            <param name="item">The item whose index will be returned.</param>
            <returns>The index of the item if the item exists in the collection, -1 otherwise.</returns>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.Dirty(System.Boolean)">
            <summary>
            Marks the collection as needing to be resynced with the underlying source collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.Services.ViewList`1.OnPreVerify">
            <summary>
            If preverifyCallback callback was specified then calls that and returns
            the return value of that callback. Otherwise returns the Source data list.
            </summary>
            <returns>The data list to use.</returns>
        </member>
        <member name="P:Infragistics.Collections.Services.ViewList`1.AllocatedItems">
            <summary>
            Returns items in the collection that have been allocated so far.
            </summary>
            <remarks>
            Returns items in the collection that have been allocated so far. This differs from GetEnumerator 
            in that the GetEnumerator allocates items that haven't been allocated yet and returns all the
            items of the collection.
            </remarks>
        </member>
        <member name="P:Infragistics.Collections.Services.ViewList`1.Count">
            <summary>
            Returns the number of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.ViewList`1.IsReadOnly">
            <summary>
            Indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.Services.ViewList`1.SourceItems">
            <summary>
            Gets or sets the source items collection.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.Services.ImmutableCollection`1">
            <summary>
            Represents an immutable collection. Once created, it can not be modified.
            </summary>
            <typeparam name="T">Type of the items in the collection.</typeparam>
            <remarks>
            <para class="body">
            ImmutableCollection's contents cannot be modified. It's different from ReadOnlyCollection in that
            a ReadOnlyCollection's underlying source list can be modified. The source list is the list that you
            pass into the constructor of the collection. ImmutableCollection makes a copy of the source list
            in the constructor 
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.Services.ImmutableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.Services.ImmutableCollection`1" /> class.
            </summary>
            <param name="items">Items to populate the collection with.</param>
        </member>
        <member name="T:Infragistics.Controls.Services.DayOfWeekFlags">
            <summary>
            A flagged enumeration used to identify days of the week.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Services.DayOfWeekFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Services.DayOfWeekFlags.Sunday">
            <summary>
            Sunday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Services.DayOfWeekFlags.Monday">
            <summary>
            Monday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Services.DayOfWeekFlags.Tuesday">
            <summary>
            Tuesday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Services.DayOfWeekFlags.Wednesday">
            <summary>
            Wednesday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Services.DayOfWeekFlags.Thursday">
            <summary>
            Thursday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Services.DayOfWeekFlags.Friday">
            <summary>
            Friday
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Services.DayOfWeekFlags.Saturday">
            <summary>
            Saturday
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Services.CalendarHelper" />
            </summary>
            <param name="culture">The culture whose Calendar and DateTimeFormat are used to initialize the object</param>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.#ctor(System.Globalization.Calendar,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Services.CalendarHelper" />
            </summary>
            <param name="calendar">The Calendar used to perform date manipulations/calculations</param>
            <param name="formatInfo">The format info used to provide week rule and other information</param>
        </member>
        <member name="P:Infragistics.Controls.Services.CalendarHelper.Calendar">
            <summary>
            Returns the associated Calendar
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Services.CalendarHelper.DateTimeFormat">
            <summary>
            Returns the associated DateTimeFormatInfo
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.VerifyCanChange">
            <summary>
            Used to ensure that the instance is allowed to be modified
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.Initialize(System.Globalization.Calendar,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Provides the Calendar and DateTimeFormatInfo instances used by the object for its calculations.
            </summary>
            <param name="calendar">The calendar used to perform the date manipulations/calculations</param>
            <param name="formatInfo">The object used to provide formatting information such as the first DayOfWeek</param>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.CoerceMinMaxDate(System.DateTime)">
            <summary>
            Ensures that the date is within the date range supported by the associated <see cref="P:Infragistics.Controls.Services.CalendarHelper.Calendar" />
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The specified date if it is within the allowed range; otherwise the min or max support DateTime of the associated Calendar if the specified date is beyond that supported by the calendar.</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetVisibleDayCount(Infragistics.Controls.Services.DayOfWeekFlags,System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Calculates the number of visible days of the week between the specified day of the week and the 
            </summary>
            <param name="hiddenDays">The hidden days</param>
            <param name="firstDayOfWeek">Day considered the start of the week</param>
            <param name="dayOfWeek">Day of the week to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.IsSet(Infragistics.Controls.Services.DayOfWeekFlags,System.DayOfWeek)">
            <summary>
            Indicates if the specified day of the week is set in the specified day of week flags.
            </summary>
            <param name="days">The flags to evaluate</param>
            <param name="day">The day of week to evaluate</param>
            <returns>True if the day is included in the specified flags, otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.AddDays(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of days to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="days">The number of days by which to adjust the <paramref name="date" /></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.AddHours(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of hours to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="hours">The number of hours by which to adjust the <paramref name="date" /></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.AddMinutes(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of minutes to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="minutes">The number of minutes by which to adjust the <paramref name="date" /></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.AddMonths(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of months to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="months">The number of months by which to adjust the <paramref name="date" /></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.AddSeconds(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of seconds to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="seconds">The number of seconds by which to adjust the <paramref name="date" /></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of weeks to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="weeks">The number of weeks by which to adjust the <paramref name="date" /></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.AddYears(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of years to the specified date
            </summary>
            <param name="date">The source date to which the offset will be added</param>
            <param name="years">The number of years by which to adjust the <paramref name="date" /></param>
            <returns>The adjusted date or the max/min supported date of the calendar if the result was outside the allowed range</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetFirstDayOfWeekForDate(System.DateTime,System.Nullable{System.DayOfWeek},System.Int32@)">
            <summary>
            Returns the date that represents the start of the week that contains the specified date.
            </summary>
            <param name="date">The date whose week is to be evaluated</param>
            <param name="firstDayOfWeek">Optional value that indicates the first day of week to use for the calculation</param>
            <param name="additionalOffset">Out param that is initialized with the number of days before the returned date that would be the first day of the week.</param>
            <returns>The date that represents the first day of the week.</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetDaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days in the month for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The number of days in the month for the specified date</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetDaysInYear(System.DateTime)">
            <summary>
            Returns the number of the days in the year for the year containing the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The number of days in the year for the year containing the specified date</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetDayOfMonth(System.DateTime)">
            <summary>
            Returns the day of the month for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The day of the month</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetDayOfWeek(System.DateTime)">
            <summary>
            Returns the day of the week for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The day of the week</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetDayOfWeekNumber(System.DateTime,Infragistics.Controls.Services.DayOfWeekFlags,System.Nullable{System.DayOfWeek})">
            <summary>
            Returns the number of the day of the week based on the first day of week.
            </summary>
            <param name="date">The date whose offset is to be calculated</param>
            <param name="hiddenDays">The days of the week that should be considered hidden</param>
            <param name="firstDayOfWeek">Optional value that indicates the first day of week to use for the calculation</param>
            <returns>A number between 0 and 6 that represents how many days into the week, the specified day represents based on the current first day of week.</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetDayOfYear(System.DateTime)">
            <summary>
            Returns the day of the year for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The day of the year</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetMonthNumber(System.DateTime)">
            <summary>
            Returns the month number for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The month number</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetWeekNumberForDate(System.DateTime,System.Nullable{System.Globalization.CalendarWeekRule},System.Nullable{System.DayOfWeek},System.Int32@)">
            <summary>
            Returns the week number for a particular date using the specified CalendarWeekRule and FirstDayOfWeek.
            </summary>
            <param name="date">DateTime</param>
            <param name="weekRule">Optional week rule to use for the calculation</param>
            <param name="firstDayOfWeek">Optional first day of week to use for the calculation</param>
            <param name="yearContainingWeek">Out integer to receive the year for which the week number belongs.</param>
            <returns>Integer denoting the week number that the date belongs to.</returns>
            <remarks>
            <p class="body">The System.Globalization.Calendar's GetWeekOfYear method simply returns the number of weeks into the year that the date falls on. It does not seem to use the weekrule specified in the arguments. e.g. If the first day of week is sunday and the weekrule is Jan 1, then 12/31/2000 (Sunday) should return 1. Instead it returns 54 and 1/1/2001 (Monday) returns 1.</p>
            <p class="body">This routine returns the correct week number for the specified date based on the CalendarWeekRule and FirstDayOfWeek.</p>
            <p class="note"> Note, this may be a week for a year other than the year of the date. e.g. 12/31/2000, week tt of Jan 1, and week start of sunday will return 1 because this date falls into the first week of the year 2001.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetWeekNumberForDate(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek,System.Globalization.Calendar,System.Int32@)">
            <summary>
            Returns the week number for a particular date using the specified CalendarWeekRule and FirstDayOfWeek.
            </summary>
            <param name="date">DateTime</param>
            <param name="weekRule">WeekRule to use for the calculation</param>
            <param name="firstDayOfWeek">First day of week to use for the calculation</param>
            <param name="calendar">Calendar to use for the calculations</param>
            <param name="yearContainingWeek">Out integer to receive the year for which the week number belongs.</param>
            <returns>Integer denoting the week number that the date belongs to.</returns>
            <remarks>
            <p class="body">The System.Globalization.Calendar's GetWeekOfYear method simply returns the number of weeks into the year that the date falls on. It does not seem to use the weekrule specified in the arguments. e.g. If the first day of week is sunday and the weekrule is Jan 1, then 12/31/2000 (Sunday) should return 1. Instead it returns 54 and 1/1/2001 (Monday) returns 1.</p>
            <p class="body">This routine returns the correct week number for the specified date based on the CalendarWeekRule and FirstDayOfWeek.</p>
            <p class="note"> Note, this may be a week for a year other than the year of the date. e.g. 12/31/2000, week tt of Jan 1, and week start of sunday will return 1 because this date falls into the first week of the year 2001.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.GetYear(System.DateTime)">
            <summary>
            Returns the year for the specified date
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>The year number</returns>
        </member>
        <member name="M:Infragistics.Controls.Services.CalendarHelper.TryAddOffset(System.DateTime,System.Int32,Infragistics.Controls.Services.CalendarHelper.DateTimeOffsetType,System.DateTime@)">
            <summary>
            Adds the specified offset to the specified date
            </summary>
            <param name="date">The date to adjust</param>
            <param name="offset">The amount of time by which to offset the <paramref name="date" /></param>
            <param name="offsetType">The unit type that the <paramref name="offset" /> represents</param>
            <param name="adjustedDate">Out parameter set to the adjusted date or the min/max supported date time if the adjusted date goes outside the range supported by the associated calendar</param>
            <returns>True if the date was able to be adjusted by the specified amount; otherwise false if the resulting value went outside the range supported by the calendar</returns>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DataListChangeInfo.FirstAndOnlyNewItem">
            <summary>
            If the NewItems has only single item, then returns it. If it has no items or has more
            than 1 items, it returns null.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DataListEventListener.#ctor(System.Object,System.Action{System.Object,Infragistics.Controls.Schedules.Services.DataListEventListener,Infragistics.Controls.Schedules.Services.DataListChangeInfo},System.Action{System.Object,System.Object,System.String},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owner object which is passed in as the first argument when the handler is invoked.
            The handler is typically a reference to a static method and therefore it needs to know which owner
            to delegate the processing to.</param>
            <param name="listChangedHandler">Called when list changes.</param>
            <param name="itemPropChangedHandler">Called when a list item changes.</param>
            <param name="hookIntoItemsNotifyPropChanged">Hook into prop changed.</param>
            <param name="autoHookItemsNotifyPropChanged">If thru will callHookIntoDataItem automatically</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DataListEventListener.SupportsItemPropChangeNotifications">
            <summary>
            Indicates if the data items' property change notifications are going to be raised.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.AsyncActivityOperationCompletedHandler`2">
            <summary>
            When an async operation is being performed that requires raising of an event when the operation is 
            complete, for example the add appointment operation, this class is used to raise the event when the 
            operation completes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityCategoryProperty">
            <summary>
            Lists <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> properties that can be mapped to underlying data source.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityCategoryProperty.CategoryName">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityCategory.CategoryName" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityCategoryProperty.Color">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityCategory.Color" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityCategoryProperty.Description">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityCategory.Description" /> property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityProperty">
            <summary>
            Lists some properties that are common across all activity types.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.None">
            <summary>
            Designates a default value that doesn't map to any property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.Id">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Id" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.OwningResourceId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningResourceId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.OwningCalendarId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningCalendarId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.Start">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.End">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.IsTimeZoneNeutral">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsTimeZoneNeutral" /> property.
            </summary>		
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.StartTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.StartTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.EndTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.EndTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.Subject">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Subject" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.Description">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Description" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.IsVisible">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVisible" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.Recurrence">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence" /> property. Underlying data object property can be a string type.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.RecurrenceVersion">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RecurrenceVersion" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.MaxOccurrenceDateTime">
            <summary>
            Identifies the property that contains the maximum date when the last of the occurrences
            can occur. This is used as an optimization when querying for recurring activities to
            limit the number of recurrences that have to be included in the result.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.RootActivityId">
            <summary>
            Applies to variance of a recurrence.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.OriginalOccurrenceStart">
            <summary>
            Applies to variance of a recurrence.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.OriginalOccurrenceEnd">
            <summary>
            Applies to variance of a recurrence.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.IsOccurrenceDeleted">
            <summary>
            Applies to variance of a recurrence.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.VariantProperties">
            <summary>
            Applies to variance of a recurrence. Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.VariantProperties" /> property.
            Underlying data object property can be a long type.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.ReminderInterval">
            <summary>
            Applies to appointments and tasks. Doesn't apply to journals.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.ReminderEnabled">
            <summary>
            Applies to appointments and tasks. Doesn't apply to journals.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.Reminder">
            <summary>
            Applies to appointments and tasks. Doesn't apply to journals.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.LastModifiedTime">
            <summary>
            The time when the activity was last modified.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.UnmappedProperties">
            <summary>
            Used to store data for any unmapped properties. The data will be stored as XML.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityProperty.Categories">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Categories" /> property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.AppointmentProperty">
            <summary>
            Lists <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> properties that can be mapped to underlying data source.
            </summary>
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.Id">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Id" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.OwningResourceId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningResourceId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.OwningCalendarId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningCalendarId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.Start">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.End">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.StartTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.StartTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.EndTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.EndTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.IsTimeZoneNeutral">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsTimeZoneNeutral" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.Subject">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Subject" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.Description">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Description" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.Location">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Appointment.Location" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.ReminderInterval">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderInterval" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.ReminderEnabled">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderEnabled" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.Reminder">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Reminder" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.IsVisible">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVisible" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.IsLocked">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsLocked" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.Recurrence">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.RecurrenceVersion">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RecurrenceVersion" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.RootActivityId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivityId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.OriginalOccurrenceStart">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceStart" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.OriginalOccurrenceEnd">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceEnd" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.IsOccurrenceDeleted">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsOccurrenceDeleted" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.VariantProperties">
            <summary>
            Applies to variance of a recurrence. Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.VariantProperties" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.MaxOccurrenceDateTime">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.MaxOccurrenceDateTime" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.LastModifiedTime">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.LastModifiedTime" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.UnmappedProperties">
            <summary>
            Used to store data for any unmapped properties. The data will be stored as XML.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AppointmentProperty.Categories">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Categories" /> property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.JournalProperty">
            <summary>
            Lists <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> properties that can be mapped to underlying data source.
            </summary>
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.Id">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Id" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.OwningResourceId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningResourceId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.OwningCalendarId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningCalendarId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.Start">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.End">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.StartTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.StartTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.EndTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.EndTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.IsTimeZoneNeutral">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsTimeZoneNeutral" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.Subject">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Subject" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.Description">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Description" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.ReminderInterval">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderInterval" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.ReminderEnabled">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderEnabled" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.Reminder">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Reminder" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.IsVisible">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVisible" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.IsLocked">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsLocked" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.RootActivityId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivityId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.OriginalOccurrenceStart">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceStart" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.OriginalOccurrenceEnd">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceEnd" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.IsOccurrenceDeleted">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsOccurrenceDeleted" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.VariantProperties">
            <summary>
            Applies to variance of a recurrence. Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.VariantProperties" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.Recurrence">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.RecurrenceVersion">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RecurrenceVersion" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.MaxOccurrenceDateTime">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.MaxOccurrenceDateTime" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.LastModifiedTime">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.LastModifiedTime" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.UnmappedProperties">
            <summary>
            Used to store data for any unmapped properties. The data will be stored as XML.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.JournalProperty.Categories">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Categories" /> property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceProperty">
            <summary>
            Lists <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> properties that can be mapped to underlying data source.
            </summary>
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.Id">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.Id" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.IsVisible">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.IsVisible" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.IsLocked">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.IsLocked" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.Name">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.Name" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.EmailAddress">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.EmailAddress" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.Description">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.Description" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.PrimaryCalendarId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.PrimaryCalendarId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.PrimaryTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.PrimaryTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.FirstDayOfWeek">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.FirstDayOfWeek" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.DaysOfWeek">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.DaysOfWeek" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.DaySettingsOverrides">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.DaySettingsOverrides" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.UnmappedProperties">
            <summary>
            Used to store data for any unmapped properties. The data will be stored as XML.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceProperty.CustomActivityCategories">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.CustomActivityCategories" /> property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty">
            <summary>
            Lists <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> properties that can be mapped to underlying data source.
            </summary>
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty.Id">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Resource.Id" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty.OwningResourceId">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.OwningResourceId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty.Name">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.Name" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty.Description">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.Description" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty.IsVisible">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.IsVisible" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty.BaseColor">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.BaseColor" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty.UnmappedProperties">
            <summary>
            Used to store data for any unmapped properties. The data will be stored as XML.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TaskProperty">
            <summary>
            Lists <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> properties that can be mapped to underlying data source.
            </summary>
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.Id">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Id" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.OwningResourceId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningResourceId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.OwningCalendarId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningCalendarId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.Start">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.End">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.StartTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.StartTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.EndTimeZoneId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.EndTimeZoneId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.IsTimeZoneNeutral">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsTimeZoneNeutral" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.Subject">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Subject" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.Description">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Description" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.ReminderInterval">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderInterval" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.ReminderEnabled">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderEnabled" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.Reminder">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Reminder" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.PercentageComplete">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.Task.PercentComplete" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.IsVisible">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVisible" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.IsLocked">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsLocked" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.RootActivityId">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivityId" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.OriginalOccurrenceStart">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceStart" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.OriginalOccurrenceEnd">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceEnd" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.IsOccurrenceDeleted">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsOccurrenceDeleted" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.VariantProperties">
            <summary>
            Applies to variance of a recurrence. Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.VariantProperties" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.Recurrence">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.RecurrenceVersion">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RecurrenceVersion" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.MaxOccurrenceDateTime">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.MaxOccurrenceDateTime" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.LastModifiedTime">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.LastModifiedTime" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.UnmappedProperties">
            <summary>
            Used to store data for any unmapped properties. The data will be stored as XML.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TaskProperty.Categories">
            <summary>
            Identifies <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Categories" /> property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMapping">
            <summary>
            Used for mapping a field in the data source to a property of the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ActivityCategoryPropertyMapping</b> object contains information regarding a specific field in the
            data source specified by the <see cref="!:ListScheduleDataConnector.ActivityCategoryItemsSource" />
            and which property of the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> object it maps to. The property of the
            <i>ActivityCategory</i> object is identified by the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMapping.ActivityCategoryProperty" />
            property and the field in the data source is identified by the <see cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
            property.
            </para>
            </remarks>
            
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMapping.ActivityCategoryProperty" />
            <seealso cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMapping.ActivityCategoryProperty">
            <summary>
            Identifies a property of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> object.
            </summary>
            <remarks>
            <b>ActivityCategoryProperty</b> identifies a property of the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> object.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping">
            <summary>
            Used for mapping a field in the data source to a property of the <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>AppointmentPropertyMapping</b> object contains information regarding a specific field in the
            data source specified by the <see cref="!:ListScheduleDataConnector.AppointmentItemsSource" />
            and which property of the <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object it maps to. The property of the
            <i>Appointment</i> object is identified by the <see cref="P:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping.AppointmentProperty" />
            property and the field in the data source is identified by the <see cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
            property.
            </para>
            </remarks>
            
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping.AppointmentProperty" />
            <see cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping.AppointmentProperty">
            <summary>
            Identifies a property of <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object.
            </summary>
            <remarks>
            <b>AppointmentProperty</b> identifies a property of the <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.JournalPropertyMapping">
            <summary>
            Used for mapping a field in the data source to a property of the <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>JournalPropertyMapping</b> object contains information regarding a specific field in the
            data source specified by the <see cref="!:ListScheduleDataConnector.JournalItemsSource" />
            and which property of the <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> object it maps to. The property of the
            <i>Journal</i> object is identified by the <see cref="P:Infragistics.Controls.Schedules.Services.JournalPropertyMapping.JournalProperty" />
            property and the field in the data source is identified by the <see cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
            property.
            </para>
            </remarks>
            
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.JournalPropertyMapping.JournalProperty" />
            <seealso cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.JournalPropertyMapping.JournalProperty">
            <summary>
            Identifies a property of <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> object.
            </summary>
            <remarks>
            <b>JournalProperty</b> identifies a property of the <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> object.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourcePropertyMapping">
            <summary>
            Used for mapping a field in the data source to a property of the <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ResourcePropertyMapping</b> object contains information regarding a specific field in the
            data source specified by the <see cref="!:ListScheduleDataConnector.ResourceItemsSource" />
            and which property of the <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> object it maps to. The property of the
            <i>Resource</i> object is identified by the <see cref="P:Infragistics.Controls.Schedules.Services.ResourcePropertyMapping.ResourceProperty" />
            property and the field in the data source is identified by the <see cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
            property.
            </para>
            </remarks>
            
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ResourcePropertyMapping.ResourceProperty" />
            <seealso cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourcePropertyMapping.ResourceProperty">
            <summary>
            Identifies a property of <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> object.
            </summary>
            <remarks>
            <b>ResourceProperty</b> identifies a property of the <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> object.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMapping">
            <summary>
            Used for mapping a field in the data source to a property of the <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ResourceCalendarPropertyMapping</b> object contains information regarding a specific field in the
            data source specified by the <see cref="!:ListScheduleDataConnector.ResourceCalendarItemsSource" />
            and which property of the <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> object it maps to. The property of the
            <i>ResourceCalendar</i> object is identified by the <see cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMapping.ResourceCalendarProperty" />
            property and the field in the data source is identified by the <see cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
            property.
            </para>
            </remarks>
            
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMapping.ResourceCalendarProperty" />
            <seealso cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMapping.ResourceCalendarProperty">
            <summary>
            Identifies a property of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> object.
            </summary>
            <remarks>
            <b>ResourceCalendarProperty</b> identifies a property of the <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> object.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TaskPropertyMapping">
            <summary>
            Used for mapping a field in the data source to a property of the <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>TaskPropertyMapping</b> object contains information regarding a specific field in the
            data source specified by the <see cref="!:ListScheduleDataConnector.TaskItemsSource" />
            and which property of the <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> object it maps to. The property of the
            <i>Task</i> object is identified by the <see cref="P:Infragistics.Controls.Schedules.Services.TaskPropertyMapping.TaskProperty" />
            property and the field in the data source is identified by the <see cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
            property.
            </para>
            </remarks>
            
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.TaskPropertyMapping.TaskProperty" />
            <seealso cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TaskPropertyMapping.TaskProperty">
            <summary>
            Identifies a property of <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> object.
            </summary>
            <remarks>
            <b>TaskProperty</b> identifies a property of the <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> object.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMappingCollection">
            <summary>
            Collection used for specifying field mappings for <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ActivityCategoryPropertyMappingCollection</b> class is used by the <see cref="!:ListScheduleDataConnector" />'s
            <see cref="!:ListScheduleDataConnector.ActivityCategoryPropertyMappings" /> property. It's a collection
            of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMapping" /> objects where each <i>ActivityCategoryPropertyMapping</i> object provides a 
            mapping for a property of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> class to the field in the activity categorys data source.
            </para>
            </remarks>
            
            
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMapping" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMappingCollection.Add(Infragistics.Controls.Schedules.Services.ActivityCategoryProperty,System.String)">
            <summary>
            Adds mapping for the specified activityCategory property.
            </summary>
            <param name="activityCategoryProperty">Identifies the property of the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> class.</param>
            <param name="dataObjectProperty">The name of the property in the underlying data source object.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection">
            <summary>
            Collection used for specifying field mappings for <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>AppointmentPropertyMappingCollection</b> class is used by the <see cref="!:ListScheduleDataConnector" />'s
            <see cref="!:ListScheduleDataConnector.AppointmentPropertyMappings" /> property. It's a collection
            of <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping" /> objects where each <i>AppointmentPropertyMapping</i> object provides a 
            mapping for a property of <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> class to the field in the appointments data source.
            </para>
            </remarks>
            
            
            
            <seealso cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection.Add(Infragistics.Controls.Schedules.Services.AppointmentProperty,System.String)">
            <summary>
            Adds mapping for the specified appointment property.
            </summary>
            <param name="appointmentProperty">Identifies the property of the <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> class.</param>
            <param name="dataObjectProperty">The name of the property in the underlying data source object.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.JournalPropertyMappingCollection">
            <summary>
            Collection used for specifying field mappings for <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>JournalPropertyMappingCollection</b> class is used by the <see cref="!:ListScheduleDataConnector" />'s
            <see cref="!:ListScheduleDataConnector.JournalPropertyMappings" /> property. It's a collection
            of <see cref="T:Infragistics.Controls.Schedules.Services.JournalPropertyMapping" /> objects where each <i>JournalPropertyMapping</i> object provides a 
            mapping for a property of <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> class to the field in the journals data source.
            </para>
            </remarks>
            
            
            <seealso cref="T:Infragistics.Controls.Schedules.Services.JournalPropertyMapping" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.JournalPropertyMappingCollection.Add(Infragistics.Controls.Schedules.Services.JournalProperty,System.String)">
            <summary>
            Adds mapping for the specified journal property.
            </summary>
            <param name="journalProperty">Identifies the property of the <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> class.</param>
            <param name="dataObjectProperty">The name of the property in the underlying data source object.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourcePropertyMappingCollection">
            <summary>
            Collection used for specifying field mappings for <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ResourcePropertyMappingCollection</b> class is used by the <see cref="!:ListScheduleDataConnector" />'s
            <see cref="!:ListScheduleDataConnector.ResourcePropertyMappings" /> property. It's a collection
            of <see cref="T:Infragistics.Controls.Schedules.Services.ResourcePropertyMapping" /> objects where each <i>ResourcePropertyMapping</i> object provides a 
            mapping for a property of <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> class to the field in the resources data source.
            </para>
            </remarks>
            
            
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourcePropertyMapping" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourcePropertyMappingCollection.Add(Infragistics.Controls.Schedules.Services.ResourceProperty,System.String)">
            <summary>
            Adds mapping for the specified resource property.
            </summary>
            <param name="resourceProperty">Identifies the property of the <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> class.</param>
            <param name="dataObjectProperty">The name of the property in the underlying data source object.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMappingCollection">
            <summary>
            Collection used for specifying field mappings for <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ResourceCalendarPropertyMappingCollection</b> class is used by the <see cref="!:ListScheduleDataConnector" />'s
            <see cref="!:ListScheduleDataConnector.ResourceCalendarPropertyMappings" /> property. It's a collection
            of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMapping" /> objects where each <i>ResourceCalendarPropertyMapping</i> object provides a 
            mapping for a property of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> class to the field in the resource calendars data source.
            </para>
            </remarks>
            
            
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMapping" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMappingCollection.Add(Infragistics.Controls.Schedules.Services.ResourceCalendarProperty,System.String)">
            <summary>
            Adds mapping for the specified resource calendar property.
            </summary>
            <param name="resourceCalendarProperty">Identifies the property of the <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> class.</param>
            <param name="dataObjectProperty">The name of the property in the underlying data source object.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TaskPropertyMappingCollection">
            <summary>
            Collection used for specifying field mappings for <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>TaskPropertyMappingCollection</b> class is used by the <see cref="!:ListScheduleDataConnector" />'s
            <see cref="!:ListScheduleDataConnector.TaskPropertyMappings" /> property. It's a collection
            of <see cref="T:Infragistics.Controls.Schedules.Services.TaskPropertyMapping" /> objects where each <i>TaskPropertyMapping</i> object provides a 
            mapping for a property of <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> class to the field in the tasks data source.
            </para>
            </remarks>
            
            
            <seealso cref="T:Infragistics.Controls.Schedules.Services.TaskPropertyMapping" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TaskPropertyMappingCollection.Add(Infragistics.Controls.Schedules.Services.TaskProperty,System.String)">
            <summary>
            Adds mapping for the specified task property.
            </summary>
            <param name="taskProperty">Identifies the property of the <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> class.</param>
            <param name="dataObjectProperty">The name of the property in the underlying data source object.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.IEditList`1.IsEditTransactionSupported(`0)">
            <summary>
            Returns true if BeginEdit, CancelEdit and EndEdit are supported.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.LinqQueryManager.LinqInstructionBase">
            <summary>
            Base class for linq instructions like OrderBy.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.LinqInstructionBase.#ctor(Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqStatement)">
            <summary>
            Constructor.
            </summary>
            <param name="innerStatement">Inner statement.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.LinqInstructionOrderBy.#ctor(System.String,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqStatement,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="fieldName">Name of the field that's to be ordered by.</param>
            <param name="innerStatement">Inner statement.</param>
            <param name="descending">Whether to order descending or ascending.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.LinqInstructionFirstOrLast.#ctor(System.Boolean,System.Boolean,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqStatement)">
            <summary>
            Constructor.
            </summary>
            <param name="first">Whether to get the first element or the last element.</param>
            <param name="orDefault">If true then null is returned if there are no elements. If false, an exception is raised
            if there are no elements.</param>
            <param name="condition">Filter condition.</param>
            <param name="innerStatement">Inner statement.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.LinqExpressionBinary.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="lhsField">LHS field.</param>
            <param name="rhsField">RHS field.</param>
            <param name="binaryOperator">Binary operator.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.LinqExpressionConstant.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="value">LHS field.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.LinqQueryManager.LinqConditionGroup.LogicalOperator">
            <summary>
            Gets or sets the logical operator with which the conditions are to be combined. Default value is 'And'.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.#ctor(System.Collections.IEnumerable,System.Type)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.LinqQueryManager" />.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.LinqQueryManager.List">
            <summary>
            Gets the associated list against which the queries will be done.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.LinqQueryManager.ListItemType">
            <summary>
            Gets the type of items in the list.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.DoesItemMatch(System.Object,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition)">
            <summary>
            Returns true if the specified item matches the specified condition.
            </summary>
            <param name="item"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.PerformQuery(Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqStatement)">
            <summary>
            Performs query on the list and returns the results.
            </summary>
            <param name="linqStatement">Specifies the query criteria.</param>
            <returns>Results of the query.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.AndHelper(Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition)">
            <summary>
            Creates a new condition that combines the specified two conditions using logical <i>And</i> operator.
            If x or y is null then returns the non-null condition without creating a new condition.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.AndHelper(Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition)">
            <summary>
            Creates a new condition that combines the specified three conditions using logical <i>And</i> operator.
            If a condition is null then combines the other non-null conditions.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.GetTypedEnumerable(System.Collections.IEnumerable)">
            <summary>
            If the specified list is not a generic IEnumerable&lt;T&gt; where T is the same type or a derived type as the this.List element type,
            then creates a this.List element type typed enumerable instance that wraps the specified list.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.GetListElementType(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Returns the list element type.
            </summary>
            <param name="list">List whose element type to get.</param>
            <param name="useCollectionViewSource">If element type cannot be determined from list and it's a collection view then
            determine it from the collection view's source collection.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.OrHelper(Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition)">
            <summary>
            Creates a new condition that combines the specified two conditions using logical <i>Or</i> operator.
            If x or y is null then returns the non-null condition without creating a new condition.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.OrHelper(Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqCondition)">
            <summary>
            Creates a new condition that combines the specified three conditions using logical <i>Or</i> operator.
            If a condition is null then combines the other non-null conditions.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.PerformQuery(System.Collections.IEnumerable,Infragistics.Controls.Schedules.Services.LinqQueryManager.ILinqStatement)">
            <summary>
            Performs query on the specified list and returns the results.
            </summary>
            <param name="list">List to perform the query against. Note that the list
            must contain the same types of items as the list associated with this query manager.</param>
            <param name="linqQuery">Specifies the query criteria.</param>
            <returns>Results of the query.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.LinqQueryManager.GetCachedMemberExpressionOverride(Infragistics.Controls.Schedules.Services.LinqQueryManager.CreateExpressionInfo,System.String)">
            <summary>
            Gets the expression used to access the specified field from the info._parameterExpression.
            </summary>
            <param name="info"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DataViewLinqQueryManager.CreateHelper(System.Collections.IEnumerable,System.Type)">
            <summary>
            A helper method that checks if the list is a DataView and if so creates a new instance of
            DataViewLinqQueryManager.
            </summary>
            <param name="list">If list is a DataView then returns a new DataViewLinqQueryManager. Otherwise it returns null.</param>
            <param name="listItemType">Item type contained in the list. This is DataRowView or derived type.</param>
            <returns>A new DataViewLinqQueryManager or null depending on the <paramref name="list" /> parameter.</returns>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ListQueryResult._externalQueryInfo">
            <summary>
            This object contains information from which the query criteria of this result are
            derived. This is used when query conditions need to be re-derived, for example when 
            property mappings are changed. In the case of ActivityListManager, this is an instance
            of ActivityQueryComponent.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ListQueryResult._isResultFilteredDataItems">
            <summary>
            True if the result is simply a filtered list of data items. If it's something else,
            like summary of data or some other value derived from data then this will be false.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ListQueryResult._shouldCreateViewList">
            <summary>
            If true then ViewList will be created by the list manager for this result. If false,
            only dataList will be assigned but the view list won't be created.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ListQueryResult._reevaluateCallback">
            <summary>
            This callback is used to verify the result after it's marked dirty.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ListQueryResult._isDirty_discardViewItems">
            <summary>
            If true then the items in the view list can be reused when the result is verified. If false
            the items in the view list will be discarded and new ones will be created. This is set to true
            when property mappings or the list itself etc... changes.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ListQueryResult._processChangeEventAction">
            <summary>
            List manager calls ProcessChangeEvent method to give the result itself a chance to process
            the change notification from the underlying data source. ProcessChangeEvent delegates the call
            to this callback if it's provided in the constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListQueryResult.#ctor(System.Object,System.Boolean,System.Boolean,System.Func{Infragistics.Controls.Schedules.Services.ListQueryResult,Infragistics.Controls.Schedules.Services.DataListChangeInfo,System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="externalQueryInfo">This object contains information from which the the list manager derives
            the query condition of this result. This is used when query conditions need to be re-derived, for example 
            when property mappings are changed. In the case of ActivityListManager, this is an instance of ActivityQuery.
            </param>
            <param name="isResultFilteredDataItems">True indicates that this query result contains a subset of the items
            from the data source. False indicates that the query result is not a simple filtered subset of items
            in the data source but rather other calculated information, like navigation related piece of data or a calculated
            summary of a field.</param>
            <param name="shouldCreateViewList">Specifies whether the list manager should create view list around the
            resultant data list. It's false for HasNext/PreviousActivity type queries where the resulting data is not
            a list of data items.</param>
            <param name="processChangeEventAction">
            Called to process list change event.
            </param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListQueryResult.DataList">
            <summary>
            The result list that contains the data source objects.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListQueryResult.Error">
            <summary>
            Error if any.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListQueryResult.ExternalQueryInfo">
            <summary>
            This object contains information from which the query condition of this result are
            derived. This is used when query conditions need to be re-derived, for example when 
            property mappings are changed. In the case of ActivityListManager, this is an instance
            of ActivityQuery.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListManager`2.AutoHookIntoDataItemPropChanged">
            <summary>
            Indicates whether to auto-hook into INotifyPropertyChanged.PropertyChanged of data items in the list.
            By default the data items are not auto-hooked. ViewItemManager typically hooks into data items explicitly.
            However if ViewItemManager is not used by the list manager, then one can override this property to let
            the ListEventListener hook into the data items automatically. Note that once the list event listener is
            created, any changes in the return value of this property will not be honored.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListManager`2.IsListViewItemsList">
            <summary>
            Indicates if the associated data source list contains actual view items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListManager`2.List">
            <summary>
            The data source list.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListManager`2.LinqQueryManager">
            <summary>
            Linq query manager used for quering the data source list.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListManager`2.Mappings">
            <summary>
            Gets or sets the field mappings collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListManager`2.ViewItemFactory">
            <summary>
            Factory if any used to create TViewItem instances for specific data items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListManager`2.ViewItemManager">
            <summary>
            View item manager used to manage and track view item objects by their id values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ListManager`2.Results">
            <summary>
            List of results that are actively being managed and whose result lists are updated to reflect
            any changes that occur to the data source list.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.AssociateDataItemToAddNewViewItem(`0,Infragistics.Services.DataErrorInfo@)">
            <summary>
            Creates a new data item and associates it with the specified view item. Note that the data item
            is not added to the underlying list. It must be added separately, either via EndEdit call or
            manually. Also the underlying list must support adding a data item.
            </summary>
            <param name="item">View item.</param>
            <param name="error">Will be set to an error if any.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.CreateNew(Infragistics.Services.DataErrorInfo@)">
            <summary>
            Creates a new TViewItem instance.
            </summary>
            <param name="dataError"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.EndEdit(`0,Infragistics.Services.DataErrorInfo@)">
            <summary>
            Commits the specified view item.
            </summary>
            <param name="viewItem"></param>
            <param name="dataError"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.EnsureViewItemInitialized(`0)">
            <summary>
            When view items are used as data items in the data source (in other words the data source
            comprises of view items) then when a view item is used directly, we may need to initialize
            the view item (the same way ViewList would do it). For example, in the case of activity,
            activity's owning resource and calendar need to be initialized based on the id properties.
            This initialization is done by the view list however if a view item is used directly
            by accessing it from the data source, then we need to make sure it's initialized.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.GetFieldValueAccessorConverted(`1,System.Type)">
            <summary>
            Gets field value accessor that will convert the values to the specified target type.
            </summary>
            <param name="field">Identifies the field.</param>
            <param name="convertTargetType">Target type to convert the values to.</param>
            <returns>IFieldValueAccessor instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.IsEditTransactionSupported(`0)">
            <summary>
            Returns true if BeginEdit, CancelEdit and EndEdit are supported.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.RecreateAllViewItems">
            <summary>
            Discards all the existing view items and dirties all the query results so the view items get re-created.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.ReevaluateQuery(Infragistics.Controls.Schedules.Services.ListQueryResult)">
            <summary>
            Re-evaluates the specified query result and updates its result list.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.Remove(`0,Infragistics.Services.DataErrorInfo@)">
            <summary>
            Removes the specified view item.
            </summary>
            <param name="viewItem"></param>
            <param name="dataError"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.CreateLinqStatement(Infragistics.Controls.Schedules.Services.ListQueryResult,Infragistics.Services.DataErrorInfo@)">
            <summary>
            This method is called to create linq condition from a list specific query result, like ActivityQuery for the
            activity list manager.
            </summary>
            <param name="result">Query result object that was passed into the <see cref="M:Infragistics.Controls.Schedules.Services.ListManager`2.PerformQuery(Infragistics.Controls.Schedules.Services.ListQueryResult,System.Boolean)" /> method, from which
            the derived list manager is to create the corresponding linq condition.</param>
            <param name="error">This out param will be set if an error occurs.</param>
            <returns>Returns linq condition derived from the specified listSpecificQueryInfo object.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.GetAllMappingKeys">
            <summary>
            Returns all potential mapping keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.ManageQueryResult(Infragistics.Controls.Schedules.Services.ListQueryResult)">
            <summary>
            Manages query results so any changes made to the list manager, like list or mappings being changed, will
            cause the list manager to re-evaluate the result and re-initialize the result with the new set of
            queried data.
            </summary>
            <param name="result">Result to manage.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.PerformQuery(Infragistics.Controls.Schedules.Services.ListQueryResult,System.Boolean)">
            <summary>
            Performs query and returns the result object. <b>NOTE:</b> CreateLinqCondition method must be
            overridden to provide logic for converting the specified listSpecificQueryInfo object into
            linq query conditions.
            </summary>
            <param name="result">Performs query referenced by this result.</param>
            <param name="manageResult"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.VerifyItemsInCleanResults(System.Collections.IEnumerable,System.Nullable{System.Boolean})">
            <summary>
            Adds or removes specified items from the results based on the 'add' parameter. If 'add' parameter
            is null it verifies whether the item should exist in the result and adds or removes it from the
            result accordingly.
            </summary>
            <param name="dataItemsToVerify">Items beign added/removed or to be verified.</param>
            <param name="add">If true, performs add. If false, performs removal. If null verifies whether
            the item should exist in the result based on the result's query criteria and adds or removes
            it from the result accordingly.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.VerifyItemsInResult(Infragistics.Controls.Schedules.Services.ListQueryResult,System.Collections.IEnumerable,System.Nullable{System.Boolean})">
            <summary>
            Adds or removes specified items from the result based on the 'add' parameter. If 'add' parameter
            is null it verifies whether the item should exist in the result and adds or removes it from the
            result accordingly.
            </summary>
            <param name="result">Query result.</param>
            <param name="dataItemsToVerify">Items beign added/removed or to be verified.</param>
            <param name="add">If true, performs add. If false, performs removal. If null verifies whether
            the item should exist in the result based on the result's query criteria and adds or removes
            it from the result accordingly.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.DirtyFieldValueAccessors">
            <summary>
            Called to dirty field value accessors. This is typically called when the list is changed to different
            list or one or more mappings are changed.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.VerifyFieldValueAccessors_AddDataItemPropListener(System.String,Infragistics.Services.IFieldValueAccessor)">
            <summary>
            Adds an entry to _dataItemPropNameToListenerMap for the specified mapped field. DataItemPropNameToListenerMap is used
            to route property change notification from the data item to the correct field value accessor.
            </summary>
            <param name="mappedField">Mapped field.</param>
            <param name="accessor">Field value accessor.</param>
            <returns>Notifier associated with the accessor.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListManager`2.VerifyFieldValueAccessors_CreateAccessorHelper(System.String,System.Boolean,Infragistics.Controls.Schedules.Services.ConverterInfo,Infragistics.Controls.Schedules.Services.LinqQueryManager,System.Object@,System.Object@)">
            <summary>
            Creates IFieldValueAccessor for the specified mapped field.
            </summary>
            <param name="mappedField">Field in the data source.</param>
            <param name="isExplicitlyMapped">Whether the field was explicitly mapped. If true then fallbacks to using binding if the corresponding property is not found.</param>
            <param name="converterInfo">Converter information.</param>
            <param name="linqQueryManager">Linq query manager.</param>
            <param name="propDescriptorAccessorFactoryCache">Used by the method to cache certain information in this variable.</param>
            <param name="reflectionPropAcessorFactoryCache">Used by the method to cache certain information in this variable.</param>
            <returns>Created field value accessor or null if mapped field is not found.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.BeginEdit(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,`0,System.Func{`0,Infragistics.Controls.Schedules.Services.IEditList{`0}},Infragistics.Services.DataErrorInfo@)">
            <summary>
            Begins modifications to an item.
            </summary>
            <param name="connector">Schedule data connector.</param>
            <param name="item">Item that is to be modified.</param>
            <param name="errorInfo">If there's an error this will be set to a new DataErrorInfo object with the error information.</param>
            <param name="getEditListCallback">The callback to get the edit list associated with the item being modified.</param>
            <returns>A value indicating whether the operation succeeded.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.CheckItemOperationAllowed(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,Infragistics.Controls.Schedules.Services.ItemOperationResult{`0},Infragistics.Controls.Schedules.Services.ActivityOperation)">
            <summary>
            Checks to see if the specified operation is allowed on the item. If the operation is not allowed, 
            initializes the specified result with an error.
            </summary>
            <param name="connector">Schedule data connector.</param>
            <param name="result">Item result object.</param>
            <param name="operation">Operation being performed.</param>
            <returns>True if the operation is allowed. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.CheckItemOperationAllowed(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,`0,Infragistics.Controls.Schedules.Services.ActivityOperation,Infragistics.Services.DataErrorInfo@)">
            <summary>
            Checks to see if the specified operation is allowed for the activity using connector's IsActivityOperationSupported
            method. If the operation is not allowed, initializes the specified result with an error.
            </summary>
            <param name="connector">Schedule data connector.</param>
            <param name="item">Item object.</param>
            <param name="operation">Operation being performed.</param>
            <param name="error">This will be set to an error object if the operation is not allowed.</param>
            <returns>True if the operation is allowed. False otherwise.</returns>
            <returns>True if the operation is allowed. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.DefaultCancelEditImplementation(`0,System.Func{`0,Infragistics.Controls.Schedules.Services.IEditList{`0}},Infragistics.Services.DataErrorInfo@)">
            <summary>
            Cancels a new activity that was created by the ScheduleDataConnectorBase's CreateNew call however one that 
            hasn't been commited yet.
            </summary>
            <param name="item">ActivityBase derived object that was created using ScheduleDataConnectorBase's CreateNew method however
            one that hasn't been committed yet.</param>
            <param name="getEditListCallback">The callback to get the edit list associated with a specific activity.</param>
            <param name="errorInfo">If there's an error this will be set to a new DataErrorInfo object with the error information.</param>
            <returns>True to indicate that the operation was successfull, False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.DefaultEndEditOverrideImplementation(Infragistics.Controls.Schedules.Services.IEditList{`0},Infragistics.Controls.Schedules.Services.ItemOperationResult{`0},System.Boolean)">
            <summary>
            This is called to commit changes to an activity to the underlying data source.
            </summary>
            <param name="editList">This is the list manager.</param>
            <param name="result">Result's Activity is being updated. This result should be initialized with the result of the opreation.</param>
            <param name="force">True if the UI cannot remain in edit mode and therefore the operation must be ended,
            either with success or with an error. It cannot be canceled.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.EndEdit(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,`0,System.Boolean,System.Action{Infragistics.Controls.Schedules.Services.IEditList{`0},Infragistics.Controls.Schedules.Services.ItemOperationResult{`0},System.Boolean},System.Func{`0,Infragistics.Controls.Schedules.Services.IEditList{`0}})">
            <summary>
            Commits a new or modified activity.
            </summary>
            <param name="connector">Schedule data connector.</param>
            <param name="item">A new or modified ActivityBase derived instance.</param>
            <param name="force">True to force the edit operation to end. Used when user interface
            being used to perform the edit operation cannot remain in edit mode and therefore the
            edit operation must be ended. If the specified activity is deemed invalid to be committed
            then an error result should be returned.
            </param>
            <param name="endEditOverride">The callback used for each activity actually changed in the end edit operation.</param>
            <param name="getEditListCallback">The callback to get the edit list associated with a specific activity.</param>
            <returns><see cref="T:Infragistics.Controls.Schedules.Services.ActivityOperationResult" /> instance which may be initialized with the result
            asynchronously.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.Remove(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,Infragistics.Controls.Schedules.Services.ActivityBase,System.Action{Infragistics.Controls.Schedules.Services.IEditList{Infragistics.Controls.Schedules.Services.ActivityBase},Infragistics.Controls.Schedules.Services.ItemOperationResult{Infragistics.Controls.Schedules.Services.ActivityBase},System.Boolean},System.Func{Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Controls.Schedules.Services.IEditList{Infragistics.Controls.Schedules.Services.ActivityBase}})">
            <summary>
            Removes an activity.
            </summary>
            <param name="connector">Schedule data connector.</param>
            <param name="activity">ActivityBase derived instance to remove.</param>
            <param name="endEditOverride">The callback used for each activity actually changed in the end edit operation.</param>
            <param name="getEditListCallback">The callback to get the edit list associated with a specific activity.</param>
            <returns><see cref="T:Infragistics.Controls.Schedules.Services.ActivityOperationResult" /> instance.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.EndEdit(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,`0,System.Boolean,System.Action{Infragistics.Controls.Schedules.Services.IEditList{`0},Infragistics.Controls.Schedules.Services.ItemOperationResult{`0},System.Boolean},System.Func{`0,Infragistics.Controls.Schedules.Services.IEditList{`0}})" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.CommitVarianceHelper(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,Infragistics.Controls.Schedules.Services.ItemOperationResult{Infragistics.Controls.Schedules.Services.ActivityBase},System.Boolean,System.Int32,System.Action{Infragistics.Controls.Schedules.Services.IEditList{Infragistics.Controls.Schedules.Services.ActivityBase},Infragistics.Controls.Schedules.Services.ItemOperationResult{Infragistics.Controls.Schedules.Services.ActivityBase},System.Boolean},System.Func{Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Controls.Schedules.Services.IEditList{Infragistics.Controls.Schedules.Services.ActivityBase}})">
            <summary>
            Committing a variance involves potentially updating the associated root activity's MaxOccurrenceDateTime
            field if the new end time of the occurrence is greater than the MaxOccurrenceDateTime because the 
            MaxOccurrenceDateTime must always be greater than or equal to the maximum end time of all the occurrences
            of the recurring activity. This is relied upon by our querying logic.
            </summary>
            <param name="connector">Schedule data connector.</param>
            <param name="result">This is the result object. Result's Activity is the variance that's being updated.</param>
            <param name="force">True if the UI cannot remain in edit mode and therefore the operation must be ended,
            either with success or with an error. It cannot be canceled.</param>
            <param name="attempt">0 if this is the first attempt at updating the root activity. 1 if we had previously attempted
            to update the root activity and we shouldn't try again.</param>
            <param name="endEditOverride">The callback used for each activity actually changed in the end edit operation.</param>
            <param name="getEditListCallback">The callback to get the edit list associated with a specific activity.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.EndEditActivityHelper(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,Infragistics.Controls.Schedules.Services.ItemOperationResult{Infragistics.Controls.Schedules.Services.ActivityBase},System.Boolean,System.Action{Infragistics.Controls.Schedules.Services.IEditList{Infragistics.Controls.Schedules.Services.ActivityBase},Infragistics.Controls.Schedules.Services.ItemOperationResult{Infragistics.Controls.Schedules.Services.ActivityBase},System.Boolean},System.Func{Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Controls.Schedules.Services.IEditList{Infragistics.Controls.Schedules.Services.ActivityBase}},System.Nullable{System.Boolean})">
            <summary>
            A helper method that's called by the EndEdit and CommitVarianceHelper methods.
            </summary>
            <param name="connector">Schedule data connector.</param>
            <param name="result">Activity result object.</param>
            <param name="force">Whether to force end.</param>
            <param name="endEditOverride">The callback used for each activity actually changed in the end edit operation.</param>
            <param name="getEditListCallback">The callback to get the edit list associated with a specific activity.</param>
            <param name="updateVarianceRootQueryTimes"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ListScheduleDataConnectorUtilities`1.OnRootActivityUpdated_CommitVariance(System.Object,System.Tuple{Infragistics.Controls.Schedules.Services.ItemOperationResult{Infragistics.Controls.Schedules.Services.ActivityBase},Infragistics.Controls.Schedules.Services.ItemOperationResult{Infragistics.Controls.Schedules.Services.ActivityBase},System.Boolean,System.Action{Infragistics.Controls.Schedules.Services.IEditList{Infragistics.Controls.Schedules.Services.ActivityBase},Infragistics.Controls.Schedules.Services.ItemOperationResult{Infragistics.Controls.Schedules.Services.ActivityBase},System.Boolean},System.Func{Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Controls.Schedules.Services.IEditList{Infragistics.Controls.Schedules.Services.ActivityBase}}})">
            <summary>
            When a variance' root activity is updated, in order to update the variance we may need to wait for
            the root activity to complete updating. This is called when the root activity end edit operation
            compltes.
            </summary>
            <param name="notUsed"></param>
            <param name="data"></param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2">
            <summary>
            List manager that supports property storage mechanism for managing mapped property values on view items.
            The view item class needs to provide a StoragePropsInfo which essentially is a collection of PropInfo
            objects that describe the property of the view item. The prop info is used to manage the field value
            notifications as well as providing the view items the value for the associated field via a property 
            storage.
            </summary>
            <typeparam name="TViewItem"></typeparam>
            <typeparam name="TMappingKey"></typeparam>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.PropertyStoreWrapperBase">
            <summary>
            This IPropertyStore implementation dynamically switches between using a IFieldValueAccessor if a property has a field mapping for it
            or using a DictionaryPropertyStore if there's no mapping for the field.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.PropertyStoreWrapperBase.CommitPendingUpdate(`0)">
            <summary>
            Commits any pending updates. Updates are asynchronously committed when _updateDataItemAsynchronously is true. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.PropertyStoreWrapper`1">
            <summary>
            This IPropertyStore implementation dynamically switches between using a IFieldValueAccessor if a property has a field mapping for it
            or using a DictionaryPropertyStore if there's no mapping for the field.
            </summary>
            <typeparam name="TValue">Type of values that are stored.</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.PropertyStoreWrapper`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.PropertyStoreWrapper`1.CommitPendingUpdate(`0)">
            <summary>
            Commits any pending updates. Updates are asynchronously committed when _updateDataItemAsynchronously is true. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.PropertyValueConverter._converterInfo">
            <summary>
            User supplied converter info.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.PropertyValueConverter.#ctor(Infragistics.Services.StoragePropsInfo.PropInfo,Infragistics.Controls.Schedules.Services.ConverterInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="propInfo"></param>
            <param name="converterInfo"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.#ctor(Infragistics.Services.StoragePropsInfo,System.Converter{`0,System.Object})">
            <summary>
            Constructor.
            </summary>
            <param name="propsInfo">Property information of the TViewItem.</param>
            <param name="viewItemToDataItemConverter">Converter that retrieves the data item from the view item.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.CommitPendingStoreUpdates">
            <summary>
            Properties in the propsInfo passed into the constructor can be marked with their 
            _updateDataItemAsynchronously set to true, in which case the updates to that property
            are pushed into the data item asynchronously. This method pushes such any pending 
            updates into the data items.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.CommitPendingStoreUpdates(`0)">
            <summary>
            Properties in the propsInfo passed into the constructor can be marked with their 
            _updateDataItemAsynchronously set to true, in which case the updates to that property
            are pushed into the data item asynchronously. This method pushes such any pending 
            updates into the data items.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.CreateFieldValueAccessorOverride(`1)">
            <summary>
            Overridden. Creates IFieldValueAccessor for the specified TViewItem property.
            </summary>
            <param name="field">Identifies the TViewItem property.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.GetAllMappingKeys">
            <summary>
            Returns all potential mapping keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.InitializeUnmappedPropertiesMappingKey(`1)">
            <summary>
            Initializes unmapped properties field key. Any unampped field values will be stored as XML in this field.
            </summary>
            <param name="unmappedPropertiesMappingKey">Field mapping key where the XML will be stored.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.EnqueuePendingUpdate(`0)">
            <summary>
            Called by the store to start a deferred update operation.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.PropertyStorageListManager`2.InitAsyncUpdateStores">
            <summary>
            Initializes _asyncUpdateStores to an array of stores that update asynchronously.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ItemCollectionListManager`2.#ctor(Infragistics.Services.StoragePropsInfo,System.Converter{`0,System.Object})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ItemCollectionListManager`2.RecreateAllViewItems">
            <summary>
            Discards all the existing view items and dirties all the query results so the view items get re-created.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleItemCollectionListManager`2.#ctor(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,Infragistics.Services.StoragePropsInfo,System.Converter{`0,System.Object})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceListManager.#ctor(Infragistics.Controls.Schedules.Services.IScheduleDataConnector)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceListManager.RecreateAllViewItems">
            <summary>
            Discards all the existing view items and dirties all the query results so the view items get re-created.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCalendarListManager.#ctor(Infragistics.Controls.Schedules.Services.IScheduleDataConnector)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityListManager`2._mappedKeys">
            <summary>
            Mapping of ActivityProperty enum values to their corresponding MappingKey enum values.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityListManager`2._complementaryListManager">
            <summary>
            This is set to the recurring list manager on a non-recurring list manager and the other way around as well.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.CreateLinqStatement(Infragistics.Controls.Schedules.Services.ListQueryResult,Infragistics.Services.DataErrorInfo@)">
            <summary>
            This method is called to create linq condition from a list specific query result, like ActivityQuery for the
            activity list manager.
            </summary>
            <param name="result">Linq statement for the query associated with the specified result object will be returned.</param>
            <param name="error">This out param will be set if an error occurs.</param>
            <returns>Returns linq condition derived from the specified listSpecificQueryInfo object.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.RecreateAllViewItems">
            <summary>
            Discards all the existing view items and dirties all the query results so the view items get re-created.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityListManager`2.IsEndTimeRequired">
            <summary>
            Gets a value indicating whether the end time is required for the activities that this activity list manager manages.
            Default implementation returns true.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.CreateRemindersOccurrenceIdCollection(Infragistics.Controls.Schedules.Services.ActivityQueryComponent,System.Collections.Generic.IList{Infragistics.Controls.Schedules.Services.ActivityBase},Infragistics.Controls.Schedules.Services.OccurrenceManager{`0})">
            <summary>
            Creates occurrence id collection for recurring activities for reminders activities result.
            </summary>
            <param name="qc">Query component that has information regarding the reminders query.</param>
            <param name="sourceActivities">This is a collection of recurring and variance activities. Recurring activities
            in this collection will be resolved into occurrences with the variances in the collection taken into account.
            The variances will also be included in the resultant occurrence id collection.</param>
            <param name="occurrencesManager">Occurrence manager.</param>
            <returns>Collection of occurrence id's that define the occurrences and variances.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.GetActualActivityQueryField(Infragistics.Controls.Schedules.Services.ActivityProperty)">
            <summary>
            Returns the actualy field to be used when constructing queries for activities. This takes into account
            if 'End' mapping is not provided in which case it maps 'End', 'EndTimeZoneId' and 'OriginalOccurrenceEnd'
            properties to 'Start', 'StartTimeZoneId' and 'OriginalOccurrenceStart' respectively.
            </summary>
            <param name="propertyParam"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.HookIntoPropertyStores">
            <summary>
            Hooks into property stores for properties that require certain actions, like re-evaluating to see if they
            should be added to or removed from query results.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.InitHasRecurringAppointmentsFlag">
            <summary>
            If recurring appointment data source is specified then the appointment data source doesn't contain
            recurring appointments. If it's not specified then the appointment data source should be considered
            to contain the recurring appointments. Sets _hasRecurringActivities appropriately on both list managers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.GetDataItemPropertyType(Infragistics.Controls.Schedules.Services.ActivityProperty)">
            <summary>
            Gets the type of the underlying property in the data source.
            </summary>
            <param name="property">Mapped property.</param>
            <returns>Type of the associated property in the data source. Null if the property is not mapped.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.GetReminderIntervalLinqComparisonValue(System.TimeSpan)">
            <summary>
            Gets the specified reminder interval value converted to long if the underlying data source object's
            reminder interval is of long type. Otherwise it returns the span value itself.
            </summary>
            <param name="span">Reminder interval value.</param>
            <returns>Value used for comparing in linq query conditions.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityListManager`2.OnActivity_RequeryPropChanged(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            This is called when a property on an activity changes that may require us to remove the activity
            from one or more query results and furthermore add it to one or more query results.
            </summary>
            <param name="activity">Activity whose property changed.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.JournalListManager.IsEndTimeRequired">
            <summary>
            Overridden. Returns false since the journals do not require end time.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityCategoryListManager.#ctor(Infragistics.Controls.Schedules.Services.IScheduleDataConnector)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.VerifyAsyncItemsQueue`1">
            <summary>
            Used to manage one or more items which are processed asynchronously. When an item is added, an async
            operation can be started. Any further items added in the meantime are collected into a list. When the
            async handler is executed, all the items are processed via the the 'verifyCallback' delegate
            specified in the constructor.
            </summary>
            <typeparam name="T">Type of items that are to be processed asynchronously.</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.VerifyAsyncItemsQueue`1.#ctor(System.Action{System.Collections.Generic.IEnumerable{`0}},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="verifyCallback">This will be called to process the items.</param>
            <param name="manageItemsAsWeakReferences">Whether to manage items as weak references.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.VerifyAsyncItemsQueue`1.DataItems">
            <summary>
            The set used to manage the items.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.VerifyAsyncItemsQueue`1.Enque(`0,System.Boolean)">
            <summary>
            Adds an item to be processed asynchronously.
            </summary>
            <param name="dataItem">Item object.</param>
            <param name="startAsyncOperation">Whether to start an async operation if it already hasn't been started previously.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.VerifyAsyncItemsQueue`1.RemoveItem(`0)">
            <summary>
            Removes the specified item from the items queue.
            </summary>
            <param name="dataItem">Item to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.VerifyAsyncItemsQueue`1.RemoveItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified items.
            </summary>
            <param name="dataItems">Items to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.VerifyAsyncItemsQueue`1.RemoveAllItems">
            <summary>
            Removes all items and stops any pending async callback.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.VerifyAsyncItemsQueue`1.StartAsyncVerification">
            <summary>
            Starts the async verification process.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ScheduleUtilities.KeyedCollectionImpl`2">
            <summary>
            Keyed collection that uses a delegate for retrieving key value from item.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="TItem">Type of item.</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.CheckTypeByName(System.Type,System.String,System.Boolean)">
            <summary>
            Checks if the specified type's full name is the same as typeFullName parameter. It checks the base classes
            and interfaces if checkBaseTypes parameter is true.
            </summary>
            <param name="type">Type to check.</param>
            <param name="typeFullName">Full name of the type, which includes the namespace but without the assembly information.</param>
            <param name="checkBaseTypes">Whether to check base types and interfaces.</param>
            <returns>True if the name matches. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.FromXml``1(System.String,Infragistics.Services.ObjectSerializer)">
            <summary>
            Converts the specified xml to an instance of object of specified type. The type needs to be one of
            the supported types.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.GetDateRange(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Gets the activity's date range.
            </summary>
            <param name="activity">Activity object.</param>
            <returns>Date-time range of the activity.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.GetDateRangeInUTC(Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Gets the activity's date range.
            </summary>
            <param name="activity">Activity object.</param>
            <param name="localTimeZone">Local time zone. Used when the activity is time-zone neutral in which case its
            start and end times are in effect in local time zone, and therefore we need to convert them to UTC in order
            to compare to the date ranges which are in UTC.</param>
            <returns>Date-time range of the activity in UTC.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.GetSerializer">
            <summary>
            Gets the serializer used for serializing various schedule objects that are exposed by
            view objects that need to be serialized to data items as xml string values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.GetTimeZoneToken(Infragistics.Controls.Schedules.Services.Resource,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider,Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Gets the time zone for the resource based on its PrimaryTimeZoneId property. If id not specified or is invalid,
            fallbacks to fallbackTimeZone and if that's null then to local time zone.
            </summary>
            <param name="resource"></param>
            <param name="provider"></param>
            <param name="fallbackTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.Intersects(Infragistics.Controls.Schedules.Services.ActivityBase,System.Collections.Generic.IEnumerable{Infragistics.Services.DateRange},Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Checks to see if the activity's date range intersects with one of the date ranges in rangesInUTC collection.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="rangesInUTC">Date ranges in UTC.</param>
            <param name="localTimeZone">Local time zone. Used when the activity is time-zone neutral in which case its
            start and end times are in effect in local time zone, and therefore we need to convert them to UTC in order
            to compare to the date ranges which are in UTC.</param>
            <returns>True if the activity date range intersects with one of the date ranges specified via the 'rangesInUTC' parameter.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.Max(System.Double,System.Double)">
            <summary>
            Helper method to return the larger value or non-NaN value if one is NaN
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.MaxReached(System.Int32,System.Int32)">
            <summary>
            If max &gt; 0 then returns true if value &gt; max;
            </summary>
            <param name="max"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.Min(System.Double,System.Double)">
            <summary>
            Helper method to return the larger value or non-NaN value if one is NaN
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.Reinitialize``1(Infragistics.Collections.Services.ObservableCollectionExtended{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Helper method for invoking the Reinitialize method where the call is only made if the collections differ.
            </summary>
            <typeparam name="T">The type of items in the collections</typeparam>
            <param name="collection">The collection to reinitialize</param>
            <param name="newItems">The new list of items used to update the collection</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.ToCalendars(System.Object)">
            <summary>
            Converts value which can be Resource, IEnumerable&lt;Resource&gt;, ResourceCalendar or IEnumerable&lt;ResourceCalendar&gt; into IEnumerable&lt;ResourceCalendar&gt;.
            </summary>
            <param name="value">Value can be Resource, IEnumerable&lt;Resource&gt;, ResourceCalendar or IEnumerable&lt;ResourceCalendar&gt;.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.ToCalendarsReadOnlyCollection(System.Object)">
            <summary>
            Converts value which can be Resource, IEnumerable&lt;Resource&gt;, ResourceCalendar or IEnumerable&lt;ResourceCalendar&gt; into ImmutableCollection&lt;ResourceCalendar&gt;.
            </summary>
            <param name="value">Value can be Resource, IEnumerable&lt;Resource&gt;, ResourceCalendar or IEnumerable&lt;ResourceCalendar&gt;.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.ToImmutableCollection``1(System.Object)">
            <summary>
            Converts value which can be a T instance, or an IEnumerable&lt;T&gt; to ImmutableCollection&lt;T&gt;.
            </summary>
            <param name="value">Value can be a T or an IEnumerable&lt;T&gt;.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.ToXml(System.Object,Infragistics.Services.ObjectSerializer)">
            <summary>
            Converts the specified value, which needs to be a supported type, to XML.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleUtilities.TruncateToSecond(System.DateTime)">
            <summary>
            Truncates the specified date to seconds.
            </summary>
            <param name="date">Date to trucate.</param>
            <returns>Date value truncated to seconds.</returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DateRecurrence">
            <summary>
            Contains information that defines a recurring date-time.
            </summary>
            <remarks>
            <para class="body">
            <b>DateRecurrence</b> is used to specify rules that define a recurring date-time. It's used by the
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence" /> property.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrence.Equals(System.Object)">
            <summary>
            Overridden. Returns true if the specified object equals this object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if the specified object equals this object. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrence.GetHashCode">
            <summary>
            Overridden. Returns the hash code of this object.
            </summary>
            <returns>Hash code of the object.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrence.ToString">
            <summary>
            Overridden. Returns string representation of the recurrence.
            </summary>
            <returns>Text that describes the recurrence.</returns>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Count">
            <summary>
            Specifies the number of times the recurrence will re-occur. If 0 then there's no limit.
            </summary>
            <remarks>
            You can limit the number of times a recurrence re-occurs by either specifying the <b>Count</b> 
            property or the <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Until" /> property. Note that <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Count" />
            and <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Until" /> are exclusive. You should only specify one but not both.
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Until" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Frequency">
            <summary>
            Specifies the frequency of the recurrence.
            </summary>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Interval" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Interval">
            <summary>
            Specifies how often to recur.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Rules">
            <summary>
            Specifies recurrence rules.
            </summary>
            <remarks>
            <para class="body">
            Recurrence rules can be used to specify further criteria regarding when the recurrences recur. For example, 
            you can specify one or more rules to indicate that the recurrence should recur in a specific month, in a 
            specific week of the year, on a specific week day etc... Rules can limit or in some cases expand the number 
            of recurrences that would have occurred based on the Frequency and Interval settings alone.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.DateRecurrenceRuleBase" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Until">
            <summary>
            Specifies when to stop to recur.
            </summary>
            <remarks>
            <para class="body">
            You can limit the recurrence to a date-time. Recurrence will stop recurring after that date-time.
            However note that the last recurrence can start on this date-time. Also note that <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Count" />
            and <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Until" /> are exclusive. You should only specify one but not both.
            </para>
            </remarks>
            <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Count" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DateRecurrence.WeekStart">
            <summary>
            Specifies the start of the week. Default value is <b>Monday</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>WeekStart</b> has implications when applying certain rules, like <see cref="T:Infragistics.Controls.Schedules.Services.WeekOfYearRecurrenceRule" />, 
            regarding when the first week of the year starts. First week of the year is considered to be the first
            week that has at least 4 days in the year.
            </para>
            <para class="body">
            <b>Note</b> that the default value of this property is <i>Monday</i>.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrence.FromICalendarString(System.String)">
            <summary>
            Parses the specified recurrence string in the format of ICalendar to a DateRecurrence instance.
            </summary>
            <param name="recurrence">String in ICalendar recurrence format.</param>
            <returns>DateRecurrence instance from the parsed string. If the string is an invalid format, raises an exception.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrence.ToStringWithStartDate(System.DateTime)">
            <summary>
            Returns a string representation of the recurrence based on the specified start date.
            </summary>
            <param name="startDate">The start date of the recurrence</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrence.ToStringWithStartDateAndTimes(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns a string representation of the recurrence based on the specified start date.
            </summary>
            <param name="startDate">The start date of the recurrence or null.</param>
            <param name="startTime">The start time of each recurrence instance or null.</param>
            <param name="endTime">The end time of each recurrence instance or null.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrence.ToICalendarString(Infragistics.Controls.Schedules.Services.DateRecurrence)">
            <summary>
            Converts the specified recurrence to its ICalendar string representation.
            </summary>
            <param name="recurrence">DateRecurrence instance to convert to string representation.</param>
            <returns>String that represents the specified DateRecurrence.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceCache.Enumerable.#ctor(Infragistics.Controls.Schedules.Services.DateRecurrenceCache,Infragistics.Services.DateRange,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">Cache.</param>
            <param name="dateRange">Occurrences within this date range will be enumerated.</param>
            <param name="maxOccurrencesToGenerate">Maximum number of occurrences to enumerate. 0 specifies no limit.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceCache.State.ReachFrequencyDate(System.DateTime,System.DateTime)">
            <summary>
            Increments the specified frequency date to reach a frequency interval that contains
            the target date. The returned date will be smaller than the target date.
            </summary>
            <param name="date"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceCache._maxMatchCount">
            <summary>
            If 0 then no count limit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceCache._fixedMatchCountPerInterval">
            <summary>
            If rules are as such that there's same fixed number of matches per interval period then
            this will be set to that number. Otherwise it will be 0 to indicate that there's no
            fixed match per interval.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceCache.#ctor(Infragistics.Controls.Schedules.Services.RecurrenceInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Contains information for recurrence generation.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DateRecurrenceParser">
            <summary>
            A class used for serializing and deserializing date recurrence into a string that's conformant to iCalendar RRULE format.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceParser.#ctor(Infragistics.Controls.Schedules.Services.DateRecurrence)">
            <summary>
            Constructor.
            </summary>
            <param name="recurrence"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceParser.SpaceHelper(System.Text.StringBuilder)">
            <summary>
            Appends space if the sb doesn't already end with a space.
            </summary>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase">
            <summary>
            Evaluates date recurrence rules contained in <see cref="T:Infragistics.Controls.Schedules.Services.DateRecurrence" /> object and
            generates recurrences.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase.FirstOccurrenceDate">
            <summary>
            Gets the date-time in UTC of the first occurrence.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase.LastOccurrenceDate">
            <summary>
            Gets the date-time in UTC of the last occurrence.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase.GetOccurrences(Infragistics.Services.DateRange)">
            <summary>
            Gets the occurrences within the specified date range. The date-time values of the range are in UTC.
            </summary>
            <param name="dateRange">Date range with date-time values in UTC.</param>
            <returns>Date-time values of occurrences that occur in the specified date range.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase.GetOccurrences(System.Collections.Generic.IEnumerable{Infragistics.Services.DateRange})">
            <summary>
            Gets the occurrences in the specified date ranges. The date-time values of the ranges are in UTC.
            </summary>
            <param name="dateRanges">Collection of date ranges with date-time values are in UTC.</param>
            <returns>Returns the times of occurrences that occurr in the specified date ranges.
            Each DateRange instance specifies the start and the end time of an occurrence.
            Note that the date-time values are in UTC.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase.DoesRecurOnDate(System.DateTime)">
            <summary>
            Specifies whether an occurrence occurs on the same day as the specified date.
            </summary>
            <param name="date">Date value in UTC.</param>
            <returns>True if an occurrence occurs on the specified date. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase.DoesRecurOnDateAndTime(System.DateTime)">
            <summary>
            Specifies whether an occurrence occurs on the specified date-time value, within second.
            </summary>
            <param name="dateTime">Date-time value in UTC.</param>
            <returns>True if an occurrence occurs on the specified date-time. False otherwise.</returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DefaultDateRecurrenceCalculator">
            <summary>
            An implementation of a <see cref="T:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase" /> that calculates occurrence information for a specified <see cref="T:Infragistics.Controls.Schedules.Services.RecurrenceInfo" />
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DefaultDateRecurrenceCalculator.#ctor(Infragistics.Controls.Schedules.Services.RecurrenceInfo)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.Services.DefaultDateRecurrenceCalculator" />
            </summary>
            <param name="info">Provides the information used to calculate the occurrences</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DefaultDateRecurrenceCalculator.FirstOccurrenceDate">
            <summary>
            Gets the date-time in UTC of the first occurrence.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DefaultDateRecurrenceCalculator.LastOccurrenceDate">
            <summary>
            Gets the date-time in UTC of the last occurrence.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DefaultDateRecurrenceCalculator.GetOccurrences(Infragistics.Services.DateRange)">
            <summary>
            Gets the occurrences within the specified date range. The date-time values of the range are in UTC.
            </summary>
            <param name="dateRange">Date range with date-time values in UTC.</param>
            <returns>Date-time values of occurrences that occur in the specified date range.</returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency">
            <summary>
            Enum used to specifiy <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Frequency" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency.Yearly">
            <summary>
            Occurs every year.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency.Monthly">
            <summary>
            Occurs every month.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency.Weekly">
            <summary>
            Occurs every week.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency.Daily">
            <summary>
            Occurs every day.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency.Hourly">
            <summary>
            Occurs every hour.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency.Minutely">
            <summary>
            Occurs every minute.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DateRecurrenceFrequency.Secondly">
            <summary>
            Occurs every second.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.RecurrenceBase">
            <summary>
            Abstract base class for a class that specifies rules that define recurring date-time.
            </summary>
            <remarks>
            <para class="body">
            <see cref="T:Infragistics.Controls.Schedules.Services.DateRecurrence" /> class derives from this class which is used to specify rules that define recurring date-time.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.DateRecurrence" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.RecurrenceBase.Clone">
            <summary>
            Clones the recurrence object.
            </summary>
            <returns>Cloned copy.</returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.RecurrenceCalculatorFactoryBase">
            <summary>
            Provides logic for generating recurrences.
            </summary>
            <remarks>
            <para class="body">
            You can set the <see cref="!:ScheduleDataConnectorBase.RecurrenceCalculatorFactory" /> property to
            provide custom recurrence generation logic.
            </para>
            </remarks>
            
            <seealso cref="T:Infragistics.Controls.Schedules.Services.DateRecurrenceCalculatorBase" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.RecurrenceCalculatorFactoryBase.GetCalculator(Infragistics.Controls.Schedules.Services.RecurrenceInfo)">
            <summary>
            Gets the recurrence calculator for calculating recurring date-time values based on the specified
            recurrence information.
            </summary>
            <param name="info">Contains recurrence information.</param>
            <returns>Calculator that will be used to calculate recurring date-time values.</returns>
            <remarks>
            <para class="body">
            <b>Note</b> that when the recurrence associated with the specified 'info' changes, this method
            will be called again to re-get the calculator.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.RecurrenceInfo">
            <summary>
            Used to pass along recurrence information to the <see cref="M:Infragistics.Controls.Schedules.Services.RecurrenceCalculatorFactoryBase.GetCalculator(Infragistics.Controls.Schedules.Services.RecurrenceInfo)" /> method.
            </summary>
            <remarks>
            <para class="body">
            <b>RecurrenceInfo</b> class is used to pass information to the <see cref="M:Infragistics.Controls.Schedules.Services.RecurrenceCalculatorFactoryBase.GetCalculator(Infragistics.Controls.Schedules.Services.RecurrenceInfo)" /> method.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.DateRecurrence" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.RecurrenceInfo.#ctor(Infragistics.Controls.Schedules.Services.RecurrenceBase,System.DateTime,System.TimeSpan,Infragistics.Controls.Schedules.Services.TimeZoneToken,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="recurrence">Recurrence object.</param>
            <param name="startDateTime">Start of the recurrence. This date-time value is in local time relative to the specified time zone.</param>
            <param name="occurrenceDuration">Each occurrence duration.</param>
            <param name="timeZone">Identifies the time-zone. 'StartDateTime' parameter's value is relative to this time zone.</param>
            <param name="context">Optional context object.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.RecurrenceInfo.Context">
            <summary>
            Optional context object. Can be an <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> instance for example.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.RecurrenceInfo.OccurrenceDuration">
            <summary>
            Duration of each occurrence.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.RecurrenceInfo.Recurrence">
            <summary>
            Gets the recurrence object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.RecurrenceInfo.StartDateTime">
            <summary>
            Gets the start date-time of the recurrence. All the recurrence instances must occur on
            or after this start date-time. The value is relative to the time zone specified by the
            <see cref="P:Infragistics.Controls.Schedules.Services.RecurrenceInfo.TimeZone" /> property.
            </summary>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.RecurrenceInfo.TimeZone" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.RecurrenceInfo.TimeZone">
            <summary>
            Time zone associated with the <see cref="P:Infragistics.Controls.Schedules.Services.RecurrenceInfo.StartDateTime" /> value.
            </summary>
            <remarks>
            <para class="body">
            Recurrences need to be generated using this time-zone.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DateRecurrenceRuleBase">
            <summary>
            Base class for date recurrence rule.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceRuleBase.Equals(System.Object)">
            <summary>
            Overridden. Returns true if the specified object equals this object.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>True if the object equals this object. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DateRecurrenceRuleBase.GetHashCode">
            <summary>
            Overridden. Returns the hash code of this object.
            </summary>
            <returns>Integer hash code value.</returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.MonthOfYearRecurrenceRule">
            <summary>
            Rule that matches a month.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MonthOfYearRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.MonthOfYearRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MonthOfYearRecurrenceRule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.MonthOfYearRecurrenceRule" /> object.
            </summary>
            <param name="month">Identifies the month. Valid values are 1 to 12.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.MonthOfYearRecurrenceRule.Month">
            <summary>
            Gets/sets the month number.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.WeekOfYearRecurrenceRule">
            <summary>
            Rule that matches week number of a year.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WeekOfYearRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.WeekOfYearRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WeekOfYearRecurrenceRule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.WeekOfYearRecurrenceRule" /> object.
            </summary>
            <param name="weekNumber">Identifies the week in the year. Valid values are 1 to 53 and -53 to -1.
            <see cref="P:Infragistics.Controls.Schedules.Services.WeekOfYearRecurrenceRule.WeekNumber" /> for more information.
            </param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.WeekOfYearRecurrenceRule.WeekNumber">
            <summary>
            Gets/sets the number that identifies the week of the year. Valid range of values is 1 to 53 and -53 to -1.
            </summary>
            <remarks>
            <para class="body">
            <b>WeekNumber</b> identifies the week in the year. Valid values are 1 to 53 and -53 to -1. A negative value
            indicates the n'th week to the end of the year where 'n' is the absolute value of the negative value. For example,
            -1 specifies the last week of the year. Likewise -10 specifies the 10th to the last week of the year.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DayOfYearRecurrenceRule">
            <summary>
            Rule that matches day of year.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DayOfYearRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.DayOfYearRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DayOfYearRecurrenceRule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.DayOfYearRecurrenceRule" /> object.
            </summary>
            <param name="dayOfYear">Identifies the day of the year. Valid values are from 1 to 366 and -366 to -1.
            <see cref="P:Infragistics.Controls.Schedules.Services.DayOfYearRecurrenceRule.DayOfYear" /> for more information.
            </param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DayOfYearRecurrenceRule.DayOfYear">
            <summary>
            Gets/sets the day of the year. Valid range of values are 1 to 366 and -366 to -1.
            </summary>
            <remarks>
            <para class="body">
            <b>DayOfYear</b> identifies the day of the year. Valid values are 1 to 366 and -366 to -1. A negative value
            indicates the n'th day to the end of the year where 'n' is the absolute value of the negative value. For example,
            -1 specifies the last day of the year. Likewise -10 specifies the 10th day to the last day the year.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DayOfMonthRecurrenceRule">
            <summary>
            Rule that matches day of month.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DayOfMonthRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.DayOfMonthRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DayOfMonthRecurrenceRule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.DayOfMonthRecurrenceRule" /> object.
            </summary>
            <param name="dayOfMonth">
            Identifies the day of the year. Valid values are from 1 to 31 and -31 to -1.
            <see cref="P:Infragistics.Controls.Schedules.Services.DayOfMonthRecurrenceRule.DayOfMonth" /> for more information.
            </param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DayOfMonthRecurrenceRule.DayOfMonth">
            <summary>
            Gets/sets the day of the month. Valid range of values are 1 to 31 and -31 to -1.
            </summary>
            <remarks>
            <para class="body">
            <b>DayOfMonth</b> identifies the day of the month. Valid values are 1 to 31 and -31 to -1. A negative value
            indicates the n'th day to the end of the month where 'n' is the absolute value of the negative value. For example,
            -1 specifies the last day of the month. Likewise -10 specifies the 10th day to the last day the month.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule">
            <summary>
            Rule that matches day of week or a relative day of week within month or year.
            </summary>
            <remarks>
            <para class="body">
            <b>DayOfWeekRecurrenceRule</b> can be used to specify a day of week or a relative
            day of week within month or year. If the frequency is monthly or if a 
            <see cref="T:Infragistics.Controls.Schedules.Services.MonthOfYearRecurrenceRule" /> is present then the 
            <see cref="P:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule.RelativePosition" /> 
            indentifies the relative position within a month. Otherwise if the 
            frequency of the recurrence is yearly
            then it identifies the relative position within the year. In case of
            monthly, valid values are -5 to -1 and 1 to 5. In case of yearly,
            valid values are -53 to -1 and 1 to 53.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule.#ctor(System.DayOfWeek,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule" /> object.
            </summary>
            <param name="day">Identifies the week day.</param>
            <param name="relativePosition">Optional value that specifies the relative
            position of the day within month or year. If the frequency is monthly or if a 
            <see cref="T:Infragistics.Controls.Schedules.Services.MonthOfYearRecurrenceRule" /> is present then the relative position 
            indentifies the relative position within a month. If frequency is yearly
            then it identifies the relative position within the year. In case of
            monthly, valid values are -5 to -1 and 1 to 5. In case of yearly,
            valid values are -53 to -1 and 1 to 53.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule.Day">
            <summary>
            Gets/sets the week day.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule.RelativePosition">
            <summary>
            Relative position of the occurrence of the week-day within a month or a year. 
            Valid values are 1 to 5 and -5 to -1 for monthly frequency and 1 to 53 and -53 to -1 
            for yearly frequency.
            </summary>
            <remarks>
            <para class="body">
            <b>RelativePosition</b> specifies the relative position of the occurrence of the week-day within a 
            month or a year. Valid values are 1 to 5 and -5 to -1 for monthly rule and 1 to 53 and -53 to -1 for yearly rule. 
            For example, if <see cref="P:Infragistics.Controls.Schedules.Services.DayOfWeekRecurrenceRule.Day" /> is Monday and the <i>RelativePosition</i> is -1, 
            then it specifies the last Monday in the month.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.HourRecurrenceRule">
            <summary>
            Rule that matches hour of day.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.HourRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.HourRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.HourRecurrenceRule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.HourRecurrenceRule" /> object.
            </summary>
            <param name="hour">Specifes the hour. Valid values are 0 to 23.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.HourRecurrenceRule.Hour">
            <summary>
            Gets/sets the hour value. Valid values are 0 to 23.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.MinuteRecurrenceRule">
            <summary>
            Rule that matches minute of hour.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MinuteRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.MinuteRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MinuteRecurrenceRule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.MinuteRecurrenceRule" /> object.
            </summary>
            <param name="minute">Specifes the minute value. Valid values are 0 to 59.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.MinuteRecurrenceRule.Minute">
            <summary>
            Gets/sets the minute value. Valid values are 0 to 59.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.SecondRecurrenceRule">
            <summary>
            Rule that matches second of a minute.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.SecondRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.SecondRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.SecondRecurrenceRule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.SecondRecurrenceRule" /> object.
            </summary>
            <param name="second">Specifes the second value. Valid values are 0 to 59.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.SecondRecurrenceRule.Second">
            <summary>
            Gets/sets the second value. Valid values are 0 to 59.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.SubsetRecurrenceRule">
            <summary>
            Rule that matches a subset of matches within an interval.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.SubsetRecurrenceRule.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.SubsetRecurrenceRule" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.SubsetRecurrenceRule.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.SubsetRecurrenceRule" /> object.
            </summary>
            <param name="occurrenceInstance">
            Specifies the instance of the occurrence within the set of occurrences.
            <see cref="P:Infragistics.Controls.Schedules.Services.SubsetRecurrenceRule.OccurrenceInstance" /> for more information. Valid values are 1 to 366 
            and -366 to -1 where negative values indicate nth to the last.
            </param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.SubsetRecurrenceRule.OccurrenceInstance">
            <summary>
            Identifies the instance of the occurrence within the set of occurrences within the period specified by the 
            <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Frequency" /> and and <see cref="P:Infragistics.Controls.Schedules.Services.DateRecurrence.Interval" /> 
            properties that are generated by all the recurrence rules of the <see cref="T:Infragistics.Controls.Schedules.Services.DateRecurrence" /> that are 
            not SubsetRecurrenceRule's. Valid values are 1 to 366 and -366 to -1 where negative values 
            indicate nth to the last.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.Reminder">
            <summary>
            Contains information regarding the reminder that's displayed when an activity is due.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Reminder.UserData">
            <summary>
            Specifies user data associated with this reminder.
            </summary>
            <remarks>
            <para class="body">
            <b>UserData</b> property's value is not used by the XamSchedule in any way. It's meant
            to allow you to store any piece of data as part of the reminder object so that you can 
            retrieve it later, for example when the reminder is activated. As an example, 
            <i>UserData</i> can be a string that represents an action to take, for example a command
            to execute when the reminder is activated.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Reminder.IsSnoozed">
            <summary>
            Indicates whether the activity is snoozed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Reminder.LastDisplayedTime">
            <summary>
            Indicates the time that the reminder was last displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Reminder.LastSnoozeTime">
            <summary>
            Indicates the time that the reminder was last snoozed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Reminder.SnoozeInterval">
            <summary>
            Indicates the interval after the <see cref="P:Infragistics.Controls.Schedules.Services.Reminder.LastSnoozeTime" /> that the reminder will be re-displayed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Reminder.Text">
            <summary>
            Specifies the text that will be displayed in the reminder.
            </summary>
            <remarks>
            <para class="body">
            <b>Text</b> property specifies the text that will be displayed in the reminder.
            If <i>Text</i> is note set then a default text will be used in the reminder.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ReminderInfo">
            <summary>
            Contains information regarding an invoked reminder.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ReminderInfo.#ctor(Infragistics.Controls.Schedules.Services.Reminder,System.Object)">
            <summary>
            Constructor. Initializes a new instance of <seealso cref="T:Infragistics.Controls.Schedules.Services.ReminderInfo" /> object.
            </summary>
            <param name="reminder">Associated reminder object if any.</param>
            <param name="context">Object associated with the reminder.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ReminderInfo.Context">
            <summary>
            Gets the object if any associated with the reminder.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ReminderInfo.IsDismissed">
            <summary>
            Indicates if the reminder has been dismissed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ReminderInfo.IsSnoozed">
            <summary>
            Indicates if the reminder has been snoozed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ReminderInfo.Reminder">
            <summary>
            Gets the associated <see cref="P:Infragistics.Controls.Schedules.Services.ReminderInfo.Reminder" /> object if any.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that if the <b>Reminder</b> property is null then it will be set to a new <see cref="P:Infragistics.Controls.Schedules.Services.ReminderInfo.Reminder" /> object
            when <see cref="M:Infragistics.Controls.Schedules.Services.ReminderInfo.Snooze(System.DateTime,System.TimeSpan)" /> method is called.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ReminderInfo.Dismiss" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ReminderInfo.Snooze(System.DateTime,System.TimeSpan)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ReminderInfo.Dismiss">
            <summary>
            Dismisses the reminder.
            </summary>
            <remarks>
            <b>Dismiss</b> is called when the user acknowledges the reminder and no longer wants the reminder
            to be displayed.
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ReminderInfo.Snooze(System.DateTime,System.TimeSpan)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ReminderInfo.Snooze(System.DateTime,System.TimeSpan)">
            <summary>
            Snoozes the reminder.
            </summary>
            <param name="snoozeTime">When the reminder was snoozed. This date-time value is in UTC.</param>
            <param name="snoozeInterval">The snooze interval after which to re-display the reminder.</param>
            <remarks>
            <para class="body">
            <b>Snooze</b> method is called when the user wants to be re-reminded after a certain interval of time.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ReminderInfo.Dismiss" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ReminderInfo.EnsureReminderAllocated">
            <summary>
            Allocates a reminder if it hasn't been allocated.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityQuery">
            <summary>
            Represents an activity query.
            </summary>
            <remarks>
            <para class="body">
            <b>ActivityQuery</b> class is used to specify the query criteria when using 
            <see cref="!:XamScheduleDataManager.GetActivities" /> method.
            </para>
            </remarks>
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityQuery.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityQuery.#ctor(Infragistics.Controls.Schedules.Services.ActivityTypes,Infragistics.Services.DateRange,System.Collections.Generic.IEnumerable{Infragistics.Controls.Schedules.Services.Resource})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />.
            </summary>
            <param name="activityTypesToQuery">Types of activities to query.</param>
            <param name="dateRange">Activities within this date range will be queried.</param>
            <param name="resources">Activities belonging to primary calendars of these resources will be queried.
            If null then all activities within the specified date range will be queried.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityQuery.#ctor(Infragistics.Controls.Schedules.Services.ActivityTypes,Infragistics.Services.DateRange,System.Collections.Generic.IEnumerable{Infragistics.Controls.Schedules.Services.ResourceCalendar})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />.
            </summary>
            <param name="activityTypesToQuery">Types of activities to query.</param>
            <param name="dateRange">Activities within this date range will be queried.</param>
            <param name="calendars">Activities belonging to these calendars will be queried.
            If null then all activities within the specified date range will be queried.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityQuery.#ctor(Infragistics.Controls.Schedules.Services.ActivityTypes,Infragistics.Services.DateRange,Infragistics.Controls.Schedules.Services.ResourceCalendar)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />.
            </summary>
            <param name="activityTypesToQuery">Types of activities to query.</param>
            <param name="dateRange">Activities within this date range will be queried.</param>
            <param name="calendar">Activities belonging to this calendar will be queried.
            If null then all activities within the specified date range will be queried.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityQuery.#ctor(Infragistics.Controls.Schedules.Services.ActivityTypes,System.Collections.Generic.IEnumerable{Infragistics.Services.DateRange},System.Collections.Generic.IEnumerable{Infragistics.Controls.Schedules.Services.ResourceCalendar})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />.
            </summary>
            <param name="activityTypesToQuery">Types of activities to query.</param>
            <param name="dateRanges">One or more DateRange objects. Activities within these date ranges will be queried.</param>
            <param name="calendars">Activities belonging to these calendars will be queried.
            If null then all activities within the specified date ranges will be queried.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQuery.ActivityTypesToQuery">
            <summary>
            Specifies which activity types to query for - whether appointments, journals, tasks or a combination of these activity types.
            </summary>
            <remarks>
            <b>ActivityTypesToQuery</b> property specifies what type of activities to get. <b>ActivityTypes</b> enum is a flagged enum
            allowing you to specify a combination of activity types.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQuery.Calendars">
            <summary>
            Specifies the calendars for which to get the activities. If null then activities for
            all the calendars will be returned.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges">
            <summary>
            Specifies one or more date ranges.
            </summary>
            <remarks>
            <para class="body">
            This query will return activities occurring within these date ranges.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQuery.RequestedInformation">
            <summary>
            Specifies the information that's to be queried.
            </summary>
            <remarks>
            <para class="body">
            <b>RequestedInformation</b> property specifies what information to retrieve when the query is performed.
            <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags" /> enum is a flagged enum and therefore you can specify multiple
            pieces of information to be retrieved.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityQuery.Seal">
            <summary>
            Once an activity query has been sealed, it can't be modified.
            </summary>
            <remarks>
            <para class="body">
            <i>ActivityQuery</i> object sealed from further modifications when the query is performed
            and associated with an <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQueryResult" /> object. Any attempt to modify the
            activity query afterwards will result in an InvalidOperationException.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ItemOperationResult`1">
            <summary>
            Result of an operation performed on an item. The operation may be performed asynchronously.
            </summary>	
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ItemOperationResult`1._item">
            <summary>
            The item associated with the operation.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ItemOperationResult`1.#ctor(`0)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ItemOperationResult`1" />.
            </summary>
            <param name="item">Item associated with the operation.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ItemOperationResult`1.#ctor(`0,Infragistics.Services.DataErrorInfo,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ItemOperationResult`1" />.
            </summary>
            <param name="item">Item associated with the operation.</param>
            <param name="errorInfo">Error information if there's an error.</param>
            <param name="markComplete">Whether to mark the operation as complete. Pass false for asynchronous
            operation whose result is going to be available later.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ItemOperationResult`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityOperationResult" />.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ItemOperationResult`1.Item">
            <summary>
            Returns the item associated with the operation.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ItemOperationResult`1.InitializeResult(Infragistics.Services.DataErrorInfo,System.Boolean)">
            <summary>
            Initializes the <see cref="P:Infragistics.Services.OperationResult.Error" /> and <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> properties based on the specified values.
            </summary>
            <param name="error"><see cref="T:Infragistics.Services.DataErrorInfo" /> object if an error occurred, null otherwise.</param>
            <param name="isComplete">Indicates whether the results are complete. Specify false if further results are
            going to be available.</param>
            <remarks>
            <para class="body">
            An operation may be performed asynchronously. When a method that performs an operation is required 
            to return an instance of <i>OperationResult</i> derived class, you can return a new instance 
            and specify the result of the operation later via this method when it's available. While the asynchronous 
            operation is still pending, the <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property will return <i>False</i>. When the 
            result is available, you can call this method and specify 'isComplete' parameter as true to indicate 
            that the operation is complete and that the <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property should be set to true.
            </para>
            <para class="body">
            If an error occurs during the operation, you can call this method with the <see cref="T:Infragistics.Services.DataErrorInfo" /> 
            object containing the error information. Also specifiy true for 'isComplete' since no further action
            will be taken and operation is considered to be complete with an error.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Services.OperationResult.IsComplete" />
            <seealso cref="P:Infragistics.Services.OperationResult.Error" />
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityOperationResult">
            <summary>
            Result of an activity operation that may be performed asynchronously.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityOperationResult.#ctor(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityOperationResult" />.
            </summary>
            <param name="activity">Activity associated with the operation.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityOperationResult.#ctor(Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Services.DataErrorInfo,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityOperationResult" />.
            </summary>
            <param name="activity">Activity associated with the operation.</param>
            <param name="errorInfo">Error information if there's an error.</param>
            <param name="markComplete">Whether to mark the operation as complete. Pass false for asynchronous
            operation whose result is going to be available later.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityOperationResult.#ctor(Infragistics.Controls.Schedules.Services.ActivityBase,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityOperationResult" />.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityOperationResult.Activity">
            <summary>
            Returns the activity associated with the operation.
            </summary>
            <remarks>
            This property returns the same value as the <see cref="P:Infragistics.Controls.Schedules.Services.ItemOperationResult`1.Item" /> property.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceOperationResult">
            <summary>
            Result of a resource operation that may be performed asynchronously.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceOperationResult.#ctor(Infragistics.Controls.Schedules.Services.Resource)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceOperationResult" />.
            </summary>
            <param name="resource">Resource associated with the operation.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceOperationResult.#ctor(Infragistics.Controls.Schedules.Services.Resource,Infragistics.Services.DataErrorInfo,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceOperationResult" />.
            </summary>
            <param name="resource">Resource associated with the operation.</param>
            <param name="errorInfo">Error information if there's an error.</param>
            <param name="markComplete">Whether to mark the operation as complete. Pass false for asynchronous
            operation whose result is going to be available later.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceOperationResult.#ctor(Infragistics.Controls.Schedules.Services.Resource,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceOperationResult" />.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceOperationResult.Resource">
            <summary>
            Returns the resource.
            </summary>
            <remarks>
            This property returns the same value as the <see cref="P:Infragistics.Controls.Schedules.Services.ItemOperationResult`1.Item" /> property.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityQueryResult">
            <summary>
            Represents results of an activity query.
            </summary>
            <remarks>
            <para class="body">
            <b>ActivityQueryResult</b> is returned by the <see cref="!:XamScheduleDataManager.GetActivities" /> method.
            </para>
            </remarks>
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityQueryResult.#ctor(Infragistics.Controls.Schedules.Services.ActivityQuery)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQueryResult" />.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.Activities">
            <summary>
            Returns the collection of activities.
            </summary>
            <remarks>
            <para class="body">
            Returns a read-only collection of activities that are the result of an activity query. 
            The returned collection will be kept upto-date with any changes that occur to the activities. For example,
            when an activity belonging to this collection is removed by the user via the UI or through the data 
            source, the returned collection will be updated and it will raise the necessary change notification.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.HasNextActivity">
            <summary>
            Indicates whether there's an activity after the latest date in the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> of the query.
            Property's value is valid only if this information was requested by the associated activity query and the 
            information is available.
            </summary>
            <remarks>
            <para class="body">
            <b>HasNextActivity</b> property returns <i>true</i> to indicate that an activity exists after the latest date in 
            the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> of the associated <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" /> object. Likewise
            it returns <i>false</i> to indicate that no such activity exists. It returns <i>null</i> if the information is
            not available, which could be because ActivityQuery's <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.RequestedInformation" /> flags didn't
            contain the <see cref="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.HasNextActivity" /> flag, or the underlying data connector
            doesn't support being able to query for this information.
            </para>
            <para class="body">
            This information is used by schedule controls to provide navigation user interface for navigating to the next
            activity that occurs after the currently displayed activities.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.NextActivity" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.HasPreviousActivity" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.HasPreviousActivity">
            <summary>
            Indicates whether there's an activity before the earliest date in the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> of the query.
            Property's value is valid only if this information was requested by the associated activity query and the 
            information is available.
            </summary>
            <remarks>
            <para class="body">
            <b>HasPreviousActivity</b> property returns <i>true</i> to indicate that an activity exists before the earliest date in 
            the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> of the associated <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" /> object. Likewise
            it returns <i>false</i> to indicate that no such activity exists. It returns <i>null</i> if the information is
            not available, which could be because ActivityQuery's <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.RequestedInformation" /> flags didn't
            contain the <see cref="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.HasPreviousActivity" /> flag, or the underlying data connector
            doesn't support being able to query for this information.
            </para>
            <para class="body">
            This information is used by schedule controls to provide navigation user interface for navigating to the previous
            activity that occurs before the currently displayed activities.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.NextActivity" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.HasPreviousActivity" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.NextActivity">
            <summary>
            Returns the activity that occurs after the latest date in the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> of the query.
            Property's value is valid only if this information was requested by the associated activity query and the 
            information is available.
            </summary>
            <remarks>
            <para class="body">
            <b>NextActivity</b> property returns the next activity that exists after the latest date in 
            the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> of the associated <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" /> object. 
            It returns <i>null</i> if no such activity exists or that the information is not available, 
            which could be because ActivityQuery's 
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.RequestedInformation" /> flags didn't contain the 
            <see cref="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.NextActivity" /> flag, or the underlying data connector
            doesn't support being able to query for this information. You can check to see if the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.HasNextActivity" />
            property returns false to ascertain that such an activity doesn't exist.
            </para>
            <para class="body">
            This information is used by schedule controls to provide navigation user interface for navigating to the next
            activity that occurs after the currently displayed activities.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.HasNextActivity" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.PreviousActivity" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.PreviousActivity">
            <summary>
            Returns the activity that occurs before the earliest date in the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> of the query.
            Property's value is valid only if this information was requested by the associated activity query and the 
            information is available.
            </summary>
            <remarks>
            <para class="body">
            <b>PreviousActivity</b> property returns the previous activity that occurs before the earliest date in 
            the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> of the associated <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" /> object. 
            It returns <i>null</i> if no such activity exists or that the information is not available, 
            which could be because ActivityQuery's 
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.RequestedInformation" /> flags didn't contain the 
            <see cref="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.PreviousActivity" /> flag, or the underlying data connector
            doesn't support being able to query for this information. You can check to see if the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.HasPreviousActivity" />
            property returns false to ascertain that such an activity doesn't exist.
            </para>
            <para class="body">
            This information is used by schedule controls to provide navigation user interface for navigating to the previous
            activity that occurs before the currently displayed activities.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.HasNextActivity" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.PreviousActivity" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.Query">
            <summary>
            Gets the query that resulted in this ActivityQueryResult object.
            </summary>
            <remarks>
            <para class="body">
            <b>Query</b> property returns the instance of the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" /> object
            that was used to obtain this <i>ActivityQueryResult</i> instance. <b>Note</b> however
            that modifying this query object will not change the <i>ActivityQueryResult</i> to
            reflect those modifications. It's only for information reference purposes.
            </para>
            </remarks>
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityQueryResult.InitializeResult(Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags,System.Collections.Generic.IList{Infragistics.Controls.Schedules.Services.ActivityBase},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Services.DataErrorInfo,System.Boolean)">
            <summary>
            Initializes the the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.Activities" /> and sets <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property based on the the 'markCompleted' parameter.
            </summary>
            <param name="informationBeingProvided">Which information is being provided with this call.</param>
            <param name="activities">The activities. Can be null if an error occurred in which case 'error' parameter must be specified.</param>
            <param name="hasPreviousActivity">Whether there's an activity prior to the earliest of the dates in the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" />.</param>
            <param name="hasNextActivity">Whether there's an activity after to the latest of the dates in the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" />.</param>
            <param name="previousActivity">The latest activity prior to the earliest of the dates in the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" />.</param>
            <param name="nextActivity">The earliest activity after to the latest of the dates in the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" />.</param>
            <param name="error"><see cref="T:Infragistics.Services.DataErrorInfo" /> object if an error occurred, null otherwise.</param>
            <param name="isComplete">Indicates whether the results are complete. Specify fals if further results are
            going to be available.</param>
            <remarks>
            <para class="body">
            Activity queries can be executed asynchronously. When a query method is required to return an instance of 
            <i>ActivityQueryResult</i>, you can return a new instance and specify the results of the query later via
            this method. While the asynchronous query operation is still pending, the <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property
            will return <i>False</i>. When the results are available, you can call this method with the results and 
            specify 'isComplete' parameter as true to indicate that the query operation is complete and that the
            <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property should be set to true. If only a partial set of results are available and
            the query operation is still being executed, you can still call this method to provide with the partial
            results however with 'markCompleted' parameter as false to indicate that the results are partial. Once
            the results are fully available, you can call this method again (you can pass the same or a different activities 
            list instance that you passed in previously) and specify 'markCompleted' parameter accordingly.
            The UI objects utilizing the <i>ActivityQueryResult</i> may use IsComplete property to indicate to the end user
            that the results are being loaded.
            </para>
            <para class="body">
            If an error occurs during query operation, you can call this method with the <see cref="T:Infragistics.Services.DataErrorInfo" /> 
            object containing the error information. You may specify 'null' for the activities parameter.
            Also specifiy true for 'isComplete' since no further action will be taken and operation is 
            considered to be complete with an error.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityQueryResult.Activities" />
            <seealso cref="P:Infragistics.Services.OperationResult.IsComplete" />
            <seealso cref="P:Infragistics.Services.OperationResult.Error" />
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.OccurrenceManager`1._map">
            <summary>
            Contains occurrences, including variances.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.OccurrenceManager`1._variances">
            <summary>
            Contains variances.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.OccurrenceManager`1._latestNonFutureOccurrenceTimes">
            <summary>
            Used to cache the start time of the next occurrence in the series that's due for reminder. Keys are root activities.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.#ctor(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,Infragistics.Controls.Schedules.Services.ActivityItemManager{`0},Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.Info)">
            <summary>
            Constructor.
            </summary>
            <param name="connector">Schedule data connector.</param>
            <param name="mainViewItemManager">Item manager that keeps track of root activities and variances.</param>
            <param name="propsInfo">Properties information for <typeparamref name="TActivity" /> class.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.GetRootActivity(System.Object)">
            <summary>
            Gets the root activity with the specified id.
            </summary>
            <param name="id">Root activity id.</param>
            <returns>If a root activity by the specified id is found, returns it. Otherwise returns null.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.GetRecurrenceCalculator(Infragistics.Controls.Schedules.Services.RecurrenceInfo)">
            <summary>
            Gets the recurrence calculator for the specified recurrence information.
            </summary>
            <param name="info">Contains recurrence information.</param>
            <returns>Calculator for calculating occurrences.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.GetRecurrenceCalculator(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Gets the recurrence calculator for the specified root activity.
            </summary>
            <param name="root">Root activity.</param>
            <returns>Calculator for calculating occurrences.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.CreateViewItem(System.Object)">
            <summary>
            Creates or gets a cached occurrence instance for the specified dataItem which must be an OccurrenceId instance.
            </summary>
            <param name="dataItem">An OccurrenceId instance.</param>
            <returns>The occurrence activity.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.GetOccurrenceThatsDueForReminder(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Gets the start time of the next occurrence that's due for reminder.
            </summary>
            <param name="root">Root activity that defines the series.</param>
            <returns>The start time of the next occurrence in the series that's due for reminder.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.InitializeReminderEnabled(Infragistics.Controls.Schedules.Services.ActivityBase,Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Initializes the ReminderEnabled property of the specified occurrence based on root
            activity's Reminder.LastDisplayedTime and if that's not available then based on the
            latest occurrence in the series that's overdue for the reminder.
            </summary>
            <param name="activity">Occurrence activity.</param>
            <param name="root">Root activity.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.CreateOccurrenceId(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Creates an OccurrenceId object using the the RootActivity and the OriginalStartTime/OriginalEndTime 
            values of the specified occurrence.
            </summary>
            <param name="activity">Occurrence activity.</param>
            <returns>OccurrenceId instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.GetOccurrences(Infragistics.Controls.Schedules.Services.ActivityBase,System.Boolean)">
            <summary>
            Gets occurrences, including variances that have been created and are still active (haven't been garbage collected).
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OccurrenceManager`1.RegisterVariance(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Registers the specified variance.
            </summary>
            <param name="activity">Variance activity.</param>
            <returns>
            If the variance is valid, returns the occurrence id for it. If the variance is 
            invalid, which can be if the root activity has been deleted or its recurrence rules 
            modified so the variance is considered to be stale or invalid, then returns null.
            </returns>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AggregateOccurrenceIdCollection`1._source">
            <summary>
            Contains root activities and variances.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AggregateOccurrenceIdCollection`1._collectionMap">
            <summary>
            Map that keeps track of root activity and their occurrences that are to be included in this occurrence id collection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AggregateOccurrenceIdCollection`1._collectionList">
            <summary>
            All the collections that are aggregated by this aggragate collection. It contains occurrence collections for all the
            root activities and their variances as well (that intersect the date range criteria of this aggregate collection).
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.AggregateOccurrenceIdCollection`1._varianceList">
            <summary>
            Contains variances that belong to this collection, of all the root activities.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.AggregateOccurrenceIdCollection`1.ProcessActivity(Infragistics.Controls.Schedules.Services.ActivityBase,System.Boolean,System.Int32)">
            <summary>
            Adds or removes the activity which can be a recurring activity or a variance.
            </summary>
            <param name="ii">Activity</param>
            <param name="remove">If true then removes the activity otherwise adds it.</param>
            <param name="phase">Phase 1 will only add variances and skip recurring activities 
            and phase 2 will add only recurring activities and skip variances.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityCategoryCollection">
            <summary>
            Used by the <see cref="T:Infragistics.Controls.Schedules.Services.Resource" />'s <see cref="P:Infragistics.Controls.Schedules.Services.Resource.CustomActivityCategories" /> property.
            </summary>
            <remarks>
            <para class="body">
            ActivityCategoryCollection is a collection of activity categories.
            Resource's <see cref="P:Infragistics.Controls.Schedules.Services.Resource.CustomActivityCategories" /> property is of this type.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.Resource.CustomActivityCategories" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityCategoryCollection.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategoryCollection" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityCategoryCollection.FindMatchingItem(System.String)">
            <summary>
            Finds the ActivityCategory in the collection with the specified category name.
            </summary>
            <param name="categoryName">Category name to search.</param>
            <returns>If a match is found returns the matching ActivityCategory object, otherwise null.</returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection">
            <summary>
            Collection of <see cref="T:Infragistics.Controls.Schedules.Services.DaySettingsOverride" /> objects.
            </summary>
            <remarks>
            <b>DaySettingsOverrideCollection</b> is used by the <see cref="!:ScheduleSettings" />'s <see cref="!:ScheduleSettings.DaySettingsOverrides" />
            and <see cref="T:Infragistics.Controls.Schedules.Services.Resource" />'s <see cref="P:Infragistics.Controls.Schedules.Services.Resource.DaySettingsOverrides" /> properties.
            </remarks>
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.Resource.DaySettingsOverrides" />
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection" />.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection.FromXml(System.String)">
            <summary>
            Converts the specified xml to an instance of DaySettingsOverrideCollection.
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection.ToXml(Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection.ToXml(Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection)">
            <summary>
            Converts the specified DaySettingsOverrideCollection to its XML representation.
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection.FromXml(System.String)" />
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceCalendarCollection">
            <summary>
            Collection of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> objects.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCalendarCollection.#ctor(System.Collections.IEnumerable,Infragistics.Services.IViewItemFactory{Infragistics.Controls.Schedules.Services.ResourceCalendar},System.Func{Infragistics.Collections.Services.ViewList{Infragistics.Controls.Schedules.Services.ResourceCalendar},System.Collections.IEnumerable})">
            <summary>
            Constructor.
            </summary>
            <param name="source">Data source list.</param>
            <param name="itemFactory">Item factory used for creating new ResourceCalendar instances as well as getting/setting their data items.</param>
            <param name="preverifyCallback">Called before the view list is verified.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceCollection">
            <summary>
            Collection of <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> objects.
            </summary>
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCollection.#ctor(System.Collections.IEnumerable,Infragistics.Services.IViewItemFactory{Infragistics.Controls.Schedules.Services.Resource},System.Func{Infragistics.Collections.Services.ViewList{Infragistics.Controls.Schedules.Services.Resource},System.Collections.IEnumerable})">
            <summary>
            Constructor.
            </summary>
            <param name="source">Data source list.</param>
            <param name="itemFactory">Item factory used for creating new Resource instances as well as getting/setting their data items.</param>
            <param name="preverifyCallback">Called before the view list is verified.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCollection.#ctor(System.Collections.Generic.IEnumerable{Infragistics.Controls.Schedules.Services.Resource})">
            <summary>
            Constructor. Creates a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCollection" />.
            </summary>
            <param name="source">Source collection of resources. Any modifications made to the source
            will be reflected by this collection.</param>
            <remarks>
            <para class="body">
            <b>Note</b> that the <i>ResourceCollection</i> is a read-only collection. Any modifications made to 
            the source collection are reflected by this collection, assuming the source collection implements 
            INotifyCollectionChanged interface.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCollection.GetResourceFromId(System.String)">
            <summary>
            Gets the resource with the specified id. Returns null if none exists.
            </summary>
            <param name="id">Resource id.</param>
            <returns>Matching Resource object or null if no matching resource is found.</returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.WorkingHoursCollection">
            <summary>
            Collection used for specifying working hours.
            </summary>
            <remarks>
            <para class="body">
            <b>WorkingHoursCollection</b> class is a collection of <see cref="T:Infragistics.Services.TimeRange" /> instances. It's used for specifying working hours.
            </para>
            </remarks>
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.DaySettings.WorkingHours" />
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.Resource.DaysOfWeek" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.WorkingHoursCollection" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.#ctor(Infragistics.Services.TimeRange)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.WorkingHoursCollection" /> object.
            </summary>
            <param name="item">This item will be added to the collection.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.#ctor(System.Collections.Generic.IEnumerable{Infragistics.Services.TimeRange})">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.WorkingHoursCollection" /> object.
            </summary>
            <param name="workHours">These items will be added to the collection.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.NotifyItemsChanged">
            <summary>
            Returns a boolean indicating whether the derived collection should have its <see cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemAdded(`0)" /> and <see cref="M:Infragistics.Collections.Services.ObservableCollectionExtended`1.OnItemRemoved(`0)" /> methods invoked.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.OnItemAdding(Infragistics.Services.TimeRange)">
            <summary>
            Overridden. Validates the specified time range instance to ensure that it's start time and end time are valid.
            </summary>
            <param name="item">TimeRange instance to validate.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.OnItemRemoving(Infragistics.Services.TimeRange)">
            <summary>
            Invoked when an item is about to be removed if the <see cref="P:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.NotifyItemsChanged" /> returns true.
            </summary>
            <param name="item">The item that is being removed.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.DefaultWorkingHours">
            <summary>
            Returns default working hours from 9:00 AM to 5:00 PM.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.Add(System.TimeSpan,System.TimeSpan)">
            <summary>
            Adds a new TimeRange instance based on the specified values.
            </summary>
            <param name="start">Start time of the time range.</param>
            <param name="end">End time of the time range.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.GetConsolidatedRanges">
            <summary>
            Used to obtain a collection of the sorted, consolidated time ranges within the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.WorkingHoursCollection.ValidateState(Infragistics.Services.TimeRange)">
            <summary>
            Ensures that the working hours don't span over more than 24 hours.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.CalendarColorScheme">
            <summary>
            Handles coordination of CalendarBrushCaches for ResourceCalendars.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CalendarColorScheme.#ctor">
            <summary>
            Creates a new instance of the CalendarColorScheme class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.BaseColors">
            <summary>
            Returns a read-only collection of the base colors that are supported.
            </summary>
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.CalendarColorScheme.BrushVersionPropertyKey">
            <summary>
            Identifies the property key for read-only <see cref="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.BrushVersion" /> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.CalendarColorScheme.BrushVersionProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.BrushVersion" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.BrushVersion">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.CalendarColorScheme.DefaultBrushProviderPropertyKey">
            <summary>
            Identifies the property key for read-only <see cref="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.DefaultBrushProvider" /> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.CalendarColorScheme.DefaultBrushProviderProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.DefaultBrushProvider" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.DefaultBrushProvider">
            <summary>
            Returns the default provider. (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.DialogResources">
            <summary>
            Returns a collection of resources to be merged into the dialogs (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note</b>:</para> it is the responsiblity of the <see cref="!:XamScheduleDataManager.DialogFactory" /> to make use of these resources.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.CalendarColorScheme.IsHighContrastPropertyKey">
            <summary>
            Identifies the property key for read-only <see cref="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.IsHighContrast" /> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.CalendarColorScheme.IsHighContrastProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.IsHighContrast" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.IsHighContrast">
            <summary>
            Gets whether controls should be rendered in high contrast based on the current system settings (read-only).
            </summary>
            <remarks>The conditions to determine this are consistent with Office2007 and Office2010.</remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.DefaultBaseColor">
            <summary>
            Returns the base color to use for the default provider.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.ScrollBarStyle">
            <summary>
            Returns a scrollbar style or null (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CalendarColorScheme.IsHighContrastStatic">
            <summary>
            Gets whether the system should render controls with high contrast.
            </summary>
            <remarks>The conditions to determine this are consistant with Office2007.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CalendarColorScheme.InvalidateBrushCache">
            <summary>
            Clears all cached brushes and bumps the BrushVersion property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CalendarColorScheme.CreateDialogResources">
            <summary>
            Creates a ResourceDictionary that contains resources to be used by the dialogs
            </summary>
            <returns>A ResourceDictionary or null. The default implmentation returns null.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CalendarColorScheme.OnSystemColorsChanged">
            <summary>
            Called when the system colors have changed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CalendarColorScheme.VerifyDialogResources">
            <summary>
            Makes sure that the dialog resources dictonary is polpulated correctly
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: this method is always called from the get of DialogResources property. This gives derived classes an opportunity to update the contents before a dialog is shown.</para>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DaySettings">
            <summary>
            Used for specifying settings for a specific day.
            </summary>
            <remarks>
            <para class="body">
            <b>DaySettings</b> class is used for specifying settings like the working hours or visibility of a specific day. 
            <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> exposes <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.DaySettings" /> property. <i>ScheduleDayOfWeek</i>
            objects are accessed via the <i>ScheduleSettings'</i> <see cref="!:ScheduleSettings.DaysOfWeek" /> collection.
            <see cref="T:Infragistics.Controls.Schedules.Services.DaySettingsOverride" /> also exposes <see cref="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.DaySettings" /> property. 
            <i>DaySettingsOverride</i> is specified using the <i>ScheduleSettings'</i> <see cref="!:ScheduleSettings.DaySettingsOverrides" />
            collection.
            </para>
            </remarks>
            
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DaySettings.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.Services.DaySettings" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DaySettings.IsWorkdayProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.DaySettings.IsWorkday" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DaySettings.IsWorkday">
            <summary>
            Specifies whether this day of week is a work day.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DaySettings.WorkingHoursProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.DaySettings.WorkingHours" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DaySettings.WorkingHours">
            <summary>
            Specifies the working hours for the day of week. Default value is <b>null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>WorkingHours</b> is used to specify different working hours for the day this DaySettings object
            is associated with. If this property is left <b>null</b> or set to an empty collection then the 
            working hours will be resolved to the next settings object in the resolution hierarchy.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DaySettings.PropChangeListeners">
            <summary>
            Gets collection of property change listeners.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DaySettings.OnPropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for settings properties.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.DaySettingsOverride">
            <summary>
            Used for specifying settings for a specific date or a recurring date.
            </summary>
            <remarks>
            <para class="body">
            If you need to specify some settings for a specific day in the year, or some recurring date
            then you can use the <see cref="!:ScheduleSettings" />' <see cref="!:ScheduleSettings.DaySettingsOverrides" />
            collection to add a <b>DaySettingsOverride</b> instance that contains the day settings for that day
            or recurring date.
            </para>
            <para class="body">
            You can also specify DaySettingsOverrides for a specific resource using Resource' 
            <see cref="P:Infragistics.Controls.Schedules.Services.Resource.DaySettingsOverrides" /> collection.
            </para>
            </remarks>
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.Resource.DaySettingsOverrides" />
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DaySettingsOverride.DateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.Date" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.Date">
            <summary>
            Specifies the date. The date is always considered to be relative to the local time-zone.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DaySettingsOverride.DaySettingsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.DaySettings" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.DaySettings">
            <summary>
            Specifies the DaySettings object.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.DaySettingsOverride.RecurrenceProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.Recurrence" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.Recurrence">
            <summary>
            Specifies the date recurrence. If Recurrence is specified then <see cref="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.Date" /> property's value
            is used as the start time for the recurrence.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that if the date of the first instance of the recurrence is different than the 
            <i>Date</i> property's value, the <i>Date</i> property is also used for matching.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.DaySettingsOverride.PropChangeListeners">
            <summary>
            Gets collection of property change listeners.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DaySettingsOverride.OnPropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for settings properties.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek">
            <summary>
            Used for specifying settings for a specific day of week.
            </summary>
            <remarks>
            <para class="body">
            XamScheduleDataManager exposes <see cref="!:ScheduleSettings.DaysOfWeek" /> collection that
            contains seven <b>ScheduleDayOfWeek</b> instances for each of the seven days of week. You can
            specify settings, like the description or the working hours, for a specific week day using that
            collection.
            </para>
            </remarks>
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" />.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.DaySettingsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.DaySettings" /> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.DaySettings">
            <summary>
            Specifies the day settings for this day of week.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.PropChangeListeners">
            <summary>
            Gets collection of property change listeners.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.OnPropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed callback for settings properties.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.FromXml(System.String)">
            <summary>
            Converts the specified xml to an instance of ScheduleDayOfWeek.
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.ToXml(Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.ToXml(Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek)">
            <summary>
            Converts the specified ScheduleDayOfWeek to its XML representation.
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek.FromXml(System.String)" />
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek">
            <summary>
            Contains <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> objects for the seven days of week. Each <i>ScheduleDayOfWeek</i> 
            object is used to specify settings for the corresponding day of week.
            </summary>
            <remarks>
            <para class="body">
            <b>ScheduleDaysOfWeek</b> exposes properties for each day of week: <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Monday" />,
            <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Tuesday" />, <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Wednesday" />, 
            <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Thursday" />, <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Friday" />, 
            <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Saturday" /> and <see cref="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Sunday" />.
            It's used by the ScheduleSettings' <see cref="!:ScheduleSettings.DaysOfWeek" /> property.
            </para>
            <para class="body">
            You can specifiy settings, like whether the day is a work-day and what the working hours are
            using the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object returned by the property of this object corresponding 
            to that day.
            </para>
            </remarks>
            
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek" /> class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Item(System.DayOfWeek)">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object for the specified day of week. Default value is <b>Null</b>.
            </summary>
            <param name="dayOfWeek">Day of week.</param>
            <returns>Gets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object for the specified day of week. If one hasn't been set previously, returns <b>Null</b>.
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Monday">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> instance for Monday. Default value is <b>Null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the default value of this property is <b>Null</b>. In order to specifiy the settings
            for this day, create a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object and set this property to it.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Tuesday">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> instance for Tuesday. Default value is <b>Null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the default value of this property is <b>Null</b>. In order to specifiy the settings
            for this day, create a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object and set this property to it.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Wednesday">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> instance for Wednesday. Default value is <b>Null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the default value of this property is <b>Null</b>. In order to specifiy the settings
            for this day, create a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object and set this property to it.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Thursday">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> instance for Thursday. Default value is <b>Null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the default value of this property is <b>Null</b>. In order to specifiy the settings
            for this day, create a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object and set this property to it.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Friday">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> instance for Friday. Default value is <b>Null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the default value of this property is <b>Null</b>. In order to specifiy the settings
            for this day, create a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object and set this property to it.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Saturday">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> instance for Saturday. Default value is <b>Null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the default value of this property is <b>Null</b>. In order to specifiy the settings
            for this day, create a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object and set this property to it.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.Sunday">
            <summary>
            Gets or sets the <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> instance for Sunday. Default value is <b>Null</b>.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the default value of this property is <b>Null</b>. In order to specifiy the settings
            for this day, create a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ScheduleDayOfWeek" /> object and set this property to it.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.FromXml(System.String)">
            <summary>
            Converts the specified xml to an instance of ScheduleDaysOfWeek.
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.ToXml(Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.ToXml(Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek)">
            <summary>
            Converts the specified ScheduleDaysOfWeek to its XML representation. This is the format that
            the XamSchedule uses to serialize out ScheduleDaysOfWeek instance into an underlying data item
            that provides a string type property mapping.
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.FromXml(System.String)" />
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider">
            <summary>
            A class used to load custom time zone information for date time conversions to and from utc date times.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.#ctor">
            <summary>
            Creates a  new instnace of a <see cref="T:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider" />
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.LocalTimeZoneIdResolved">
            <summary>
            Returns the id for the local time zone (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: if <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalTimeZoneId" /> is set its value will be returned. If it is not set an attempt will be made to deduce it.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.UtcToken">
            <summary>
            Returns the token that represents the UTC time zone
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.BumpVersion">
            <summary>
            Should be called whenever any time zone information has changed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.ClearCachedValues">
            <summary>
            Clears any values that have been cached so they can be re-created when needed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.ConvertTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Converts a DateTime from one time zone to another
            </summary>
            <param name="source">The time zone of the passed in date time.</param>
            <param name="destination">The time zone to convert the date time to.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.ConvertTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Converts a DateTime from one time zone to another
            </summary>
            <param name="source">The time zone of the passed in date time.</param>
            <param name="destination">The time zone to convert the date time to.</param>
            <param name="dateTimeOffset">The date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetAdjustmentRules(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns an array of adjustment rules for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetAmbiguousTimeOffsets(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Gets the ambiguous time offsets for a time when a daylight time transition is occuring
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <exception cref="T:System.ArgumentException">If DateTime is not ambiguous.</exception>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetAmbiguousTimeOffsets(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Gets the ambiguous time offsets for a time when a daylight time transition is occuring
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <exception cref="T:System.ArgumentException">If DateTime is not ambiguous.</exception>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetBaseUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the base offset to utc time (when not in daylight saving time)
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>A TimeSpan with the UTC offset.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetDaylightName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetDisplayName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetExportId(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the export id for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>The export id or null.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetStandardName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetTimeZoneDefinitions">
            <summary>
            Returns a read-only collection of <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition" /> objects
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Returns the offset to convert a date time to Utc time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The specific date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.GetUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Returns the offset to convert a date time offset to Utc time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The specific date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is ambiguous, i.e. it is within a daylight time transition
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Determines if a DateTime is ambiguous, i.e. it is within a daylight time transition
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.IsDaylightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is within a daylight savings adjustment period
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.IsDaylightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Determines if a DateTime is within a daylight savings adjustment period
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.IsInvalidTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is invalid
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.IsValidTimeZoneId(System.String)">
            <summary>
            Determines if a string is a valid time zone id
            </summary>
            <param name="id">The id to verify.</param>
            <returns>True if the id is valid, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.SupportsDayLightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns true if the time zone supports daylight savings time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>True if the time zone supports daylight savings time, otherwise false.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.UtcTimeZoneId">
            <summary>
            Returns or sets the id for the Utc time zone
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.BeginUpdate">
            <summary>
            Suspends bumping the <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.Version" /> property until <see cref="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.EndUpdate" /> is called.
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: every call to <b>BeginUpdate</b> must be paired with a subsequewnt call to <see cref="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.EndUpdate" /></para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.Version" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.EndUpdate" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.EndUpdate">
            <summary>
            Restores the bumping of the <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.Version" /> property.
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: every call to <see cref="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.BeginUpdate" /> must be paired with a subsequewnt call to <b>EndUpdate</b></para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.Version" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.BeginUpdate" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.LoadFromXml(System.String)">
            <summary>
            Loads all the time zone definition information from an xml string
            </summary>
            <param name="xml">A string containing the xml</param>
            <returns>True is succesful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.LoadFromXml(System.String,System.Boolean)">
            <summary>
            Loads all the time zone definition information from an xml string
            </summary>
            <param name="xml">A string containing the xml</param>
            <param name="includeDisplayNames">Determines if time zone display names will be de-serialized from the xml.</param>
            <returns>True is succesful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider.RegisterCustomTimeZone(System.String,System.String,System.TimeSpan,System.String,System.String,System.String,System.Boolean,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule[])">
            <summary>
            Registers a custom time zone
            </summary>
            <param name="id">The id of the time zone.</param>
            <param name="exportId">The export id</param>
            <param name="baseUtcOffset">The offset from UTC to use when not in daylight savings time.</param>
            <param name="dayLightName">The name of the time zone in daylight savings time</param>
            <param name="displayName">The display name of the time zone</param>
            <param name="standardName">The name of the time zone in standard time</param>
            <param name="supportsDaylightSavingsTime">Whether this time zone supports daylight savings.</param>
            <param name="adjustmentRules">The adjustment rules for daylight savings</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider">
            <summary>
            A class used to provide time zone information for date time conversions to and from utc date times from the information provided by the Windows OS.
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: this class is only available in WPF. In Silverlight a custom class should be derived from <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider" /> or an instance of the <see cref="T:Infragistics.Controls.Schedules.Services.CustomTimeZoneInfoProvider" /> should be used.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.#ctor">
            <summary>
            Creates a  new instnace of a <see cref="T:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider" />
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.LocalTimeZoneIdResolved">
            <summary>
            Returns the id for the local time zone (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: if <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalTimeZoneId" /> is set its value will be returned. If it is not then the sytem local time zone id will be returned.</para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.UseOsDisplayNamesProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.UseOsDisplayNames" /> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.UseOsDisplayNames">
            <summary>
            Returns or sets whether to use the system display names for time zones
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.UseOsDisplayNamesProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.UtcToken">
            <summary>
            Returns the token that represents the UTC time zone
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.ClearCachedValues">
            <summary>
            Clears any values that have been cached so they can be re-created when needed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.ConvertTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Converts a DateTime from one time zone to another
            </summary>
            <param name="source">The time zone of the passed in date time.</param>
            <param name="destination">The time zone to convert the date time to.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.ConvertTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Converts a DateTime from one time zone to another
            </summary>
            <param name="source">The time zone of the passed in date time.</param>
            <param name="destination">The time zone to convert the date time to.</param>
            <param name="dateTimeOffset">The date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetAdjustmentRules(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns an array of adjustment rules for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetAmbiguousTimeOffsets(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Gets the ambiguous time offsets for a time when a daylight time transition is occuring
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <exception cref="T:System.ArgumentException">If DateTime is not ambiguous.</exception>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetAmbiguousTimeOffsets(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Gets the ambiguous time offsets for a time when a daylight time transition is occuring
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <exception cref="T:System.ArgumentException">If DateTime is not ambiguous.</exception>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetBaseUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the base offset to utc time (when not in daylight saving time)
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>A TimeSpan with the UTC offset.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetDaylightName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetDisplayName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetExportId(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the export id for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>The export id or null.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetStandardName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetTimeZoneDefinitions">
            <summary>
            Returns a read-only collection of <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition" /> objects
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Returns the offset to convert a date time to Utc time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The specific date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.GetUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Returns the offset to convert a date time offset to Utc time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The specific date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is ambiguous, i.e. it is within a daylight time transition
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Determines if a DateTime is ambiguous, i.e. it is within a daylight time transition
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.IsDaylightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is within a daylight savings adjustment period
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.IsDaylightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Determines if a DateTime is within a daylight savings adjustment period
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The date time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.IsInvalidTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is invalid
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The date time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.IsValidTimeZoneId(System.String)">
            <summary>
            Determines if a string is a valid time zone id
            </summary>
            <param name="id">The id to verify.</param>
            <returns>True if the id is valid, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.SupportsDayLightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns true if the time zone supports daylight savings time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>True if the time zone supports daylight savings time, otherwise false.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.OSTimeZoneInfoProvider.ExportIdMap">
            <summary>
            Returns a dictionary that contains windows time zone ids as keys and the associated export ids as values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider">
            <summary>
            Abstract base class used to provide time zone information for dateTime time conversions to and from utc dateTime times.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneInformationSerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a TimeZoneInformation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition">
            <summary>
            A class that represents a specific time zone
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition.AdjustmentRules">
            <summary>
            Returns a read-only collection of adjustmentRules that determine when daylight savings offsets are active.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition.BaseUtcOffset">
            <summary>
            Returns the base offset from UTC time (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition.DaylightName">
            <summary>
            Returns the name of this time zone when in daylight savings time (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition.DisplayName">
            <summary>
            Returns the string to use when displaying this time zone (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition.ExportId">
            <summary>
            Returns the identifier to use this time zone when exporting from the ICalendar format. (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition.Id">
            <summary>
            Returns the identifier for the time zone (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition.StandardName">
            <summary>
            Returns the name of this time zone when not in daylight savings time (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition.SupportsDaylightSavingsTime">
            <summary>
            Returns true is this time zone supports daylight savings time (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinitionSerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a TimeZoneDefinition.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule">
            <summary>
            A class that describes the rule for when to transition into and out of daylight savings time
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.Create(System.DateTime,System.DateTime,System.TimeSpan,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime)">
            <summary>
            Creates and returns an instance of a TimeAdjustmentRule
            </summary>
            <param name="start">The start of the dateTime range where this tt is in force.</param>
            <param name="end">The end of the dateTime range where this tt is in force.</param>
            <param name="delta">The time adjustment to apply between the transition start and end while this tt is in force.</param>
            <param name="transitionStart">The start dateTime tt that idenifies when to transition to the adjusted time.</param>
            <param name="transitionEnd">The end dateTime tt that idenifies when to transition back to standard time.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.Equals(System.Object)">
            <summary>
            Returns true if the object is equilavent to this
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.GetHashCode">
            <summary>
            Returns a code to use for hashing
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.op_Equality(Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule" /> structures for equality
            </summary>
            <param name="rule1">The first structure</param>
            <param name="rule2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.op_Inequality(Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule" /> structures for inequality
            </summary>
            <param name="rule1">The first structure</param>
            <param name="rule2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.Delta">
            <summary>
            Returns the time adjustment to apply between the transition start and end while this tt is in force. (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.End">
            <summary>
            Returns the end of the dateTime range where this tt is in force (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.Start">
            <summary>
            Returns the start of the dateTime range where this tt is in force (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.TransitionEnd">
            <summary>
            Returns the end dateTime tt that idenifies when to transition back to standard time. (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.TransitionStart">
            <summary>
            Returns the start dateTime tt that idenifies when to transition to the adjusted time. (read-only)
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule.Equals(Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule)">
            <summary>
            Returns true if both objects are equal
            </summary>
            <param name="other">The other object</param>
            <returns>Ture if equal, otherwise false</returns>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRuleSerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a TimeAdjustmentRule.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime">
            <summary>
            Represents a tt for transitioning to or from daylight savings times
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.CreateFixedDateTransitionTime(System.Byte,System.Byte,System.DateTime)">
            <summary>
            A static menthod that creates and returns a transition time that occurs on the same dateTime every year.
            </summary>
            <param name="day">A number between 1 and 31</param>
            <param name="month">A number between 1 and 12</param>
            <param name="timeOfDay">The time that the transition takes place.</param>
            <returns>The newly created instance of a <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime" /></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.CreateFloatingDateTransitionTime(System.Byte,System.Byte,System.DayOfWeek,System.DateTime)">
            <summary>
            A static menthod that creates and returns a transition time that occurs on a different dateTime every year based on day of week and a relative week number.
            </summary>
            <param name="week">A number between 1 and 5</param>
            <param name="month">A number between 1 and 12</param>
            <param name="dayOfWeek">An enumeration that identifies a specific day from 'Sunday' thru 'Saturday'.</param>
            <param name="timeOfDay">The time that the transition takes place.</param>
            <returns>The newly created instance of a <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime" /></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Equals(System.Object)">
            <summary>
            Returns true if the object is equilavent to this
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.GetHashCode">
            <summary>
            Returns a code to use for hashing
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.op_Equality(Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime" /> structures for equality
            </summary>
            <param name="transition1">The first structure</param>
            <param name="transition2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.op_Inequality(Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime" /> structures for inequality
            </summary>
            <param name="transition1">The first structure</param>
            <param name="transition2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Day">
            <summary>
            Returns the day of the month (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: the day number is ignored if <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.IsFixedDate" /> is false.</para>
            </remarks>
            <value>A number from 1 to 31</value>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.DayOfWeek">
            <summary>
            Returns the day of the week (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: the day of the week is ignored if <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.IsFixedDate" /> is true.</para>
            </remarks>
            <value>An enumeration from 'Sunday' thru "Saturday'</value>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.IsFixedDate">
            <summary>
            Returns whether the transition occurs on a speciic day number (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: if this is true then <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Day" /> is used and <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Week" /> and <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.DayOfWeek" /> are ignored. Otherwise, Day is ignored and Week and DayOfWeek are used.</para>
            </remarks>
            <value>True to use <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Day" /> or false to use <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Week" /> and <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.DayOfWeek" />.</value>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Month">
            <summary>
            Returns the month of the year (read-only)
            </summary>
            <value>A number from 1 to 12</value>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.TimeOfDay">
            <summary>
            Returns the time of day when the transition wil take place (read-only)
            </summary>
            <value>A datetime that contains only hours, minutes and seconds</value>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Week">
            <summary>
            Returns the week number relative to the month (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: the week number is ignored if <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.IsFixedDate" /> is true.</para>
            </remarks>
            <value>A number from 1 to 5</value>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime.Equals(Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTime)">
            <summary>
            Returns true if the object is equilavent to this
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TransitionTimeSerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a TransitionTime.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider" /> derived class
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.DefaultProvider">
            <summary>
            Returns a static instance of a TimeZoneInfoProvider pre-loaded with default time zone information 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalTimeZoneIdProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalTimeZoneId" /> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalTimeZoneId">
            <summary>
            Returns or sets the Id for the local time zone
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalTimeZoneIdProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalTimeZoneIdResolved">
            <summary>
            Returns the id for the local time zone (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: if <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalTimeZoneId" /> is set its value will be returned. If it is not set an attempt will be made to deduce it.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.LocalToken">
            <summary>
            Returns the token that represents the local time zone
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneTokens">
            <summary>
            Returns a read-only collection of time zone tokens
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.UtcToken">
            <summary>
            Returns the token that represents the UTC time zone
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.VersionProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.Version" /> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.Version">
            <summary>
            Returns a version number that gets bumped when any change is made that affects time zone information
            </summary>
            <seealso cref="F:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.VersionProperty" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.Tokens">
            <summary>
            Returns a collection of tokens.
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: it is the repsonsibility of the derived classes to maintain this collection</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.PropChangeListeners">
            <summary>
            Gets collection of property change listeners.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.ClearCachedValues">
            <summary>
            Clears any values that have been cached so they can be re-created when needed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.ConvertLocalToUtc(System.DateTime)">
            <summary>
            Converts the specified local time to universal time.
            </summary>
            <param name="dateTime">The local datetime to convert</param>
            <returns>The universal datetime</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.ConvertTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Converts a DateTime from one time zone to another
            </summary>
            <param name="source">The time zone of the passed in dateTime time.</param>
            <param name="destination">The time zone to convert the dateTime time to.</param>
            <param name="dateTime">The dateTime time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.ConvertTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Converts a DateTime from one time zone to another
            </summary>
            <param name="source">The time zone of the passed in dateTime time.</param>
            <param name="destination">The time zone to convert the dateTime time to.</param>
            <param name="dateTimeOffset">The dateTime time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.ConvertUtcToLocal(System.DateTime)">
            <summary>
            Converts the specified universal time to local time.
            </summary>
            <param name="dateTime">The universal datetime to convert</param>
            <returns>The local datetime</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetAdjustmentRules(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns an array of adjustment rules for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetAmbiguousTimeOffsets(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Gets the ambiguous time offsets for a time when a daylight time transition is occuring
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The dateTime time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <exception cref="T:System.ArgumentException">If DateTime is not ambiguous.</exception>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetAmbiguousTimeOffsets(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Gets the ambiguous time offsets for a time when a daylight time transition is occuring
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The dateTime time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <exception cref="T:System.ArgumentException">If DateTime is not ambiguous.</exception>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetBaseUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the base offset to utc time (when not in daylight saving time)
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>A TimeSpan with the UTC offset.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetDaylightName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetDisplayName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetExportId(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the export id for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>The export id or null.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetStandardName(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the display name for the time zone
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)">
            <summary>
            Returns the <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneToken" /> for the time zone
            </summary>
            <param name="id">A string that identifies a specific time zone</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Returns the offset to convert a dateTime time to Utc time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The specific dateTime time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetUtcOffset(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Returns the offset to convert a dateTime time offset to Utc time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The specific dateTime time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is ambiguous, i.e. it is within a daylight time transition
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The dateTime time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsAmbiguousTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Determines if a DateTime is ambiguous, i.e. it is within a daylight time transition
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The dateTime time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsDaylightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is within a daylight savings adjustment period
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The dateTime time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsDaylightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTimeOffset)">
            <summary>
            Determines if a DateTime is within a daylight savings adjustment period
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTimeOffset">The dateTime time and offset</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsInvalidTime(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Determines if a DateTime is invalid
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <param name="dateTime">The dateTime time</param>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsValidTimeZoneId(System.String)">
            <summary>
            Determines if a string is a valid time zone id
            </summary>
            <param name="id">The id to verify.</param>
            <returns>True if the id is valid, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.SaveToXml">
            <summary>
            Saves all the time zone definition information as xml
            </summary>
            <returns>A string containing the saved xml</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.SaveToXml(System.Boolean)">
            <summary>
            Saves all the time zone definition information as xml
            </summary>
            <param name="includeDisplayNames">Determines if time zone display names will be included in the xml.</param>
            <returns>A string containing the saved xml</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.SupportsDayLightSavingsTime(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns true if the time zone supports daylight savings time
            </summary>
            <param name="token">An object that represents a specific time zone.</param>
            <returns>True if the time zone supports daylight savings time, otherwise false.</returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TryGetTimeZoneToken(System.String,Infragistics.Controls.Schedules.Services.TimeZoneToken@)">
            <summary>
            Tries to get the <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneToken" /> for the time zone safely
            </summary>
            <param name="id">A string that identifies a specific time zone</param>
            <param name="token">An out parameter which will be set to the associated token.</param>
            <returns>True if the id was valid and the token was set, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.BumpVersion">
            <summary>
            Should be called whenever any time zone information has changed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.ConvertTime(System.DateTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Converts a DateTime from one time zone to another
            </summary>
            <param name="dateTime">The source date time</param>
            <param name="sourceTimeZone">The source time zone</param>
            <param name="destinationTimeZone">The destination time zone.</param>
            <returns>The DateTime in the destination time zone.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.CreateTimeZoneDefinition(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.String,System.TimeSpan,System.String,System.String,System.String,System.Boolean,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeAdjustmentRule[])">
            <summary>
            Creates and returns an instance of a <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition" /> 
            </summary>
            <param name="token">The token that represents the time zone.</param>
            <param name="exportId">The export id</param>
            <param name="baseUtcOffset">The offset from UTC to use when not in daylight savings time.</param>
            <param name="dayLightName">The name of the time zone in daylight savings time</param>
            <param name="displayName">The display name of the time zone</param>
            <param name="standardName">The name of the time zone in standard time</param>
            <param name="supportsDaylightSavingsTime">Whether this time zone supports daylight savings.</param>
            <param name="adjustmentRules">The adjustment rules for daylight savings</param>
            <returns>The new instance of a <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition" /> </returns>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.CreateToken(System.String)">
            <summary>
            Creates an returns a <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneToken" />
            </summary>
            <param name="id">The id of the time zone.</param>
            <returns>A token representing the specified id</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetAmbiguousTimeOffsets(System.DateTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Gets the ambiguous time offsets for a time when a daylight time transition is occuring
            </summary>
            <param name="dateTime">The date time and offset</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetAmbiguousTimeOffsets(System.DateTimeOffset,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Gets the ambiguous time offsets for a time when a daylight time transition is occuring
            </summary>
            <param name="dateTimeOffset">The date time and offset</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneDefinitions">
            <summary>
            Returns a read-only collection of <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition" /> objects
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String,System.Boolean)">
            <summary>
            Returns the <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneToken" /> for the time zone
            </summary>
            <param name="id">A string that identifies a specific time zone</param>
            <param name="verifyIdIsValid">True to make sure the id is already defined.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetUtcOffset(System.DateTimeOffset,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Gets the Utc offset for a specific date time 
            </summary>
            <param name="dateTimeOffset">The specific date time</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
            <returns>The offset from Utc time that applies to this date time</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetUtcOffsetForDateTime(System.DateTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Gets the Utc offset for a specific date time 
            </summary>
            <param name="dateTime">The specific date time</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
            <returns>The offset from Utc time that applies to this date time</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsAmbiguous(System.DateTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Returns whether a time is ambiguous, i.e. it it at a daylight savings transition
            </summary>
            <param name="dateTime">The specific date time</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsAmbiguous(System.DateTimeOffset,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Returns whether a time is ambiguous, i.e. it it at a daylight savings transition
            </summary>
            <param name="dateTimeOffset">The specific date time</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsDaylightSavingsTime(System.DateTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Determines if a DateTime is within a daylight savings adjustment period
            </summary>
            <param name="dateTime">The specific date time</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsDaylightSavingsTime(System.DateTimeOffset,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Determines if a DateTime is within a daylight savings adjustment period
            </summary>
            <param name="dateTimeOffset">The specific date time</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.IsInvalidTime(System.DateTime,Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.TimeZoneDefinition)">
            <summary>
            Determines if a DateTime is invalid
            </summary>
            <param name="dateTime">The date time</param>
            <param name="timeZoneDef">The time zone the date time is relative to</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.TimeZoneToken">
            <summary>
            A class that represents a specific time zone
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneToken.Id">
            <summary>
            A string that identifiies the time zone (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneToken.DisplayName">
            <summary>
            A string used to represent this time zone is the ui (read-only) 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.TimeZoneToken.Provider">
            <summary>
            Returns the <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider" /> that created the token (read-only) 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneToken.ConvertFromLocal(System.DateTime)">
            <summary>
            Converts the specified time from the Local token for the associated provider to the timezone identified by this token instance.
            </summary>
            <param name="dateTime">DateTime to convert. This is assumed to be an unspecified time relative to the Local timezone of the associated provider</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneToken.ConvertFromUtc(System.DateTime)">
            <summary>
            Converts the specified time from the Utc token for the associated provider to the timezone identified by this token instance.
            </summary>
            <param name="dateTime">DateTime to convert. This is assumed to be an unspecified time relative to the Utc timezone of the associated provider</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneToken.ConvertToLocal(System.DateTime)">
            <summary>
            Converts the specified time from the timezone identified by this token instance to the Local token for the associated provider.
            </summary>
            <param name="dateTime">DateTime to convert. This is assumed to be an unspecified time relative to this timezone</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.TimeZoneToken.ConvertToUtc(System.DateTime)">
            <summary>
            Converts the specified time from the timezone identified by this token instance to the Utc token for the associated provider.
            </summary>
            <param name="dateTime">DateTime to convert. This is assumed to be an unspecified time relative to this timezone</param>
            <returns></returns>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ConverterInfo._targetValueType">
            <summary>
            Type of the converted values. Used as the target type for the Convert method.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ValueGetter.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Schedules.Services.ValueGetter.Value" /> dependency property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.WeakAction`1">
            <summary>
            A class used to specify a parameterless action without rooting the object where the action is
            to be performed. Creating a pointer to an instance method and holding onto it roots the object
            containing the instance method. If you want to not root the object, then use this class to
            create a parameterless action that delegates to a static parametered action that you provide,
            where the parameter is the object instance which is kept using weak reference.
            For example, new DeferredOperation( WeakAction.Create( obj, parameteredAction ) ).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.MetadataPropertyValueStore">
            <summary>
            Used to store extra field values.
            </summary>
            <remarks>
            <para class="body">
            You can use the <b>Metadata</b> to store and later retrieve information. The information is stored in
            properties of your data items as specified in the <see cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />.
            For example, the metadata property mappings is specified using the <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection" />'s
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
            property. Each property defined in the mapping collection has a corresponding entry in the returned MetadataPropertyValueStore.
            Its indexer is used to retrieve or set the the property's value. Furthermore, you can use bindings to
            bind to a specific value in the returned object.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />
            <seealso cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Metadata" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.Resource.Metadata" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.Metadata" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.MetadataPropertyValueStore.Item(System.String)">
            <summary>
            Gets or sets the value.
            </summary>
            <param name="key">Key associated with the value.</param>
            <returns>Gets the value for the specified key or null if the value doesn't exist for the key.</returns>
            <remarks>
            <para class="body">
            <b>NOTE:</b> If the underlying metadata field mapping doesn't exist for the specified 'key' then an exception is thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MetadataPropertyValueStore.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Stores the specified entry's Value using the entry's Key as the key.
            </summary>
            <param name="entry">Contains 'key' and 'value'.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MetadataPropertyValueStore.GetEnumerator">
            <summary>
            Returns the enumerator to enumerate values of the store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MetadataPropertyValueStore.GetValue(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">String that identifies the key.</param>
            <returns>Value associated with the key. If no such value exists, returns null.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MetadataPropertyValueStore.HasValue(System.String)">
            <summary>
            Indicates if the value for the specified key is available or non-empty.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MetadataPropertyValueStore.SetValue(System.String,System.Object)">
            <summary>
            Sets the specified value for the speicifed key.
            </summary>
            <param name="key">String that identifies the key.</param>
            <param name="value">Value to associate with the key.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.DictionaryMetadataPropertyValueStore.HasValue(System.String)">
            <summary>
            Indicates if the value for the specified key is available or non-empty.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.AntiRecursionList.Enter(System.Object)">
            <summary>
            Returns true if the item was not previously entered. Returns false and takes no 
            actions if the item was previously entered. An item can only be entered once.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.Index`2.#ctor(System.Collections.Generic.IList{`0},System.Converter{`0,`1},System.Collections.Generic.IComparer{`1},System.Action{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Constructor.
            </summary>
            <param name="items">Items to be indexed.</param>
            <param name="keyGetter">Gets the key value from an item.</param>
            <param name="keyComparer">Comparer used for comparing key values.</param>
            <param name="itemsChangedCallback">If specified, it's invoked when a collection change notification is 
            recieved from the items list, after the index has been modified to reflect the change.</param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.Index`2.GetAnyMatchingItem(`1)">
            <summary>
            Gets any matching item. If a single matching item exists, returns that. If multiple matching
            items exist then this method may return any one of them.
            </summary>
            <param name="key">The key value.</param>
            <returns>Matching item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.Index`2.GetMatchingItems(`1)">
            <summary>
            Gets all the matching items.
            </summary>
            <param name="key">The key value.</param>
            <returns>All the matching items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MetadataStore`1.EntryInfo.#ctor(Infragistics.Controls.Schedules.Services.MetadataStore{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MetadataStore`1.ScheduleMetadataPropertyValueStore.HasValue(System.String)">
            <summary>
            Indicates if the value for the specified key is available or non-empty.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.MetadataStore`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.XmlDeserializerConverter.#ctor(System.Type,Infragistics.Services.ObjectSerializer)">
            <summary>
            Constructor.
            </summary>
            <param name="valueType">Type of the object that will be serialized.</param>
            <param name="serializer">Serializer to use to convert the object to XML and parse it back.</param>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._xmlValueStore">
            <summary>
            This is where the XML as string is stored.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._xmlNeedUpdating">
            <summary>
            When an individual property value is set, we need to update the XML. However we don't want to do it
            right away so we'll keep track of items whose XML value needs to be updated.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._xmlUpdateList">
            <summary>
            This is a list of items that need to have their XML synchronized with the property values.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._updateXmlOperation">
            <summary>
            The operation used to asynchronously update XML.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._propertyValuesNeedUpdating">
            <summary>
            When we get a notification from the data source indicating that the field where the XML is stored
            has changed, we need to parse it and update individual property values. This keeps track of such
            items where the property values need to be updated.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._xmlValueListener">
            <summary>
            Listener for xml value property store.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._propertyValueListener">
            <summary>
            Listner for property value stores.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._inUpdateXmlValue">
            <summary>
            Used to make sure we don't synchronize property values to XML when we are the one updating the XML value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._inUpdatePropertyValues">
            <summary>
            Used to make sure we don't synchronize XML to property values when we are in the process of synchronizing property values to XML.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._serializer">
            <summary>
            Used to save and parse XML.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1._storesMap">
            <summary>
            This is where individual values from the XML are cached. This is because we don't want to 
            parse the XML every time a value is retrieved or re-create XML every time a value is set.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.XmlDictionaryStorage`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityBase">
            <summary>
            Base class for activity classes, like <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" />, <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> or <see cref="T:Infragistics.Controls.Schedules.Services.Task" />.
            </summary>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Appointment" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Journal" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Task" />
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.Recurrence">
            <summary>
            Applies to recurring activities, but not occurrences and variances of a 
            recurring activity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.RootActivityId">
            <summary>
            Applies to occurrences and variances - indicates the root template id.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.OriginalOccurrenceStart">
            <summary>
            Applies to occurrences and variances - indicates the date-time value 
            as generated by the recurrence.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.Info._varianceDataProps">
            <summary>
            Change in the value of one or more of these properties will make an occurrence a variance.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.Info._rootSynchronizedVarianceDataProps">
            <summary>
            These properties are synchornized with the root activity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.Info._uiCopyActivityExcptionProps">
            <summary>
            These properties are not copied when an activity is copied in the UI (fro example via drag 
            and drop). Copying has to go through CreateNew, EndEdit calls however when the data from
            the original is copied, the following properties are not copied over.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.Info._variantPropertyFlags">
            <summary>
            This map's key is the prop key and value is the flag used in the VariantProperties value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityBase.StorageProps.Info._sr">
            <summary>
            Delegate used to get the storage instance from an activity.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.ActivityType">
            <summary>
            Gets the ActivityType of this activity.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Categories">
            <summary>
            Specifies categories associated with this activity as a comma separated list of category id's.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.DataItem">
            <summary>
            Gets the underlying data item if any.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Description">
            <summary>
            Gets or sets the text associated with this activity.
            </summary>
            <remarks>
            <para class="body">
            While the <b>Subject</b> property is a short summary or title of the activity, the <b>Description</b> property 
            is the full text of the activity.
            </para>
            </remarks>
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Subject" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Duration">
            <summary>
            Gets the duration of the activity.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.End">
            <summary>
            Specifies the time in <b>UTC</b> when the activity ends.
            </summary>
            <remarks>
            <para class="body">
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> and <b>End</b> properties specify the time of the activity in <b>UTC</b>.
            You can use the <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)" /> and <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)" /> methods to get
            the time relative to a specific time-zone. Also there are <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" /> and
            <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" /> methods that can be used to specify activity times that are relative
            to a specific time-zone.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.EndTimeZoneId">
            <summary>
            The time-zone id associated with the activity. The <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> and <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> times are always in UTC.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Error">
            <summary>
            Gets or sets the error if any associated with the activity.
            </summary>
            <remarks>
            <para class="body">
            When there's an activity specific error, for example an attempt to update an activity
            with invalid data results in an error, <b>Error</b> property will be set to a 
            <see cref="T:Infragistics.Services.DataErrorInfo" /> object containing the error information.
            </para>
            <para class="body">
            You can set the <i>Error</i> to a new <i>DataErrorInfo</i> object or set it to 
            <i>null</i> to clear an existing error. The <i>Error</i> is cleared automatically by
            when the user performs another operation on the activity that succeeds.
            </para>
            <para class="body">
            <b>Note</b> that the <i>XamScheduleDataManager</i>'s <see cref="!:XamScheduleDataManager.Error" />
            event is raised whenever there's an error, including activity errors. You can hook into
            that event if you want to get notified of when an error occurs.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Services.DataErrorInfo" />
            
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Id">
            <summary>
            Gets or sets the appointment Id.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsLocked">
            <summary>
            Specifies whether the activity can be modified in the UI.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsOccurrence">
            <summary>
            Returns true if the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> is an occurrence of a recurring <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> (read only).
            </summary>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivity" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsRecurrenceRoot" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVariance" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsOccurrenceDeleted">
            <summary>
            Gets or sets a value indicating whether the occurrence has been deleted.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that simply setting this property to true will not delete the occurrence.
            Use the <see cref="!:XamScheduleDataManager.Remove" /> method to remove an occurrence.
            Also note that the underlying occurrence will be made into a variance which will
            be stored in the data source. This is so the the recurring activity knows not to
            generate the occurrence the next time the application is run.
            </para>
            <para class="body">
            <b>IsOccurrenceDeleted</b> property's setter is meant to be called by a schedule data
            connector implementation to specifiy that this occurrence has been deleted when the 
            activity is retrieved from the data source.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsRecurrenceRoot">
            <summary>
            Returns true if the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> is a recurring <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> with a define set of <see cref="T:Infragistics.Controls.Schedules.Services.RecurrenceBase" /> rules (read only).
            </summary>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivity" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsOccurrence" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsTimeZoneNeutral">
            <summary>
            Specifies whether the activitiy's times are time-zone neutral or "floating".
            </summary>
            <remarks>
            <para class="body">
            Certain activities have start and end times that are time-zone neutral. Holidays are an example of that
            where a holiday starts at a certain time, let's say 12:00 AM, in every time-zone. Likewise you can have 
            activities that are time-zone neutral as well. Such activities start at the same numerical time value
            in any time-zone, and thus the actual UTC times when the activity starts will vary across time-zones.
            </para>
            <para class="body">
            When an activity is time-zone neutral, the values of <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> and <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> properties
            are time-zone neutral times that are interpreted as local times.
            </para>
            </remarks>
            
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVariance">
            <summary>
            Gets or sets a value indicating if the activity is a variance of an occurrence.
            </summary>
            <remarks>
            <para class="body">
            When an occurrence of a recurring activity is modified, it becomes a 'variance'. Essentially it's
            a modified occurrence. Any modifications, including modifications to Start, End, Subject etc...
            cause the occurrence to be a variance.
            </para>
            <para class="body">
            <see cref="!:ListScheduleDataConnector" /> stores variances in the underlying data source list where
            recurring activities are stored. Note that to programatically modify an occurrence and make it into
            a variance and store it into the data source, you must call <see cref="!:XamScheduleDataManager.BeginEdit(ActivityBase, out DataErrorInfo)" /> 
            and <see cref="!:XamScheduleDataManager.EndEdit(ActivityBase, bool)" /> methods.
            </para>
            <para class="body">
            <b>Note</b> that <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsOccurrence" /> property will return true for variances as well.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsOccurrence" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVisible">
            <summary>
            Gets or sets whether the activity is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVisibleResolved">
            <summary>
            Gets the resolved value indicating whether the activity is visible.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that this property doesn't indicate whether the activity is presently visible in the UI.
            It indicates whether the activity will be displayed in the UI when the containing date range is displayed
            in a schedule control.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsVisible" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.LastModifiedTime">
            <summary>
            Gets or sets the time in UTC when the activity was last modified.
            </summary>
            <remarks>
            <para class="body">
            <b>LastModifiedTime</b> property indicates the last time the activity was modified.
            This property is updated when the activity changes are committed via 
            <see cref="!:XamScheduleDataManager.EndEdit(ActivityBase, bool)" /> method. The property's value is not 
            updated as you set other properties on the activity.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.MaxOccurrenceDateTime">
            <summary>
            A date-time value that's equal or greater than the date-time of the last occurrence of 
            the recurring activity.
            </summary>
            <remarks>
            <para class="body">
            <b>MaxOccurrenceDateTime</b> field is used to optimize retrieval of recurring activities by
            excluding recurring activities whose date ranges as defined by the <i>Start</i> and 
            <i>MaxOccurrenceDateTime</i> field values do not intersect with the date range for which 
            activities are being retrieved.
            </para>
            <para class="body">
            In the absense of <b>MaxOccurrenceDateTime</b> value, recurring activities are assumed to
            potentially recur forever and thus subject to evaluation when retrieving activities for
            a date range.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Metadata">
            <summary>
            Returns a MetadataPropertyValueStore object that's used for storing and retrieving metadata information.
            </summary>
            <remarks>
            <para class="body">
            You can use the <b>Metadata</b> to store and later retrieve information. The information is stored in
            properties of your data items as specified in the <see cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />.
            For example, the metadata property mappings is specified using the <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection" />'s
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
            property. Each property defined in the mapping collection has a corresponding entry in the returned MetadataPropertyValueStore.
            It's indexer is used to retrieve or set the the property's value. Furthermore, you can use bindings to
            bind to a specific value in the returned object.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />
            <seealso cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceEnd">
            <summary>
            Only applies to occurrences of a recurring activity. Specifies the original date-time as it was generated
            by the recurrence.
            </summary>
            <remarks>
            <para class="body">
            On a non-variance occurrence, this property returns the same value as <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> 
            property. On a variance of an occurrence, this property returns the original date-time as it was generated
            by the recurrence and the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> property returns the actual date-time of the activity.
            <b>Note:</b> On an activity that's not an occurrence of a recurring activity, this property returns null.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceStart">
            <summary>
            Only applies to occurrences of a recurring activity. Specifies the original date-time as it was generated
            by the recurrence.
            </summary>
            <remarks>
            <para class="body">
            On a non-variance occurrence, this property returns the same value as <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> 
            property. On a variance of an occurrence, this property returns the original date-time as it was generated
            by the recurrence and the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> property returns the actual date-time of the activity.
            <b>Note:</b> On an activity that's not an occurrence of a recurring activity, this property returns null.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningCalendar">
            <summary>
            Gets or sets the calendar to which this activity belongs.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningCalendarId">
            <summary>
            Gets or sets the id of the calendar to which this activity belongs.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningResource">
            <summary>
            Gets or sets the owning resource.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.OwningResourceId">
            <summary>
            Gets or sets the owning resource id.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Recurrence">
            <summary>
            Specifies recurrence rules.
            </summary>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.DateRecurrence" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.RecurrenceVersion">
            <summary>
            Specifies the recurrence version.
            </summary>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.DateRecurrence" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderEnabled">
            <summary>
            Specifies whether the activitiy's reminder is enabled. Default value is <b>false</b>.
            </summary>
            <remarks>
            <para class="body">
            If the reminder is enabled, and when it's displayed, if the user acknowledges the 
            reminder, this property is set to <b>false</b>. This effectively prevents the reminder 
            from being displayed again.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderInterval" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderInterval">
            <summary>
            Specifies the reminder interval.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that you need to set the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderEnabled" /> to <b>true</b> to enable the reminder.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderEnabled" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Reminder" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Reminder">
            <summary>
            Specifies the reminder information. Default value is null.
            </summary>
            <remarks>
            <b>Reminder</b> property is used to specify reminder information. If it's not specified
            then the property returns null, in which case default reminder text will be used in the
            reminder dialog.
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.ReminderInterval" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivity">
            <summary>
            Gets the root activity. Only valid if this activity is an occurrence or a variance of a recurring activity.
            </summary>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivity" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivityId">
            <summary>
            If this activity is an occurrence or a variance of a recurring activity, gets the id of the recurring activity.
            </summary>
            <remarks>
            <para class="body">
            <b>RootActivityId</b> property returns the id of the root recurring activity. This property is only applicable
            to occurrence or a variance of a recurring activity. It returns null for other activities.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivity" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start">
            <summary>
            Specifies the time in <b>UTC</b> when the activity starts.
            </summary>
            <remarks>
            <para class="body">
            <b>Start</b> and <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> properties specify the time of the activity in <b>UTC</b>.
            You can use the <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)" /> and <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)" /> methods to get
            the time relative to a specific time-zone. Also there are <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" /> and
            <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" /> methods that can be used to specify activity times that are relative
            to a specific time-zone.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" />
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.StartTimeZoneId">
            <summary>
            The time-zone id associated with the activity. The <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> and <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> field values are 
            always in UTC.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> and <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> field values are always in UTC. <i>StartTimeZoneId</i>
            and <i>EndTimeZoneId</i> values simply give the activity the context of the time-zone to the activity.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.Subject">
            <summary>
            Gets or sets the subject associated with this activity.
            </summary>
            <remarks>
            <para class="body">
            The <b>Subject</b> property specifies a short summary or title of the activity. The <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Description" /> 
            property specifies the full text of the activity.
            </para>
            </remarks>
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Description" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.VariantProperties">
            <summary>
            Properties of a variance that have been modified and thus will not be synchronized with the root activity.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.BeginEditData">
            <summary>
            Returns the data that was stored when BeginEdit was called.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsEditCopy">
            <summary>
            Returns true if this is a clone of an activity for edit purposes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.IsInitializing">
            <summary>
            Returns true if this is activity is being initialized via <see cref="M:Infragistics.Controls.Schedules.Services.ActivityBase.Initialize(Infragistics.Controls.Schedules.Services.IScheduleDataConnector,Infragistics.Services.IPropertyStorage{Infragistics.Controls.Schedules.Services.ActivityBase,System.Int32})" /> call.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityBase.PendingOperation">
            <summary>
            Returns any pending operation on the activity.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> relative to the specified <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneToken" />
            </summary>
            <param name="token">The timezone token that identifies the timezone for which the relative date is being requested.</param>
            <returns>Returns the local time for the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> relative to the timezone specified by the <paramref name="token" />.</returns>
            
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> relative to the specified <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneToken" />
            </summary>
            <param name="token">The timezone token that identifies the timezone for which the relative date is being requested.</param>
            <returns>Returns the local time for the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> relative to the timezone specified by the <paramref name="token" />.</returns>
            
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetEndLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Returns the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> relative to the specified <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneToken" />
            </summary>
            <param name="token">The timezone token that identifies the timezone for which the relative date is being requested.</param>
            <param name="dateTime">The time relative to the timezone specified by the <paramref name="token" /> that will be used to calculate the UTC value for the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /></param>
            <returns>Returns the local time for the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> relative to the timezone specified by the <paramref name="token" />.</returns>
            
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.SetStartLocal(Infragistics.Controls.Schedules.Services.TimeZoneToken,System.DateTime)">
            <summary>
            Returns the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> relative to the specified <see cref="T:Infragistics.Controls.Schedules.Services.TimeZoneToken" />
            </summary>
            <param name="token">The timezone token that identifies the timezone for which the relative date is being requested.</param>
            <param name="dateTime">The time relative to the timezone specified by the <paramref name="token" /> that will be used to calculate the UTC value for the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /></param>
            <returns>Returns the local time for the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> relative to the timezone specified by the <paramref name="token" />.</returns>
            
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.InitializeFrom(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            This method is called after a clone operation to allow derived classes the
            ability to copy state over to the cloned activity
            </summary>
            <param name="source">The source activity.</param>
            <remarks>
            <para class="note"><b>Note:</b> the base class implemenation does nothing. When this method is called the 
            base state of the cloned activity has already been initialized.</para>
            </remarks>
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetEditCopy(System.Boolean,System.Boolean)">
            <summary>
            Gets the clone of this activity for an editing purposes.
            </summary>
            <param name="allocateIfNecessary"></param>
            <param name="synchronizeChangesFromOriginalActivity"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetEndUtc(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" /> in UTC.
            </summary>
            <param name="token">Identifies the local time zone.</param>
            <returns>Returns the UTC time for the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" />.</returns>
            
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.GetStartUtc(Infragistics.Controls.Schedules.Services.TimeZoneToken)">
            <summary>
            Returns the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" /> in UTC.
            </summary>
            <param name="token">Identifies the local time zone.</param>
            <returns>Returns the UTC time for the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Start" />.</returns>
            
            <seealso cref="M:Infragistics.Controls.Schedules.Services.TimeZoneInfoProvider.GetTimeZoneToken(System.String)" />
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.End" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.HasVariantDataFromBeginEditData">
            <summary>
            Returns true if the the data of this activity is different from begin edit data for properties that are
            subject to making an occurrence a variance.
            </summary>
            <returns>True if any property's value is different from the original value when BeginEdit was called, for
            all properties that are taken into account when determining whether an activity should be made a variance
            of an occurrence.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.IsDataDifferentFromBeginEditData(System.Boolean)">
            <summary>
            Returns true if the the data of this activity is different from begin edit data.
            </summary>
            <param name="skipStateProps">If true skip state related properties like Error, PendingOperation etc... and only compare actual data properties.</param>
            <returns>True if data is different. False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.InitializeRootActivity(Infragistics.Controls.Schedules.Services.ActivityBase,System.DateTime)">
            <summary>
            Initializes the root activity of an occurrence instance.
            </summary>
            <param name="rootActivity">Root recurring activity.</param>
            <param name="occurrenceStart">Original date-time of the occurrence.</param>
            <remarks>
            <para class="body">
            <b>InitializeRootActivity</b> method is called by the data connector to initialize
            the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivity" /> reference on an occurrence of a recurring activity.
            This method also sets the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivityId" /> to the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Id" />
            of the specified root activity. It also sets the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.OriginalOccurrenceStart" />
            property to the specified 'occurrenceStart' value. <b>Note</b> that 
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.RootActivity" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.UpdateLastModifiedTime">
            <summary>
            Sets the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.LastModifiedTime" /> to current time in UTC.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityBase.CopyToHelper(Infragistics.Controls.Schedules.Services.ActivityBase,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies activity data from this activity to the specified 'dest' activity.
            </summary>
            <param name="dest">Destination activity to which to copy data.</param>
            <param name="copyId">Specifies whether to copy the id.</param>
            <param name="retainNonEmptyValuesInDest">True to keep non-empty values in the 'dest'. False to
            overwrite them with the values from the source.</param>
            <param name="makingCopyThroughUI">Specifiy true to indicate that the activity's data is being copied to a new activity
            that will be committed to the backend. For example, when the user copys an existing activity to make a new activity.
            This will except certain properties from being copied, like Id, RootActivityId among others.
            Specifiy false to indicate that the copying is being done for the purposes of storing activity data for
            later reference.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityCategory">
            <summary>
            Represents an activity category.
            </summary>
            <remarks>
            <para class="body">
            Activity categories lets users categorize activities. Activities will be rendered
            using an appearance that is based on the category associated with the activity. This allows the user 
            to quickly identify activities that belong to a specific category.
            </para>
            <para class="body">
            Also note that an activity can be associated with multiple categories. An activity's <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Categories" />
            property returns the categories that have been assigned to it. Categories are referenced by the string assigned to its <see cref="P:Infragistics.Controls.Schedules.Services.ActivityCategory.CategoryName" /> property. The <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Categories" />
            property of the activity returns a string that contains the comma separated list of <see cref="P:Infragistics.Controls.Schedules.Services.ActivityCategory.CategoryName" />s.
            The actual <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> instance associated with a particular <see cref="P:Infragistics.Controls.Schedules.Services.ActivityCategory.CategoryName" /> can be retrieved using the 
            XamScheduleDataManager's <see cref="!:XamScheduleDataManager.ResolveActivityCategories" /> method. 
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityCategory.CategoryName" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Categories" />
            
            <seealso cref="P:Infragistics.Controls.Schedules.Services.Resource.CustomActivityCategories" />
            
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityCategory.Color">
            <summary>
            Specifies the color associated with the category. Activities of this category will visually identified using this color.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityCategory.CategoryName">
            <summary>
            Gets or sets a string value that identifies the category.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityCategory.DataItem">
            <summary>
            Gets the associated data item if any.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityCategory.Description">
            <summary>
            Specifies the description of the category.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityCategory.Clone">
            <summary>
            Clones the ActivityCategory object.
            </summary>
            <returns>Clone of the object.</returns>
            <remarks>
            <para class="body">
            <b>Clone</b> method is used for editing purpopses where the clone of the activity category is used to
            retain the original activity category data to be used in case the user cancels editing of activity category.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityCategory.Initialize(Infragistics.Services.IPropertyStorage{Infragistics.Controls.Schedules.Services.ActivityCategory,System.Int32})">
            <summary>
            Initializes the activity category with a storage.
            </summary>
            <param name="storage">Storage instance that retrieves data from the underlying data item.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.Appointment">
            <summary>
            Represents an appointment in a schedule.
            </summary>
            <remarks>
            <para class="body">
            An <b>Appointment</b> object represents an appointment in the schedule object model. It derives from <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" />
            which is also a base class for <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> and <see cref="T:Infragistics.Controls.Schedules.Services.Task" />.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Journal" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Task" />
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.Appointment.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" />
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Appointment.ActivityType">
            <summary>
            Gets the ActivityType of this activity.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Appointment.Location">
            <summary>
            Gets or sets the location of the appointment.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.Journal">
            <summary>
            Represents a journal or a note in a schedule.
            </summary>
            <remarks>
            <para class="body">
            A <b>Journal</b> object represents a journal or a note in the schedule object model. It derives from <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" />
            which is also a base class for <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> and <see cref="T:Infragistics.Controls.Schedules.Services.Task" />.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Appointment" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Task" />
            
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Journal.ActivityType">
            <summary>
            Gets the ActivityType of this activity.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.Resource">
            <summary>
            Represents a resource (owner) in a schedule.
            </summary>
            <remarks>
            <para class="body">
            A <b>Resource</b> object represents a resource or am owner in the schedule object model. A resource can be a person
            or a resource like conference room.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Appointment" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Task" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Journal" />
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.Resource.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Schedules.Services.Resource" />
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.Resource.OnPropertyChanged(System.String)">
            <summary>
            Overridden. Called when property changed event is raised.
            </summary>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.Calendars">
            <summary>
            Gets the calendars associated with this user.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that there's always at least one calendar in the returned collection.
            Moreover, the first instance in the calendar is always the primary calendar of the resource.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.CustomActivityCategories">
            <summary>
            Gets or sets a collection of custom activity categories for this resource.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that the schedule data connector can also provide a default list of activity categories.
            <b>CustomActivityCategories</b> are in addition to any such default activity categories.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.DataItem">
            <summary>
            Gets the underlying data item from the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.DaySettingsOverrides">
            <summary>
            Gets a collection of DaySettingsOverride objects for this resource.
            </summary>
            <remarks>
            <para class="body">
            <b>Note:</b> If you are using custom objects as data items to provide Resource information and the underlying property
            that's mapped to <i>DaySettingsOverrides</i> is a string property, you can use the <see cref="M:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection.ToXml(Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection)" />
            method to get xml representation of a DaySettingsOverrideCollection, that you can use to initialize the value of the mapped 
            property in the data item. This is the format that the XamSchedule expects the DaySettingsOverrides information in.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection.ToXml(Infragistics.Controls.Schedules.Services.DaySettingsOverrideCollection)" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.DaysOfWeek">
            <summary>
            Keyed collection of DaySettings objects where the key is DayOfWeek enum and the value is the associated DaySettings object. This is for providing per resource day of week settings. For example, let?s say the office hours are 9 AM-5 PM for everybody but the sales team?s office hour are 7 AM - 3 PM then each sales team member will have DayOfWeek entry for each work day in this collection with 7 AM - 3 PM WorkingHours specified.
            </summary>
            <remarks>
            <para class="body">
            <b>Note:</b> If you are using custom objects as data items to provide Resource information and the underlying property
            that's mapped to <i>DaysOfWeek</i> is a string property, you can use the <see cref="M:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.ToXml(Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek)" />
            method to get xml representation of a ScheduleDaysOfWeek instance, that you can use to initialize the value of the mapped 
            property in the data item. This is the format that the XamSchedule expects the ScheduleDaysOfWeek information in.
            </para>
            </remarks>
            <seealso cref="M:Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek.ToXml(Infragistics.Controls.Schedules.Services.ScheduleDaysOfWeek)" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.Description">
            <summary>
            Any extra information about the resource.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.EmailAddress">
            <summary>
            Email address.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.FirstDayOfWeek">
            <summary>
            Specifies the first day of the week for the resource.
            </summary>
            
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.Id">
            <summary>
            Resource Id.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.IsVisibleResolved">
            <summary>
            Gets the resolve value indicating whether this resource is visible in the UI.
            </summary>
            <remarks>
            <para class="body">
            <b>Note</b> that this property doesn't indicate whether the resource is presently visible in the UI.
            It indicates whether the resource can be displayed in the UI.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.Resource.IsVisible" />
            
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.IsLocked">
            <summary>
            Specifies whether the activities of this resource can be modified in the UI.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.Metadata">
            <summary>
            Returns a MetadataPropertyValueStore object that's used for storing and retrieving metadata information.
            </summary>
            <remarks>
            <para class="body">
            You can use the <b>Metadata</b> to store and later retrieve information. The information is stored in
            properties of your data items as specified in the <see cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />.
            For example, the metadata property mappings is specified using the <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection" />'s
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
            property. Each property defined in the mapping collection has a corresponding entry in the returned MetadataPropertyValueStore.
            It's indexer is used to retrieve or set the the property's value. Furthermore, you can use bindings to
            bind to a specific value in the returned object.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />
            <seealso cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.Name">
            <summary>
            Gets or sets the resource name.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.PrimaryCalendar">
            <summary>
            Primary calendar of the resource.
            </summary>
            <remarks>
            <para class="body">
            A resource can have multiple calendars. A calendar can be designated as a primary calendar.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.PrimaryCalendarId">
            <summary>
            Primary calendar of the resource.
            </summary>
            <remarks>
            <para class="body">
            A resource can have multiple calendars. A calendar can be designated as a primary calendar.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.PrimaryTimeZoneId">
            <summary>
            Primary time-zone of the resource.
            </summary>
            <remarks>
            <para class="body">
            You can designate a time-zone to a resource.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.IsVisible">
            <summary>
            Specifies whether this resource is visible in the UI.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.BeginEditData">
            <summary>
            Returns the data that was stored when BeginEdit was called.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Resource.PropChangeListeners">
            <summary>
            Gets collection of property change listeners.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceCalendar">
            <summary>
            Represents a calendar.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCalendar.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCalendar.#ctor(Infragistics.Controls.Schedules.Services.Resource)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> object.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ResourceCalendar.OnPropertyChanged(System.String)">
            <summary>
            Overridden. Called when property changed event is raised.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.BaseColor">
            <summary>
            Gets or sets the base color used to display this calendar resource.
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: if this property is null (the default) then an appropitae <see cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.BrushProvider" /> will be assigned when this ResourceCalendar is visible in any <see cref="!:ScheduleControlBase" /> derived control</para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.BrushProvider" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.BrushProvider">
            <summary>
            Returns the assigned CalendarBrushProvider
            </summary>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.BaseColor" />
            <remarks>
            <para class="note"><b>Note</b>: this property will return null unless this ResourceCalendar is visible in one or more <see cref="!:ScheduleControlBase" /> derived controls</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.BrushVersion">
            <summary>
            Returns the version of the brush cache. 
            </summary>
            <remarks>
            <para class="body">When something changes that invalidates the cache, e.g. the <see cref="T:Infragistics.Controls.Schedules.Services.OfficeColorScheme" /> is changed or a new <see cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.BrushProvider" /> is asigned then this number is incremented.</para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.BrushVersion" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.DataItem">
            <summary>
            Gets the underlying data item from the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.Id">
            <summary>
            Gets or sets the calendar id.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.OwningResourceId">
            <summary>
            Gets the id of the resource to which this calendar belongs.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.IsVisibleResolved">
            <summary>
            Gets the resolve value indicating whether this resource is visible in the UI.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.Metadata">
            <summary>
            Returns a MetadataPropertyValueStore object that's used for storing and retrieving metadata information.
            </summary>
            <remarks>
            <para class="body">
            You can use the <b>Metadata</b> to store and later retrieve information. The information is stored in
            properties of your data items as specified in the <see cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />.
            For example, the metadata property mappings is specified using the <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection" />'s
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
            property. Each property defined in the mapping collection has a corresponding entry in the returned MetadataPropertyValueStore.
            It's indexer is used to retrieve or set the the property's value. Furthermore, you can use bindings to
            bind to a specific value in the returned object.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />
            <seealso cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.Name">
            <summary>
            Gets or sets the name of the calendar.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.OwningResource">
            <summary>
            Returns the associated Resource.
            </summary>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Resource" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ResourceCalendar.IsVisible">
            <summary>
            Specifies whether this calendar is visible in the UI.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.Task">
            <summary>
            Represents a task (to-do) in a schedule.
            </summary>
            <remarks>
            <para class="body">
            A <b>Task</b> object represents a task or a to-do in the schedule object model. It derives from <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" />
            which is also a base class for <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> and <see cref="T:Infragistics.Controls.Schedules.Services.Journal" />.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Appointment" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.Journal" />
            
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Task.ActivityType">
            <summary>
            Gets the ActivityType of this activity.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.Task.PercentComplete">
            <summary>
            Gets or sets the percentage complete value of the task.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityFeature">
            <summary>
            Used to specify which activityfeatures are supported.
            </summary>
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.Recurrence">
            <summary>
            Recurring activities.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.Variance">
            <summary>
            Modifying an occurrence.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.TimeZoneNeutrality">
            <summary>
            Making an activity time-zone neutral.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.Reminder">
            <summary>
            Reminders.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.CanChangeOwningCalendar">
            <summary>
            Whether owning calendar of an activity can be changed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.CanChangeOwningResource">
            <summary>
            Whether owning resource of an activity can be changed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.EndTime">
            <summary>
            Whether the activity supports end time.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.Categories">
            <summary>
            Whether the activity categories are supported.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.StartTimezone">
            <summary>
            Whether the start time zone id is supported. For example if the data source doesn't have 
            a field for storing time-zone for start time then the feature would not be supported.
            Furthermore the activity would be considered time-zone neutral.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityFeature.EndTimezone">
            <summary>
            Whether the start time zone id is supported.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityOperation">
            <summary>
            Enum that lists operations that can be performed on an activity.
            </summary>
            
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityOperation.Edit">
            <summary>
            Whether an activity can be modified.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityOperation.Add">
            <summary>
            Wheher an activity can be added.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityOperation.Remove">
            <summary>
            Whether an activity can be removed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags">
            <summary>
            Used to specify <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />'s <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.RequestedInformation" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.None">
            <summary>
            No information will be retrieved.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.ActivitiesWithinDateRanges">
            <summary>
            Activities that intersect with one of the date ranges in the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />'s <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> are to be retrieved.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.HasPreviousActivity">
            <summary>
            Whether an activity exists before the earliest of the dates in the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />'s <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> is to be ascertained.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.HasNextActivity">
            <summary>
            Whether an activity exists after the latest of the dates in the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />'s <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> is to be ascertained.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.PreviousActivity">
            <summary>
            The latest activity before the earliest of the dates in the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />'s <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> is to be retrieved.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.NextActivity">
            <summary>
            The earliest activity after the latest of the dates in the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityQuery" />'s <see cref="P:Infragistics.Controls.Schedules.Services.ActivityQuery.DateRanges" /> is to be retrieved.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityQueryRequestedDataFlags.All">
            <summary>
            All of above.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityType">
            <summary>
            Enum that lists the four activity types.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityType.Appointment">
            <summary>
            Appointment activity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityType.Journal">
            <summary>
            Journal activity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityType.Task">
            <summary>
            Task activity.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityTypes">
            <summary>
            Flagged enum that lists the four activity types.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityTypes.Appointment">
            <summary>
            Appointment activity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityTypes.Journal">
            <summary>
            Journal activity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityTypes.Task">
            <summary>
            Task activity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ActivityTypes.All">
            <summary>
            All activity types.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.OfficeColorScheme">
            <summary>
            Determines the overall color scheme to use for all controls associated with a specific <see cref="!:XamScheduleDataManager" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.OfficeColorScheme.Blue">
            <summary>
            This corresponds to the Office blue color scheme. This is the default.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.OfficeColorScheme.Black">
            <summary>
            This corresponds to the Office black color scheme. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.OfficeColorScheme.Silver">
            <summary>
            This corresponds to the Office silver color scheme. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ResourceFeature">
            <summary>
            Used to specify which resource features are supported.
            </summary>
            
        </member>
        <member name="F:Infragistics.Controls.Schedules.Services.ResourceFeature.CustomActivityCategories">
            <summary>
            Feature indicates whether the resource supports activity category customization.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityEventArgs">
            <summary>
            Base class for activity event args.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityEventArgs.#ctor(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Constructor.
            </summary>
            <param name="activity"><see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> derived object.</param>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Services.ActivityEventArgs.Activity">
            <summary>
            The activity for which the operation is being performed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityAddedEventArgs">
            <summary>
            Event args associated with the <see cref="!:XamScheduleDataManager.ActivityAdded" /> event.
            </summary>
            <remarks>
            <para class="body">
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityEventArgs.Activity" /> property returns the activity that was added.
            </para>
            </remarks>
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityAddedEventArgs.#ctor(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Constructor.
            </summary>
            <param name="activity"><see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> derived object.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityChangedEventArgs">
            <summary>
            Event args associated with the <see cref="!:XamScheduleDataManager.ActivityChanged" /> event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityChangedEventArgs.#ctor(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Constructor.
            </summary>
            <param name="activity">Activity object.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Services.ActivityRemovedEventArgs">
            <summary>
            Event args associated with the <see cref="!:XamScheduleDataManager.ActivityRemoved" /> event.
            </summary>
            <remarks>
            <para class="body">
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityEventArgs.Activity" /> property returns the activity that was removed.
            </para>
            </remarks>
            
        </member>
        <member name="M:Infragistics.Controls.Schedules.Services.ActivityRemovedEventArgs.#ctor(Infragistics.Controls.Schedules.Services.ActivityBase)">
            <summary>
            Constructor.
            </summary>
            <param name="activity"><see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> derived object.</param>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider">
            <summary>
            Class which exposes brush properties which are used by the visual elements of the shedule controls
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.BaseColor">
            <summary>
            Color used as the base color from which all other color
            properties exposed by this class are derived.
            </summary>
            <seealso cref="T:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.BrushVersion">
            <summary>
            Returns the version of the brush cache. 
            </summary>
            <remarks>
            <para class="body">When something changes that invalidates the cache, e.g. the <see cref="T:Infragistics.Controls.Schedules.Services.OfficeColorScheme" /> is changed then this number is incremented.</para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.BrushProviderProperty">
            <summary>
            Identifies the BrushProvider attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.GetBrushProvider(System.Windows.DependencyObject)" />
            <seealso cref="M:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.SetBrushProvider(System.Windows.DependencyObject,Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.GetBrushProvider(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the attached BrushProvider DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be returned</param>
            <seealso cref="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.BrushProviderProperty" />
            <seealso cref="M:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.SetBrushProvider(System.Windows.DependencyObject,Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.SetBrushProvider(System.Windows.DependencyObject,Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider)">
            <summary>
            Sets the value of the attached BrushProvider DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be modified</param>
            <param name="value">The new value</param>
            <seealso cref="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.BrushProviderProperty" />
            <seealso cref="M:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.GetBrushProvider(System.Windows.DependencyObject)" />
        </member>
        <member name="M:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.GetBrush(Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId)">
            <summary>
            Returns a brush based on the specified Id.
            </summary>
            <param name="id">The id of the brush</param>
            <returns></returns>
            <seealso cref="T:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId" />
        </member>
        <member name="P:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.Item(System.Object)">
            <summary>
            Indexer takes a string or a <see cref="T:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId" />
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.Item(System.String)">
            <summary>
            Indexer takes a string that can be converted into a <see cref="T:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId" />
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId">
            <summary>
            Identifies a specific brush
            </summary>
            <seealso cref="M:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushProvider.GetBrush(Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId)" />
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ActivityCategoryColorPickerDropDownBackground">
            <summary>
            The background for the dropdown portion of the <see cref="!:ActivityCategoryColorPicker" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ActivityCategoryColorPickerDropDownBorder">
            <summary>
            The border for the dropdown portion of the <see cref="!:ActivityCategoryColorPicker" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ActivityCategoryCheckedMenuItemBackground">
            <summary>
            The background for the checkmark of a checked menu item representing an ActivityCategory.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ActivityCategoryCheckedMenuItemBorder">
            <summary>
            The border for the checkmark of a checked menu item representing an ActivityCategory.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.AlternateMonthDayBackground">
            <summary>
            Background for days in alternate months
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.AppointmentBackground">
            <summary>
            Background for appointments
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.AppointmentBorder">
            <summary>
            Border around appointments
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.AppointmentDateTimeForeground">
            <summary>
            Foreground for appointment date times
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.AppointmentForeground">
            <summary>
            Foreground for appointments
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.AppointmentForegroundOverlayed">
            <summary>
            Foreground for appointments that are not owned by the selected calendar.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.BlockingErrorBackground">
            <summary>
            Background for a blocking error message
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.BlockingErrorForeground">
            <summary>
            Foreground for a blocking error message
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.BlockingErrorHeaderForeground">
            <summary>
            Foreground for a blocking error message header
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CalendarBorder">
            <summary>
            Border around calendars
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CalendarHeaderBackground">
            <summary>
            Background for calendar headers
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CalendarHeaderForeground">
            <summary>
            Foreground for calendar headers
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CurrentDayBorder">
            <summary>
            Border around the currect day
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CurrentDayBorderMonthCalendar">
            <summary>
            Border around the currect day in the XamMonthCalendar
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CurrentDayHeaderBackground">
            <summary>
            Background for the current day header
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CurrentDayHeaderForeground">
            <summary>
            Foreground for the current day header
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CurrentTimeIndicatorBackground">
            <summary>
            Backfround for the current time
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.CurrentTimeIndicatorBorder">
            <summary>
            Border around the current time
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.DayBackground">
            <summary>
            Background for days 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.DayBorder">
            <summary>
            Border for days 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.DayHeaderBackground">
            <summary>
            Background for day headers 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.DayHeaderForground">
            <summary>
            Foreground for day headers 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.DialogBackground">
            <summary>
            Background for XamSchedule dialogs 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.DialogForeground">
            <summary>
            Foreground for XamSchedule dialogs 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.HotTrackingMoreActivityIndicatorFill">
            <summary>
            Brush used to fill the <see cref="!:MoreActivityIndicator" /> when the mouse is over the element
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.JournalBackground">
            <summary>
            Background for journals 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.JournalBorder">
            <summary>
            Border around journals 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.JournalDateTimeForeground">
            <summary>
            Foreground for journal date times
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.JournalForeground">
            <summary>
            Foreground for journals 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.JournalForegroundOverlayed">
            <summary>
            Foreground for journal entries that are not owned by the selected calendar.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.MoreActivityIndicatorFill">
            <summary>
            Brush used to fill the <see cref="!:MoreActivityIndicator" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.MonthViewBackground">
            <summary>
            Background for <see cref="!:XamMonthView" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.MonthViewDayOfWeekHeaderBackground">
            <summary>
            Background for the day of week header in <see cref="!:XamMonthView" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.MonthViewDayOfWeekHeaderBorder">
            <summary>
            Border for the day of week header in <see cref="!:XamMonthView" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.MonthViewDayOfWeekHeaderForeground">
            <summary>
            Foreground for the day of week header in <see cref="!:XamMonthView" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.MoreActivityIndicatorStroke">
            <summary>
            Brush used to draw the edge of the <see cref="!:MoreActivityIndicator" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.MultiDayActivityAreaBackground">
            <summary>
            Background for the multi day activity area
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.NavigationButtonForeground">
            <summary>
            Default foreground for the navigation buttons in a <see cref="!:XamOutlookCalendarView" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.NavigationButtonBackground">
            <summary>
            Default background for the navigation buttons in a <see cref="!:XamOutlookCalendarView" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.NavigationButtonHoverBackground">
            <summary>
            Background for the navigation buttons in a <see cref="!:XamOutlookCalendarView" /> when the mouse is over the element
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.NavigationButtonPressedBackground">
            <summary>
            Background for the navigation buttons in a <see cref="!:XamOutlookCalendarView" /> when pressed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.NonWorkingHourTimeslotBackground">
            <summary>
            Background for timeslots that are not within the working hour range
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.NonWorkingHourTimeslotMinorBorder">
            <summary>
            Border brush for timeslots that are not on an hour border and are not within the working hour range
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ResizerBarPreviewBackground">
            <summary>
            The background for the <see cref="!:ScheduleResizerBar" /> preview shown during a resize of a CalendarGroup.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.RibbonLiteBackgroundBrush">
            <summary>
            Background brush for the ActivityDialogRibbonLite
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.RibbonLiteGroupOuterBorderBrush">
            <summary>
            Border brush for Group outer borders in the ActivityDialogRibbonLite 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.RibbonLiteGroupInnerBorderBrush">
            <summary>
            Border brush for Group inner borders in the ActivityDialogRibbonLite 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.SelectedActivityBorder">
            <summary>
            Border brush for selected activities
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.SelectedMultiDayActivityAreaBackground">
            <summary>
            Background for selected all day event area 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.SelectedDayBackgroundMonthView">
            <summary>
            Background for selected days in the XamMonthView
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.SelectedTimeslotBackground">
            <summary>
            Background for selected timeslots 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TaskBackground">
            <summary>
            Background for tasks 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TaskBorder">
            <summary>
            Border around tasks 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TaskDateTimeForeground">
            <summary>
            Foreground for task date times
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TaskForeground">
            <summary>
            Foreground for tasks 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TaskForegroundOverlayed">
            <summary>
            Foreground for tasks that are not owned by the selected calendar.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotMajorBorder">
            <summary>
            Border brush for timeslots that are on an hour border 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotDayBorder">
            <summary>
            Border brush for timeslots that border a day 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotHeaderAreaBackgroundDayView">
            <summary>
            Brush for background of the <see cref="!:DayViewTimeslotHeaderArea" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotHeaderAreaBackgroundScheduleView">
            <summary>
            Brush for background of the <see cref="!:ScheduleViewTimeslotHeaderArea" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotHeaderAreaSeparator">
            <summary>
            The border separating the <see cref="!:TimeslotHeaderArea" /> in a <see cref="!:ScheduleTimeControlBase" />
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotHeaderForegroundDayView">
            <summary>
            Brush for timeslot Foreground in the XamDayView
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotHeaderForegroundScheduleView">
            <summary>
            Brush for timeslot Foreground in the XamScheduleView
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotHeaderTickmarkDayView">
            <summary>
            Brush for timeslot Tickmarks in the XamDayView
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.TimeslotHeaderTickmarkScheduleView">
            <summary>
            Brush for timeslot Tickmarks in the XamScheduleView
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ToolTipBackground">
            <summary>
            Background for tooltips
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ToolTipBorder">
            <summary>
            Brush for the border of tooltips
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ToolTipErrorForeground">
            <summary>
            Foreground for error text in tooltips
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.ToolTipForeground">
            <summary>
            Foreground for tooltips
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.WeekHeaderBackground">
            <summary>
            Background of week headers 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.WeekHeaderBorder">
            <summary>
            Border around week headers 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.WeekHeaderForeground">
            <summary>
            Foreground for week headers 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.WorkingHourTimeslotBackground">
            <summary>
            Background for timeslots that are within the working hour range
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Schedules.Primitives.Services.CalendarBrushId.WorkingHourTimeslotMinorBorder">
            <summary>
            Border brush for timeslots that are not on an hour border and are within the working hour range
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Schedules.Primitives.Services.ScheduleResourceString">
            <summary>
            Class that represents a string resource loaded from the Schedule assembly
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.Services.ResourceStringBase">
            <summary>
            Abstract base class that represents a string resource
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.Services.ResourceStringBase.#ctor">
            <summary>
            Instantiates a new instance of a <see cref="T:Infragistics.Controls.Primitives.Services.ResourceStringBase" /> derived class
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.Services.ResourceStringBase.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns>The <see cref="P:Infragistics.Controls.Primitives.Services.ResourceStringBase.Value" />  property</returns>
        </member>
        <member name="P:Infragistics.Controls.Primitives.Services.ResourceStringBase.ResourceName">
            <summary>
            Gets/sets the resource idenifier
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.Services.ResourceStringBase.Value">
            <summary>
            Returns the loaded string (read-only)
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.Services.ResourceStringBase.InvalidateCachedResources">
            <summary>
            Clears any cached resource strings and notifies all derived class instances that their values may have changed.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this method is called automatically when registering custom resources.</para>
            </remarks>
        </member>
        <member name="T:Infragistics.Services.CoreUtilities">
            <summary>
            Contains static helper methods.
            </summary>
        </member>
        <member name="T:Infragistics.Services.CoreUtilities.ConverterComparer`2">
            <summary>
            A comparer that compares converted values.
            </summary>
            <typeparam name="T">Type of objects being sorted.</typeparam>
            <typeparam name="Z">The type of the value of the object that will be compared.</typeparam>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.ConverterComparer`2.#ctor(System.Converter{`0,`1},System.Comparison{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="converter">Converter used to convert <i>T</i> instances to <i>Z</i> values for comparison.</param>
            <param name="comparison">Comparison delegate for comparing converted <i>Z</i> values.</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.ConverterComparer`2.#ctor(System.Converter{`0,`1},System.Collections.Generic.IComparer{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="converter">Converter used to convert <i>T</i> instances to <i>Z</i> values for comparison.</param>
            <param name="comparer">Comparer for comparing converted <i>Z</i> values.</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.ConverterComparer`2.Compare(`0,`0)">
            <summary>
            Compares the two items.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.#ctor">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.BuildEmbeddedResourceUri(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a Uri for a resource embedded in an assembly
            </summary>
            <param name="assembly">The assembly that contains the resource</param>
            <param name="resourcePath">The relative path to the resource (e.g. "Looks/Onyx.xaml")</param>
            <returns>A Uri to the resource.</returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.ConvertDataValue(System.Object,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Converts 'valueToConvert' to an object of the type 'convertToType'. If it cannot perform the conversion
            it returns null. It makes use of any formatting information provided passed in.
            </summary>
            <returns>Converted value, null if unsuccessful.</returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.ConvertDataValue(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts 'valueToConvert' to an object of the type 'convertToType'. If it cannot perform the conversion
            it returns null. It makes use of any formatting information provided passed in.
            </summary>
            <returns>Converted value, null if unsuccessful.</returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.CreateComparer``1(System.Comparison{``0})">
            <summary>
            Creates an IComparer that wraps the specified comparison.
            </summary>
            <typeparam name="T">The type of object being compared</typeparam>
            <param name="comparison">The comparison delegate to use when comparing elements.</param>
            <returns>A new IComparer&lt;T&gt; that uses the specified <paramref name="comparison" /> to perform the compare.</returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.CreateComparer``1(System.Collections.IComparer)">
            <summary>
            If the specified comparer is IComparer&lt;T&gt; then returns it otherwise creates an 
            IComparer&lt;T&gt; that wraps the specified IComparer.
            </summary>
            <typeparam name="T">The type of object being compared</typeparam>
            <param name="comparer">Non-generic comparer.</param>
            <returns>A new IComparer&lt;T&gt; that uses the specified IComparer to perform the comparison.</returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.IsKnownType(System.Type)">
            <summary>
            Checks if the type is a known type (to Infragistics controls).
            </summary>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.GetItemsInRange``1(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Gets items from the list which must be an IList or IList&lt;T&gt;.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">Must be an IList or IList&lt;T&gt;.</param>
            <param name="startIndex">Start of the range.</param>
            <param name="count">Number of items to return.</param>
            <returns>Array of items.</returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.IsValueEmpty(System.Object)">
            <summary>
            Returns true if the specified val is null, DBNull, empty string, or DependencyProperty.UnsetValue.
            </summary>
            <param name="val">Value to test</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.SortMerge(System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
            <param name="si">Start index in the array.</param>
            <param name="ei">End index in the array.</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.SortMergeGeneric``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.SortMergeGeneric``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the passed in list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
            <param name="startIndex">Start index in the array. Items between the specified start index and end index will be sorted. Other items will be left as they are.</param>
            <param name="endIndex">End index in the array. Items between the specified start index and end index will be sorted. Other items will be left as they are.</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.SortMergeGeneric``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="array">The array to be sorted</param>
            <param name="comparer">The comparer to use for the sort</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.SortMergeGeneric``1(``0[],``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to <paramref name="array" />.</param>
            <param name="comparer">Comparer.</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.SortMergeGeneric``1(``0[],``0[],System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to <paramref name="array" />.</param>
            <param name="comparer">Comparer.</param>
            <param name="startIndex">Start index in the array.</param>
            <param name="endIndex">End index in the array.</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.ReadData(System.IO.Stream)">
            <summary>
            Reads all the data from the stream starting from its current position.
            </summary>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps values in a list at specified indexes.
            </summary>
            <typeparam name="T">Type of elements in the list.</typeparam>
            <param name="arr">The list to modify</param>
            <param name="x">Index location 1</param>
            <param name="y">Index location 2</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps the values of the specified 
            </summary>
            <typeparam name="T">The type of variable to be swapped</typeparam>
            <param name="value1">The member to be updated with the value of <paramref name="value2" /></param>
            <param name="value2">The member to be updated with the value of <paramref name="value1" /></param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.Traverse(System.Collections.IEnumerable)">
            <summary>
            Traverses the enumerator. This may be used to force allocation of lazily allocated list items.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Services.CoreUtilities.AntirecursionUtility">
            <summary>
            Used instead of anti-recursion flag to prevent an action from being taken recursively.
            </summary>
        </member>
        <member name="T:Infragistics.Services.CoreUtilities.TypedList`1">
            <summary>
            IList&lt;T&gt; implementation that wraps an IList
            </summary>
            <typeparam name="T">Type of the items in the collection</typeparam>
        </member>
        <member name="T:Infragistics.Services.CoreUtilities.ObservableTypedList`1">
            <summary>
            IList&lt;T&gt; implementation that wraps an IList and supports propogating the collection and property changes from the source collection.
            </summary>
            <typeparam name="T">Type of the items in the collection</typeparam>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Helper method for performing a binary search of a sorted list
            </summary>
            <typeparam name="T">The type of items in the list</typeparam>
            <param name="list">The sorted list to be searched</param>
            <param name="item">The item to look for</param>
            <param name="comparer">The comparer used to perform the search</param>
            <param name="ignoreItem">False for a standard binary search. True if the <paramref name="item" /> should 
            be ignored in the search. This is useful where the item's sort criteria may have changed to find out where 
            the item should be moved to.</param>
            <returns>The index where the item in the list. If the item does not exist then it returns the bitwise 
            complement. In the case where <paramref name="ignoreItem" /> is true, the index of the item will be returned 
            if it exists at the correct location otherwise the bitwise complement of where it should be. Note the complement 
            may need to be decremented if doing a move and the item is before the new index.</returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1,System.Int32},``1)">
            <summary>
            Helper method for performing a binary search where the search criteria is a separate piece of data
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TComparison"></typeparam>
            <param name="items"></param>
            <param name="comparer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.GetUnderlyingType(System.Type)">
            <summary>
            Takes a Type and returns the underlying (non-nullable) type, if the Type is nullable. If the specified type is not nullable, then the passed-in type is returned. 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.GetWeakReferenceTargetSafe(System.WeakReference)">
            <summary>
            Wraps the 'get' of the Target property in a try/catch to prevent unhandled exceptions
            </summary>
            <param name="weakReference">The WeakRefernce holding the target.</param>
            <returns>The Target or null if an exception was thrown.</returns>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.RemoveAll``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.RemoveAll``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="M:Infragistics.Services.CoreUtilities.RemoveAll``1(Infragistics.Collections.Services.ObservableCollectionExtended{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="T:Infragistics.Services.DateRange">
            <summary>
            Structure used to represents a range of dates.
            </summary>
        </member>
        <member name="P:Infragistics.Services.DateRange.Infinite">
            <summary>
            Returns a data range from DateTime.MinValue to DateTime.MaxValue
            </summary>
        </member>
        <member name="M:Infragistics.Services.DateRange.#ctor(System.DateTime)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Services.DateRange" />
            </summary>
            <param name="date">The date to use for the start and end dates.</param>
        </member>
        <member name="M:Infragistics.Services.DateRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Services.DateRange" />
            </summary>
            <param name="start">The start date</param>
            <param name="end">The end date</param>
        </member>
        <member name="M:Infragistics.Services.DateRange.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.op_Equality(Infragistics.Services.DateRange,Infragistics.Services.DateRange)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Services.DateRange" /> structures for equality
            </summary>
            <param name="range1">The first structure</param>
            <param name="range2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.op_Inequality(Infragistics.Services.DateRange,Infragistics.Services.DateRange)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Services.DateRange" /> structures for inequality
            </summary>
            <param name="range1">The first structure</param>
            <param name="range2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.Services.DateRange" /></returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.ToString(System.String)">
            <summary>
            Returns a string representation of the range using the specified format to format the <see cref="P:Infragistics.Services.DateRange.Start" /> and <see cref="P:Infragistics.Services.DateRange.End" />
            </summary>
            <param name="format">The format used to format the Start and End dates.</param>
            <returns>A string that represents this <see cref="T:Infragistics.Services.DateRange" /></returns>
        </member>
        <member name="P:Infragistics.Services.DateRange.IsEmpty">
            <summary>
            Returns true if the Start and End are the same values.
            </summary>
        </member>
        <member name="P:Infragistics.Services.DateRange.Start">
            <summary>
            Returns or sets the earliest/start date for the range.
            </summary>
        </member>
        <member name="P:Infragistics.Services.DateRange.End">
            <summary>
            Returns or sets the latest/end date for the range.
            </summary>
        </member>
        <member name="M:Infragistics.Services.DateRange.Contains(System.DateTime)">
            <summary>
            Indicates if the specified date falls within the <see cref="P:Infragistics.Services.DateRange.Start" /> and <see cref="P:Infragistics.Services.DateRange.End" /> dates for this range.
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>True if the specified date is greater than or equal to the <see cref="P:Infragistics.Services.DateRange.Start" /> and on or before the <see cref="P:Infragistics.Services.DateRange.End" />.</returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.Contains(Infragistics.Services.DateRange)">
            <summary>
            Indicates if the dates of the specified range fall completely within the dates of this range instance.
            </summary>
            <param name="range">The range to evaluate</param>
            <returns>True if the start and end date fall entirely within or equal to the start and end of this range instance.</returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.Intersect(Infragistics.Services.DateRange)">
            <summary>
            Attempts to update the <see cref="P:Infragistics.Services.DateRange.Start" /> and <see cref="P:Infragistics.Services.DateRange.End" /> if the specified range intersects with this instance
            </summary>
            <param name="range">The range to intersect</param>
            <returns>True if the ranges intersect; false if the ranges do not intersect.</returns>
            <remarks>
            <p class="body">If the specified range does not intersect then this instance's Start and End will not be changed. If they 
            do intersect then the Start and End will be updated to reflect the intersection of the normalized two ranges.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Services.DateRange.IntersectsWith(Infragistics.Services.DateRange)">
            <summary>
            Indicates if the <see cref="P:Infragistics.Services.DateRange.Start" /> and <see cref="P:Infragistics.Services.DateRange.End" /> of the specified <see cref="T:Infragistics.Services.DateRange" /> intersects with this object's dates.
            </summary>
            <param name="range">The range to evaluate.</param>
            <returns>True if any date within the specified range overlaps with the start/end of this range.</returns>
            <exception cref="T:System.ArgumentNullException">The 'range' cannot be null.</exception>
        </member>
        <member name="M:Infragistics.Services.DateRange.Offset(System.TimeSpan)">
            <summary>
            Moves the date range by the specified offset.
            </summary>
            <param name="offset">The timespan used to adjust the <see cref="P:Infragistics.Services.DateRange.Start" /> and <see cref="P:Infragistics.Services.DateRange.End" /> dates</param>
        </member>
        <member name="M:Infragistics.Services.DateRange.Normalize">
            <summary>
            Ensures that the start date is less than or equal to the end date.
            </summary>
        </member>
        <member name="M:Infragistics.Services.DateRange.Normalize(Infragistics.Services.DateRange)">
            <summary>
            Returns a DateRange where the <see cref="P:Infragistics.Services.DateRange.Start" /> is less than or equal to the end time
            </summary>
            <param name="range">The range to normalize</param>
        </member>
        <member name="M:Infragistics.Services.DateRange.RemoveTime">
            <summary>
            Removes the time portion from the <see cref="P:Infragistics.Services.DateRange.Start" /> and <see cref="P:Infragistics.Services.DateRange.End" />
            </summary>
        </member>
        <member name="M:Infragistics.Services.DateRange.ContainsExclusive(System.DateTime)">
            <summary>
            Indicates if the specified date falls within the <see cref="P:Infragistics.Services.DateRange.Start" /> and <see cref="P:Infragistics.Services.DateRange.End" /> dates for this range.
            </summary>
            <param name="date">The date to evaluate</param>
            <returns>True if the specified date is greater than or equal to the <see cref="P:Infragistics.Services.DateRange.Start" /> and before the <see cref="P:Infragistics.Services.DateRange.End" />.</returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.IntersectsWithExclusive(Infragistics.Services.DateRange)">
            <summary>
            Indicates if the <see cref="P:Infragistics.Services.DateRange.Start" /> and <see cref="P:Infragistics.Services.DateRange.End" /> of the specified <see cref="T:Infragistics.Services.DateRange" /> intersects with this object's dates.
            </summary>
            <param name="range">The range to evaluate.</param>
            <returns>True if any date within the specified range overlaps with the start/end of this range considering the End of the ranges as exclusive.</returns>
            <exception cref="T:System.ArgumentNullException">The 'range' cannot be null.</exception>
        </member>
        <member name="M:Infragistics.Services.DateRange.Equals(Infragistics.Services.DateRange)">
            <summary>
            Compares two <see cref="T:Infragistics.Services.DateRange" />
            </summary>
            <param name="other">The object to compare to this instance</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.DateRange.CompareTo(Infragistics.Services.DateRange)">
            <summary>
            Compares this instance to the specified <see cref="T:Infragistics.Services.DateRange" />
            </summary>
            <param name="other">The range to compare</param>
            <returns>A signed number indicating the relative values of this and the specified range.</returns>
        </member>
        <member name="T:Infragistics.Services.DateRangeConverter">
            <summary>
            Type converter for the <see cref="T:Infragistics.Services.DateRange" /> structure
            </summary>
        </member>
        <member name="M:Infragistics.Services.DateRangeConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Services.DateRangeConverter" />
            </summary>
        </member>
        <member name="M:Infragistics.Services.DateRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert from the type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType"> A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Services.DateRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the object can convert to that type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType"> A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Services.DateRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from one type to another.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object. If null is passed, the current culture is assumed.</param>        
            <param name="value">The object to convert.</param>
            <returns>An object that represents the converted value.</returns>
        </member>
        <member name="M:Infragistics.Services.DateRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object to the requested type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> object. If null is passed, the current culture is assumed.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <param name="value">The object to convert.</param>
            <returns>An object that represents the converted value.</returns>
        </member>
        <member name="M:Infragistics.Services.DependencyPropertyUtilities.GetDefaultValue(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Gets the default value for the specified property for the specified object.
            </summary>
            <param name="d">Dependency object whose property value is to be evaluated</param>
            <param name="dp">Property to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.DependencyPropertyUtilities.GetDefaultValue(System.Type,System.Windows.DependencyProperty)">
            <summary>
            Gets the default value for the specified property for the specified type.
            </summary>
            <param name="type">the type whose property value is to be evaluated</param>
            <param name="dp">Property to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.DependencyPropertyUtilities.GetName(System.Windows.DependencyProperty)">
            <summary>
            Returns the Name of the DependencyProperty. The property should have been registered using one of the Register methods of this class.
            </summary>
        </member>
        <member name="M:Infragistics.Services.DependencyPropertyUtilities.GetName(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Returns the name of the or caches it if it is able to find the public static field returning the DependencyProperty
            </summary>
        </member>
        <member name="M:Infragistics.Services.DependencyPropertyUtilities.ShouldSerialize(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            A helper method for figuring out whether a property needs to be serialized.
            </summary>
            <param name="d">Dependency object whose property value is to be evaluated</param>
            <param name="dp">Property to evaluate</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Services.ValueHolder">
            <summary>
            Simple dependency object with a single Value dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Services.IPropertyStore.GetValue(System.Object)">
            <summary>
            Gets the value for the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.IPropertyStore.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value for the specified item.
            </summary>
            <param name="item"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Infragistics.Services.IPropertyStore.HasValue(System.Object)">
            <summary>
            Indicates if the store has a value stored for the specified item. Note that some stores 
            cannot tell if the value was stored previously in which case they may implement this by 
            checking if the value is not default(T) where T is the type of the values it stores.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Services.IMap`2">
            <summary>
            Used for storing key to value mappings.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
            <remarks>
            <para class="body">
            Enumerating the map will return keys that have values mapped to them.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Services.IMap`2.Item(`0)">
            <summary>
            Gets or sets the value for the specified key. Returns null if the item doesn't exist.
            </summary>
            <param name="key">Key value.</param>
            <returns>Mapped value.</returns>
        </member>
        <member name="T:Infragistics.Services.IntKeyArrayMapBase`2">
            <summary>
            Map implementation that uses an array for the storage. The key values are either
            integer or convertible to integer and the integer values and the smallest integer
            value should be no less than 0 and the largest value shouldn't generally be a 
            very large value because the array will be allocated based on the largest value
            encountered.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:Infragistics.Services.IntKeyArrayMapBase`2.Enumerator.#ctor(Infragistics.Services.IntKeyArrayMapBase{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="map">Map whose entries will be enumerated.</param>
        </member>
        <member name="M:Infragistics.Services.IntKeyArrayMapBase`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Services.IntKeyArrayMapBase`2.Clear">
            <summary>
            Clears all values.
            </summary>
        </member>
        <member name="M:Infragistics.Services.IntKeyArrayMapBase`2.GetIntValue(`0)">
            <summary>
            Gets the integer value of the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.IntKeyArrayMapBase`2.GetKeyValue(System.Int32)">
            <summary>
            Gets the key associated with the specified integer value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Services.IntKeyArrayMap`2">
            <summary>
            Map implementation that uses an array for the storage. The key values are either
            integer or convertible to integer and the integer values and the smallest integer
            value should be no less than 0 and the largest value shouldn't generally be a 
            very large value because the array will be allocated based on the largest value
            encountered.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:Infragistics.Services.IntKeyArrayMap`2.#ctor(System.Converter{`0,System.Int32},System.Converter{System.Int32,`0})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Services.IntKeyArrayMap`2.GetIntValue(`0)">
            <summary>
            Gets the integer value of the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.IntKeyArrayMap`2.GetKeyValue(System.Int32)">
            <summary>
            Gets the key associated with the specified integer value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.IntMap`1.IntEnumerator.#ctor(Infragistics.Services.IntMap{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="map">Map whose entries will be enumerated.</param>
        </member>
        <member name="M:Infragistics.Services.IntMap`1.GetIntValue(System.Int32)">
            <summary>
            Gets the integer value of the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.IntMap`1.GetKeyValue(System.Int32)">
            <summary>
            Gets the key associated with the specified integer value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Services.DictionaryMap`2">
            <summary>
            Map implementation that uses dictionary for storage.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:Infragistics.Services.DictionaryMap`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Infragistics.Services.ITypedPropertyChangeListener`2">
            <summary>
            Interface used to hook into property change notifications of objects that implement 
            <see cref="T:Infragistics.Services.ITypedSupportPropertyChangeNotifications`2" /> interface.
            </summary>
            <typeparam name="TItem">Type of the item whose change notifications are hooked into.</typeparam>
            <typeparam name="TProperty">Type of object that identifies properties.</typeparam>
        </member>
        <member name="M:Infragistics.Services.ITypedPropertyChangeListener`2.OnPropertyValueChanged(`0,`1,System.Object)">
            <summary>
            Called to notify of a change in the value of a property.
            </summary>
            <param name="dataItem">Item whose property value changed.</param>
            <param name="property">Identifies the property whose value changed.</param>
            <param name="extraInfo">Any other information regarding the change. The information passed depends on
            the implementation of the item that's sending the notification. This can be an instance of 
            PropertyChangedEventArgs, or DependencyPropertyChangedEventArgs, NotifyCollectionChangedEventArgs or null.</param>
        </member>
        <member name="T:Infragistics.Services.IPropertyChangeListener">
            <summary>
            Interface used to hook into property change notifications of objects that implement
            <see cref="T:Infragistics.Services.ISupportPropertyChangeNotifications" /> interface.
            </summary>
        </member>
        <member name="T:Infragistics.Services.ITypedSupportPropertyChangeNotifications`2">
            <summary>
            Interface implemented by objects to support <see cref="T:Infragistics.Services.ITypedPropertyChangeListener`2" /> listeners.
            </summary>
            <typeparam name="TItem">Type of the item whose notifications are being sent. Typically the object implementing the interface.</typeparam>
            <typeparam name="TProperty">Type of the object that identifies the property.</typeparam>
        </member>
        <member name="T:Infragistics.Services.ISupportPropertyChangeNotifications">
            <summary>
            Interface implemented by objects to support <see cref="T:Infragistics.Services.IPropertyChangeListener" /> listeners.
            </summary>
        </member>
        <member name="T:Infragistics.Services.IValueChangeListener`1">
            <summary>
            Listener interface used to listen for value change of a specific property.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Infragistics.Services.IValueChangeListener`1.OnValueChanged(`0)">
            <summary>
            Called to notify the change in the value of the property.
            </summary>
            <param name="dataItem">Item whose property value changed.</param>
        </member>
        <member name="T:Infragistics.Services.ListenerList">
            <summary>
            A helper class used for managing one or more listeners. It uses a List when more than one listeners are added.
            </summary>
        </member>
        <member name="M:Infragistics.Services.ListenerList.#ctor(System.Int32)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Services.ListenerList" />.
            </summary>
        </member>
        <member name="T:Infragistics.Services.TypedPropertyChangeListenerList`2">
            <summary>
            Used for managing property change listeners.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Infragistics.Services.PropertyChangeListenerList">
            <summary>
            Used for managing property change listeners.
            </summary>
        </member>
        <member name="T:Infragistics.Services.KnownBoxes">
            <summary>
            Class that maintains references to commonly boxed values such as booleans.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.TrueBox">
            <summary>
            Returns an object containing the boolean 'true'
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.FalseBox">
            <summary>
            Returns an object containing the boolean 'false'
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.ScrollBarVisibilityHiddenBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> 'Hidden'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.ScrollBarVisibilityVisibleBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> 'Visible'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.ScrollBarVisibilityDisabledBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> 'Disabled'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.ScrollBarVisibilityAutoBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> 'Auto'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.VisibilityHiddenBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Visibility" /> 'Hidden'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.VisibilityVisibleBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Visibility" /> 'Visible'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.VisibilityCollapsedBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Visibility" /> 'Hidden'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.OrientationVerticalBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Orientation" /> 'Vertical'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.OrientationHorizontalBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Orientation" /> 'Horizontal'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.HorizontalAlignmentCenterBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment" /> 'Center'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.HorizontalAlignmentLeftBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment" /> 'Left'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.HorizontalAlignmentRightBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment" /> 'Right'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.HorizontalAlignmentStretchBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment" /> 'Stretch'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.VerticalAlignmentCenterBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment" /> 'Center'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.VerticalAlignmentTopBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment" /> 'Top'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.VerticalAlignmentBottomBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment" /> 'Bottom'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.VerticalAlignmentStretchBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment" /> 'Stretch'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.DockTopBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Dock" /> 'Top'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.DockBottomBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Dock" /> 'Bottom'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.DockLeftBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Dock" /> 'Left'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.DockRightBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Dock" /> 'Right'.
            </summary>
        </member>
        <member name="F:Infragistics.Services.KnownBoxes.DoubleZeroBox">
            <summary>
            A boxed instance for a double value of zero.
            </summary>
        </member>
        <member name="M:Infragistics.Services.KnownBoxes.FromValue(System.Boolean)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Boolean" /> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Boolean" /> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Boolean" /> value</returns>
        </member>
        <member name="M:Infragistics.Services.KnownBoxes.FromValue(System.Nullable{System.Boolean})">
            <summary>
            Returns a boxed representation of the specified bool? value
            </summary>
            <param name="value">An instance of bool? for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified bool?/&gt; value</returns>
        </member>
        <member name="M:Infragistics.Services.KnownBoxes.FromValue(System.Windows.Controls.ScrollBarVisibility)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> value</returns>
        </member>
        <member name="M:Infragistics.Services.KnownBoxes.FromValue(System.Windows.Visibility)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Visibility" /> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Visibility" /> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Visibility" /> value</returns>
        </member>
        <member name="M:Infragistics.Services.KnownBoxes.FromValue(System.Windows.Controls.Orientation)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Controls.Orientation" /> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Controls.Orientation" /> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Controls.Orientation" /> value</returns>
        </member>
        <member name="M:Infragistics.Services.KnownBoxes.FromValue(System.Windows.HorizontalAlignment)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.HorizontalAlignment" /> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.HorizontalAlignment" /> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.HorizontalAlignment" /> value</returns>
        </member>
        <member name="M:Infragistics.Services.KnownBoxes.FromValue(System.Windows.VerticalAlignment)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.VerticalAlignment" /> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.VerticalAlignment" /> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.VerticalAlignment" /> value</returns>
        </member>
        <member name="M:Infragistics.Services.KnownBoxes.FromValue(System.Windows.Controls.Dock)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Controls.Dock" /> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Controls.Dock" /> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Controls.Dock" /> value</returns>
        </member>
        <member name="T:Infragistics.Services.NestedPropertyChangedEventArgs">
            <summary>
            Event arg class used to specify full notification context when sub objects raise events
            and the listening object also implements INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:Infragistics.Services.NestedPropertyChangedEventArgs.#ctor(System.String,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Services.NestedPropertyChangedEventArgs" /> class
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="nestedSender">The sender whose property change notification triggered this change</param>
            <param name="nestedArgs">The nested arguments</param>
        </member>
        <member name="P:Infragistics.Services.NestedPropertyChangedEventArgs.NestedSender">
            <summary>
            Returns the sender whose property change notification triggered this change (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Services.NestedPropertyChangedEventArgs.NestedArgs">
            <summary>
            Returns the nested arguments (read-only)
            </summary>
            <remarks>May return a <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> or another <see cref="T:Infragistics.Services.NestedPropertyChangedEventArgs" /></remarks>
        </member>
        <member name="T:Infragistics.Services.PropertyChangeNotifier">
            <summary>
            Abstract base class for objects that implement INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Services.PropertyChangeNotifier" /> class
            </summary>
        </member>
        <member name="P:Infragistics.Services.PropertyChangeNotifier.HasListeners">
            <summary>
            Gets whether there are any listeners for the <see cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" /> event
            </summary>
            <value>True is there are listeners to the <see cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" /> event, otherwise false.</value>
            <seealso cref="M:Infragistics.Services.PropertyChangeNotifier.OnHasListenersChanged" />
            <seealso cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" />
            <seealso cref="M:Infragistics.Services.PropertyChangeNotifier.OnFirstListenerAdding" />
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifier.OnFirstListenerAdding">
            <summary>
            Virtual method called when the first listener is being added to the <see cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" /> event.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> the default inpmplementation does nothing. This method is intended
            for use by derived classes that may want to be notified when the # of listeners to the 
            <see cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" /> event transitions from 0 to 1.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Services.PropertyChangeNotifier.HasListeners" />
            <seealso cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" />
            <seealso cref="M:Infragistics.Services.PropertyChangeNotifier.OnHasListenersChanged" />
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifier.OnHasListenersChanged">
            <summary>
            Virtual method called when the HasListeners property changes.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> the default inpmplementation does nothing. This method is intended
            for use by derived classes that may want to be notified when the # of listeners to the <see cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" /> 
            event transitions from 0 to 1 or 1 to 0;
            </para></remarks>
            <seealso cref="P:Infragistics.Services.PropertyChangeNotifier.HasListeners" />
            <seealso cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" />
            <seealso cref="M:Infragistics.Services.PropertyChangeNotifier.OnFirstListenerAdding" />
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifier.OnPropertyChanged(System.String)">
            <summary>
            Used to raise the <see cref="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged" /> event for the specified property name.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifier.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifier.RaisePropertyChangedEvent(System.String,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="nestedSender">The sender whose property change notification triggered this change</param>
            <param name="nestedArgs">The nested arguments</param>
        </member>
        <member name="E:Infragistics.Services.PropertyChangeNotifier.PropertyChanged">
            <summary>
            Raised when a property has changed
            </summary>
        </member>
        <member name="T:Infragistics.Services.PropertyChangeNotifierExtended">
            <summary>
            Abstract base class for objects that implement INotifyPropertyChanged.
            </summary>
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifierExtended.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Services.PropertyChangeNotifierExtended" /> class.
            </summary>
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifierExtended.OnPropertyChanged(System.String)">
            <summary>
            Overridden. Called when property changed event is raised.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifierExtended.SetField``1(``0@,``0,System.String)">
            <summary>
            Helper method used by property setters to change the value of a field and raise the PropertyChanged event.
            </summary>
            <typeparam name="T">The type of field being changed</typeparam>
            <param name="member">The field member passed by reference that will be updated/compared with the new value</param>
            <param name="newValue">The new value for the field</param>
            <param name="propertyName">The name of the property being changed</param>
            <returns>Returns false if the new value matches the existing member; otherwise true if the value is different</returns>
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifierExtended.NotifyListeners(System.Object,System.String,System.Object)">
            <summary>
            Notifies listeners of the property change.
            </summary>
            <param name="sender">Object whose property changed.</param>
            <param name="property">Property that changed.</param>
            <param name="extraInfo">Any extra info associated with the property change.</param>
        </member>
        <member name="M:Infragistics.Services.PropertyChangeNotifierExtended.OnSubObjectPropertyChanged(System.Object,System.String,System.Object)">
            <summary>
            Called when a subobject's, including this object's, property changes.
            </summary>
            <param name="sender">Object whose property changed.</param>
            <param name="property">Property that changed.</param>
            <param name="extraInfo">Any extra info associated with the property change.</param>
        </member>
        <member name="F:Infragistics.Services.StoragePropsInfo.PropInfo._updateDataItemAsynchronously">
            <summary>
            Indicates whether to update the underlyin data item field asynchronously.
            </summary>
        </member>
        <member name="F:Infragistics.Services.StoragePropsInfo.PropInfo._cacheDataItemConvertedValue">
            <summary>
            Indicates whether to cache converted value for the property. When the property has a _converter, by default getting the value from
            underlying storage that's mapped to a data item will cause the field value to be retrieved from the data item and converted
            every time the store value is accessed. This indicates that the store should cache the value so the _converter is not used at
            every retrieval.
            </summary>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.PropInfo.#ctor(System.Int32,System.String,System.Type,System.Object,System.Boolean,System.Windows.Data.IValueConverter,Infragistics.Services.StoragePropsInfo.CopyMethod,System.Object,Infragistics.Services.IDefaultValueFactory,System.Collections.IEqualityComparer,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Property key.</param>
            <param name="name">Property name.</param>
            <param name="type">Property type.</param>
            <param name="mappedFields">Either a single field or IEnumerable of fields to which this property is mapped.
            For example, it can be a AppointmentProperty instance or IEnumerable&lt;AppointmentProperty&gt;.</param>
            <param name="isReadOnly">Whether the property is read-only.</param>
            <param name="converter">Converter that should be used to convert data source value to the value of the property
            and other way around as well.</param>
            <param name="copyMethod">Specifies if and how the value of the property will be copied when item is cloned.</param>
            <param name="defaultValueFactory">If specified, it's used to initialize the default value of the property.</param>
            <param name="defaultValue">Specifies the default value of the property.</param>
            <param name="equalityComparer">Used for comparing values.</param>
            <param name="updateDataItemAsynchronously">Indicates whether the data item should be update asynchronously when the 
            property's value changes. Typically used for complex objects where multiple synchronous modifications to the object are possible
            where it would undesirable to update the data item at every modification.</param>
            <param name="cacheDataItemConvertedValue">Indicates whether to cache the converted value - the value retrieved from underlying 
            data item that is converted using a converter.</param>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.PropInfo.AreValuesEqual``1(``0,Infragistics.Services.IPropertyStorage{``0,System.Int32},``0,Infragistics.Services.IPropertyStorage{``0,System.Int32})">
            <summary>
            Checks to see if the values in the property stores are different for this property.
            </summary>
            <typeparam name="T">Item type.</typeparam>
            <param name="x">This object's value for the property will be compared against the 'y' object's value for the property.</param>
            <param name="xStorage">Property storage for 'x' item.</param>
            <param name="y">This object's value for the property will be compared against the 'X' object's value for the property.</param>
            <param name="yStorage">Property storage for 'y' item.</param>
            <returns>True if the property values are equal, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.PropInfo.GetMappedField``1(``0@)">
            <summary>
            Gets the field to which this property is mapped to. The &lt;T&gt; template parameter specifies
            the type of the mapped field value (like AppointmentProperty enum, or TaskProperty enum).
            </summary>
            <typeparam name="T">The type of the mapped field value, like AppointmentProperty enum or TaskProperty enum.</typeparam>
            <param name="mappedField">This will be set to the any matching mapped field.</param>
            <returns>True if a match is found, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.PropInfo.CopyCollectionOfPropertyType(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            A helper method for copying the a collection of that's of this property's type. The derived
            TypedPropInfo supports generic collection implementations.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <returns>Returns true if succesful, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.PropInfo.GetValue``1(``0,Infragistics.Services.IPropertyStorage{``0,System.Int32})">
            <summary>
            Gets the value of the property for the specified 'x' object.
            </summary>
            <typeparam name="T">Item type.</typeparam>
            <param name="x">The item whose property value to get.</param>
            <param name="xStorage">Property storage.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.TypedPropInfo`2.#ctor(System.Int32,System.String,System.Func{`0,Infragistics.Services.IPropertyStorage{`0,System.Int32}},System.Object,System.Boolean,System.Windows.Data.IValueConverter,Infragistics.Services.StoragePropsInfo.CopyMethod,`1,System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1},System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="key">Property key.</param>
            <param name="name">Property name.</param>
            <param name="storageRetriever">Used to get the storage for an item that will be used by the 
            IFieldValueAccessor&lt;TValue&gt; implementation to retrieve property values.</param>
            <param name="mappedFields">&gt;Either a single field or IEnumerable of fields to which this property is mapped.
            For example, it can be a AppointmentProperty instance or IEnumerable&lt;AppointmentProperty&gt;.</param>
            <param name="isReadOnly">Whether the property is read-only.</param>
            <param name="converter">Converter that should be used to convert data source value to the value of the property
            and other way around as well.</param>
            <param name="copyMethod">Specifies if and how the value of the property will be copied when item is cloned.</param>
            <param name="defaultValue">Specifies the default value of the property.</param>
            <param name="defaultValueFactoryFunc">If specified, it's used to initialize the default value of the property.</param>
            <param name="equalityComparer">Used for comparing values.</param>
            <param name="updateDataItemAsynchronously">Indicates whether the data item should be update asynchronously when the 
            property's value changes. Typically used for complex objects where multiple synchronous modifications to the object are possible
            where it would undesirable to update the data item at every modification.</param>
            <param name="cacheDataItemConvertedValue">Indicates whether to cache the converted value - the value retrieved from underlying 
            data item that is converted using a converter.</param>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.TypedPropInfo`2.AreValuesEqual``1(``0,Infragistics.Services.IPropertyStorage{``0,System.Int32},``0,Infragistics.Services.IPropertyStorage{``0,System.Int32})">
            <summary>
            Checks to see if the values in the property stores are different for this property.
            </summary>
            <typeparam name="T">Item type.</typeparam>
            <param name="x">This object's value for the property will be compared against the 'y' object's value for the property.</param>
            <param name="xStorage">Property storage for 'x' item.</param>
            <param name="y">This object's value for the property will be compared against the 'X' object's value for the property.</param>
            <param name="yStorage">Property storage for 'y' item.</param>
            <returns>True if the property values are equal, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.TypedPropInfo`2.CopyCollectionOfPropertyType(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            A helper method for copying the a collection of that's of this property's type. The derived
            TypedPropInfo supports generic collection implementations.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <returns>Returns true if succesful, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.TypedPropInfo`2.GetValue``1(``0,Infragistics.Services.IPropertyStorage{``0,System.Int32})">
            <summary>
            Gets the value of the property for the specified 'x' object.
            </summary>
            <typeparam name="T">Item type.</typeparam>
            <param name="x">The item whose property value to get.</param>
            <param name="xStorage">Property storage.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="F:Infragistics.Services.StoragePropsInfo._props">
            <summary>
            Listing of all the properties.
            </summary>
        </member>
        <member name="F:Infragistics.Services.StoragePropsInfo._unmappedPropertiesStoreCandidates">
            <summary>
            These properties are candidates for serializing out in unmapped properties field if explicit mappings
            are not provided. Certain properties such as Id, Start, End etc... are not suitable for serializing
            in unmapped properties field since we perform LINQ queries on them. Further more, certain properties
            that are states, like Error, also should not be saved in unmapped properties field.
            </summary>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Services.StoragePropsInfo.GetDefaultValueFactories">
            <summary>
            Gets default value factories for properties that have them.
            </summary>
            <returns>Map where the key is the property and value is the default value factory.</returns>
        </member>
        <member name="P:Infragistics.Services.StoragePropsInfo.DataItemIdPropName">
            <summary>
            Returns the name of the property that uniquely identifies the underlying data items.
            </summary>
        </member>
        <member name="T:Infragistics.Services.AssemblyVersion">
            <summary>
            Contains version information for the Infragistics assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.MajorMinor">
            <summary>
            Major.Minor number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.Build">
            <summary>
            Build number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.Revision">
            <summary>
            Revision number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.Version">
            <summary>
            Assembly version number
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.FileVersion">
            <summary>
            Assembly file version number. Normally will match the AssemblyVersion number.
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.EndCopyrightYear">
            <summary>
            End year of assembly copyright
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The assembly version number for the satellite assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.AssemblyNamePrefix">
            <summary>
            The prefix of all assembly names in the product.
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.AssemblyNameSuffix">
            <summary>
            The suffix of all assembly names in the product.
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.Platform">
            <summary>
            Specifies platform name for the assembly
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.Product">
            <summary>
            Specifies product name for the assembly
            </summary>
        </member>
        <member name="F:Infragistics.Services.AssemblyVersion.ProductTitleSuffix">
            <summary>
            The product tile suffix
            </summary>
        </member>
        <member name="M:Infragistics.Services.ViewItemManager`1.#ctor(Infragistics.Services.IFieldValueAccessor,Infragistics.Controls.Schedules.Services.DataListEventListener,Infragistics.Services.IFieldValueAccessor)">
            <summary>
            Constructor.
            </summary>
            <param name="idField">Used for accessing id field values of data items.</param>
            <param name="dataListEventListener">Used for hooking into data items for property change notifications.</param>
            <param name="viewItemIdProperty">Optional. If the view item has a data item id property then this specifies the fva used for 
            getting and setting it. This is used for add-new item functionality.</param>
        </member>
        <member name="M:Infragistics.Services.ViewItemManager`1.UpdateResultDataList_Add(System.Collections.IList,System.Object,System.Boolean,System.Boolean)">
            <summary>
            This method is called whenever we get an add notification from the data source to update an individual query
            result list with the added item. It is also called whenever an item's property value changes and query criteria
            is re-evaluated and the item is to be added to a matching result data list. Note that at this point the query 
            criteria is already evaluated and determined that the added item should be in the result data list.
            </summary>
            <param name="resultDataList">Query result's list, which contains the data items.</param>
            <param name="dataItem">Data item that is to be added.</param>
            <param name="checkIfAlreadyExists">Whether to check if the item already exists in the result data list.</param>
            <param name="replaceExistingItem">If there's an existing item with the same id value then this parameter specifies
            whether to replace it with the passed in one or leave the original item there and do nothing.</param>
        </member>
        <member name="M:Infragistics.Services.ViewItemManager`1.UpdateResultDataList_Remove(System.Collections.IList,System.Object)">
            <summary>
            Called to remove the specified data item from the result data list.
            </summary>
            <param name="resultDataList">Query result's list, which contains the data items.</param>
            <param name="dataItem">Data item that is to be removed.</param>
        </member>
        <member name="T:Infragistics.Services.PropertyMappingBase`1">
            <summary>
            Contains information regarding a specific property of the underlying data object 
            and which property of the associated view object that data object property is 
            mapped to.
            </summary>
            <typeparam name="TKey">
            Either an enum that enumerates the properties of the view object or string that 
            identifies the property or the metadata key when used by the 
            <see cref="T:Infragistics.Services.MetadataPropertyMapping" />.
            </typeparam>
        </member>
        <member name="M:Infragistics.Services.PropertyMappingBase`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Infragistics.Services.PropertyMappingBase`1.ScheduleProperty">
            <summary>
            Identifies a property on the XamSchedule object.
            </summary>
            <remarks>
            <b>ScheduleProperty</b> identifies a property on the XamSchedule object, like Apppointment or Resource.
            </remarks>
        </member>
        <member name="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty">
            <summary>
            Specifies the property of the data objects in the data source.
            </summary>
            <remarks>
            <para class="body">
            The value of this property of a data source object will be used for 
            the associated view object's property. The view object's property is
            specified using the appropriate property exposed by the view object
            specific mapping class derived from this class. For example, in the case
            of <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping" />, <i>AppointmentPropertyMapping</i>'s
            <see cref="P:Infragistics.Services.PropertyMappingBase`1.DataObjectProperty" /> identifies 
            the property of the data objects in the 
            <see cref="!:ListScheduleDataConnector.AppointmentItemsSource" />.
            <i>AppointmentPropertyMapping</i>'s <see cref="P:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping.AppointmentProperty" />
            identifies the property of the <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object, including properties
            of its base class <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" />, that this data object property maps to.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping.AppointmentProperty" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.JournalPropertyMapping.JournalProperty" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.TaskPropertyMapping.TaskProperty" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ResourcePropertyMapping.ResourceProperty" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMapping.ResourceCalendarProperty" />
        </member>
        <member name="P:Infragistics.Services.PropertyMappingBase`1.Converter">
            <summary>
            Specifies the converter to use when converting between the schedule property's value
            and the data object's property's value.
            </summary>
            <remarks>
            <para class="body">
            Converter's Convert method is used when copying value from the data source to the 
            schedule property. ConvertBack method is used when copying value from the schedule 
            property to the data source, which happens when the schedule property's value is 
            modified, for example by the user via appointment modification dialog.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Services.PropertyMappingBase`1.ConverterParameter" />
        </member>
        <member name="P:Infragistics.Services.PropertyMappingBase`1.ConverterParameter">
            <summary>
            Specifies the converter parameter that will be passed in the Convert and ConvertFrom methods of
            the <see cref="P:Infragistics.Services.PropertyMappingBase`1.Converter" />. If null then the underlying data item will be passed.
            </summary>
            <seealso cref="P:Infragistics.Services.PropertyMappingBase`1.Converter" />
        </member>
        <member name="T:Infragistics.Services.MetadataPropertyMapping">
            <summary>
            Used for mapping a field in the data source to an entry in the Metadata dictionary.
            </summary>
            <remarks>
            <para class="body">
            <b>MetadataPropertyMapping</b> used by the <see cref="T:Infragistics.Services.MetadataPropertyMappingCollection" />.
            MetadataPropertyMapping objects in the collection are used to populate the 
            metadata dictionary of the associated schedule object (for example the 
            <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Metadata" /> dictionary of the <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object).
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Services.MetadataPropertyMapping.MetadataProperty">
            <summary>
            Specifies the key in the Metadata dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.Services.IPropertyMappingCollection`1">
            <summary>
            This is used by ListManager.
            </summary>
            <typeparam name="TKey">Property key type.</typeparam>
        </member>
        <member name="T:Infragistics.Services.PropertyMappingCollection`2">
            <summary>
            Base class for various field mapping collections used for specifying which field in the 
            schedule object points to which field in the data source.
            </summary>
            <typeparam name="TKey">
            Either an enum that enumerates the properties of the schedule object (for example when 
            used by the <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection" />) or string that identifies 
            the metadata key when used by the <see cref="T:Infragistics.Services.MetadataPropertyMapping" />.
            </typeparam>
            <typeparam name="TMapping">
            A <see cref="T:Infragistics.Services.PropertyMappingBase`1" /> derived class.
            </typeparam>
        </member>
        <member name="M:Infragistics.Services.PropertyMappingCollection`2.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Services.PropertyMappingCollection`2" />.
            </summary>
        </member>
        <member name="P:Infragistics.Services.PropertyMappingCollection`2.Item(`0)">
            <summary>
            Returns the data member to which the specified schedule property or metadata entry is mapped to.
            </summary>
            <param name="key">Identifies the schedule property or metadata entry.</param>
            <returns>The data member or null if the mapping for the specified key has not been specified yet.</returns>
        </member>
        <member name="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings">
            <summary>
            Used for defining metadata field mappings.
            </summary>
            <remarks>
            <para class="body">
            <b>MetadataPropertyMappings</b> property is used to specify fields from which 
            the Metadata (<see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Metadata" />) dictionary will be populated
            (as well as saved). An entry for each of the fields specified in this collection 
            will be created in the Metadata dictionary of the associated object. This can 
            be used in conjuction with a Metadata field mapping entry in the containing field 
            mapping collection in which case all the entries in the Metadata dictionary will
            be saved to and retrieved from that field except for the entries for which an 
            explicit mapping has been defined in the collection returned by this property. 
            </para>
            <para class="body">
            For example, let's say
            you have "A", "B" and "C" entries in the Metadata dictionary. You define an entry
            in the containining <see cref="T:Infragistics.Services.PropertyMappingCollection`2" /> that specifies that the
            Metadata dictionary will be saved and retrieved from "Meta" field. You also define 
            an entry for "C" in the collection returned by this property. In such a scenario, the
            "A" and "B" values of the Metadata dictionary will be saved to the "Meta" field
            in the form of an XML document and the value of the "C" entry will be saved to
            the field specified by the associated mapping in the MetadataPropertyMappings collection.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Services.PropertyMappingCollection`2.UseDefaultMappings">
            <summary>
            Specifies whether to use default mappings.
            </summary>
            <remarks>
            <para class="body">
            <b>UseDefaultMappings</b> property is used to automatically map fields in the data source.
            The name of the field in the data source is expected be the same as the name of the 
            member of the enum that enumerates the fields of the associated object whose member mappings
            are being provided (for example the <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentProperty" /> enum).
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Services.PropertyMappingCollection`2.CreateNew(`0,System.String)">
            <summary>
            Creates a new instance of mapping object that's compatible with this collection.
            </summary>
            <param name="key">Identifies the schedule property or metadata key depending on whether 
            this mappings collection is for a schedule class (like Appointment) or for metadata dictionary.</param>
            <param name="value">The name of the field in the underlying data source.</param>
            <returns>New instance of mapping object that's compatible with this collection.</returns>
        </member>
        <member name="M:Infragistics.Services.PropertyMappingCollection`2.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises PropertyChanged event.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Infragistics.Services.PropertyMappingCollection`2.GetItem(`0)">
            <summary>
            Gets the <typeparamref name="TMapping" /> instance associated with the specified key.
            </summary>
            <param name="key">Identifies the property.</param>
            <returns>If a mapping for the specified key has been specified, returns the mapping object. Otherwise returns null.</returns>
        </member>
        <member name="M:Infragistics.Services.PropertyMappingCollection`2.Remove(`0)">
            <summary>
            Removes the mapping for the specified key.
            </summary>
            <param name="key">Key of the mapping to remove from the collection.</param>
            <returns>True if the item was found and removed. False if the item wasn't found.</returns>
            <remarks>
            <para class="body">
            If the mapping doesn't existing in the collection, this method will do nothing.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Services.MetadataPropertyMappingCollection">
            <summary>
            Collection used for specifying fields whose values will be added to the <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Metadata" /> dictionary.
            </summary>
            <remarks>
            <para class="body">
            <b>MetadataPropertyMappingCollection</b> class is used by the <see cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
            property. The underlying <see cref="T:Infragistics.Controls.Schedules.Services.ActivityBase" /> derived instance created from a data item in the data source for
            which these mappings are for will have its <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Metadata" /> dictionary populated with values
            from fields that are specified in this mappings collection. Changes to the Metadata dictionary will also be posted
            back to the data source based on these mappings.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Services.PropertyMappingCollection`2.MetadataPropertyMappings" />
            <seealso cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Metadata" />
        </member>
        <member name="M:Infragistics.Services.MetadataPropertyMappingCollection.Add(System.String,System.String)">
            <summary>
            Adds mapping for the metadata entry whose key is 'metadataKey'.
            </summary>
            <param name="metadataKey">Identifies the key of the entry in the associated schedule object's <see cref="P:Infragistics.Controls.Schedules.Services.ActivityBase.Metadata" /> dictionary.</param>
            <param name="dataSourceField">The data member in the data source.</param>
        </member>
        <member name="T:Infragistics.Services.ItemFactory">
            <summary>
            Used for creating objects of a specific type.
            </summary>
        </member>
        <member name="M:Infragistics.Services.ItemFactory.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Services.ItemFactory.CreateNew">
            <summary>
            Creates new object.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="T:Infragistics.Services.ItemFactory`1">
            <summary>
            Used for creating objects of type specified by the generic template type parameter <typeparamref name="T" />.
            </summary>
            <typeparam name="T">Objects of this type will be created.</typeparam>
        </member>
        <member name="M:Infragistics.Services.ItemFactory`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Services.ItemFactory`1.CreateNew">
            <summary>
            Creates new object.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:Infragistics.Services.GenericListProxy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Services.GenericListPropxy`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Infragistics.Services.OperationResult">
            <summary>
            Used as a return value by methods that perform operations asynchronously.
            </summary>
            <remarks>
            <para class="body">
            An operation that needs to be performed asynchronously may not have the results available until a later
            time. A method performing such an operation can return an instance of OperationResult or a derived class.
            When the operation is complete, the result instance can be initialized with the available result.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Services.OperationResult.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Services.OperationResult" /> object.
            </summary>
        </member>
        <member name="P:Infragistics.Services.OperationResult.Error">
            <summary>
            If an error occurred during the process of getting activity query results, this property returns the error information.
            </summary>
        </member>
        <member name="P:Infragistics.Services.OperationResult.IsCanceled">
            <summary>
            Indicates if the operation was canceled.
            </summary>
        </member>
        <member name="P:Infragistics.Services.OperationResult.IsComplete">
            <summary>
            Indicates if the query operation has been completed.
            </summary>
            <remarks>
            <para class="body">
            When a query is performed asynchronously <b>IsComplete</b> will return false until the operation 
            has been completed. Also <i>Activities</i> property will return an empty collection until the query
            is complete after which it will raise its <i>INotifyCollectionChanged.CollectionChanged</i> event
            in accordance with the query results.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Services.OperationResult.InitializeResult(Infragistics.Services.DataErrorInfo,System.Boolean)">
            <summary>
            Initializes the <see cref="P:Infragistics.Services.OperationResult.Error" /> and <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> properties based on the specified values.
            </summary>
            <param name="error"><see cref="T:Infragistics.Services.DataErrorInfo" /> object if an error occurred, null otherwise.</param>
            <param name="isComplete">Indicates whether the results are complete. Specify false if further results are
            going to be available.</param>
            <remarks>
            <para class="body">
            An operation may be performed asynchronously. When a method that performs an operation is required 
            to return an instance of <i>OperationResult</i> derived class, you can return a new instance 
            and specify the result of the operation later via this method when it's available. While the asynchronous 
            operation is still pending, the <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property will return <i>False</i>. When the 
            result is available, you can call this method and specify 'isComplete' parameter as true to indicate 
            that the operation is complete and that the <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property should be set to true.
            </para>
            <para class="body">
            If an error occurs during the operation, you can call this method with the <see cref="T:Infragistics.Services.DataErrorInfo" /> 
            object containing the error information. Also specifiy true for 'isComplete' since no further action
            will be taken and operation is considered to be complete with an error.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Services.OperationResult.IsComplete" />
            <seealso cref="P:Infragistics.Services.OperationResult.Error" />
        </member>
        <member name="M:Infragistics.Services.OperationResult.OnCanceled">
            <summary>
            Called when the operation is canceled.
            </summary>
        </member>
        <member name="T:Infragistics.Services.CancelOperationResult">
            <summary>
            Represents the result of a cancel operation of a pending operation.
            </summary>
            <remarks>
            <para class="body">
            <b>CancelOperationResult</b> is used by the <see cref="!:XamScheduleDataManager.CancelPendingOperation" />
            method to return the status of the cancelation operation.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Services.CancelOperationResult.#ctor(Infragistics.Services.OperationResult)">
            <summary>
            Constructor.
            </summary>
            <param name="operation">Pending operation which is being canceled.</param>
        </member>
        <member name="M:Infragistics.Services.CancelOperationResult.#ctor(Infragistics.Services.OperationResult,Infragistics.Services.DataErrorInfo,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="operation">Pending operation which is being canceled.</param>
            <param name="error">Error info if any.</param>
            <param name="isComplete">Specifies whether the operation is complete.</param>
        </member>
        <member name="P:Infragistics.Services.CancelOperationResult.Operation">
            <summary>
            Operation being canceled.
            </summary>
        </member>
        <member name="M:Infragistics.Services.CancelOperationResult.InitializeResult(Infragistics.Services.DataErrorInfo,System.Boolean)">
            <summary>
            Initializes the <see cref="P:Infragistics.Services.OperationResult.Error" /> and 
            <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> properties based on the specified values.
            </summary>
            <param name="error"><see cref="T:Infragistics.Services.DataErrorInfo" /> object if an error occurred, null otherwise.</param>
            <param name="isComplete">Indicates whether the results are complete. Specify false if further results are
            going to be available.</param>
            <remarks>
            <para class="body">
            Activity operations may be executed asynchronously. When a method that performs an operation is required 
            to return an instance of <i>OperationResult</i> derived class, you can return a new instance 
            and specify the result of the operation later via this method when it's available. While the asynchronous 
            operation is still pending, the <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property will return <i>False</i>. When the 
            result is available, you can call this method and specify 'isComplete' parameter as true to indicate 
            that the operation is complete and that the <see cref="P:Infragistics.Services.OperationResult.IsComplete" /> property should be set to true.
            </para>
            <para class="body">
            If an error occurs during the operation, you can call this method with the <see cref="T:Infragistics.Services.DataErrorInfo" /> 
            object containing the error information. Also specifiy true for 'isComplete' since no further action
            will be taken and operation is considered to be complete with an error.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Services.OperationResult.IsComplete" />
            <seealso cref="P:Infragistics.Services.OperationResult.Error" />
        </member>
        <member name="T:Infragistics.Services.ErrorSeverity">
            <summary>
            Used to specifiy the <see cref="P:Infragistics.Services.DataErrorInfo.Severity" /> property.
            </summary>
        </member>
        <member name="F:Infragistics.Services.ErrorSeverity.Diagnostic">
            <summary>
            Diagnostic errors are intended for developers. They are informational in nature.
            </summary>
        </member>
        <member name="F:Infragistics.Services.ErrorSeverity.Warning">
            <summary>
            Warnigs are suitable for end use display.
            </summary>
        </member>
        <member name="F:Infragistics.Services.ErrorSeverity.Error">
            <summary>
            Errors should be displayed to the user.
            </summary>
        </member>
        <member name="F:Infragistics.Services.ErrorSeverity.SevereError">
            <summary>
            Severe or blocking errors indicate a state where the control can not operate as expected.
            </summary>
        </member>
        <member name="T:Infragistics.Services.DataErrorInfo">
            <summary>
            Contains information about one or more errors.
            </summary>
        </member>
        <member name="M:Infragistics.Services.DataErrorInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Services.DataErrorInfo" />.
            </summary>
            <param name="error">Error message.</param>
        </member>
        <member name="M:Infragistics.Services.DataErrorInfo.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Services.DataErrorInfo" />.
            </summary>
            <param name="exception">The source exception.</param>
        </member>
        <member name="M:Infragistics.Services.DataErrorInfo.#ctor(System.Collections.Generic.IList{Infragistics.Services.DataErrorInfo})">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.Services.DataErrorInfo" />.
            </summary>
            <param name="errorList">List of errors.</param>
        </member>
        <member name="M:Infragistics.Services.DataErrorInfo.ToString">
            <summary>
            Returns a string representation of the error(s).
            </summary>
            <returns>A concatenated list of the error messages.</returns>
        </member>
        <member name="P:Infragistics.Services.DataErrorInfo.Context">
            <summary>
            Gets the context object if any associated with the error.
            </summary>
            <remarks>
            <para class="body">
            If the error is specific to an activity, the context will the activity object itself.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Services.DataErrorInfo.DiagnosticText">
            <summary>
            Text that can be used to diagnose the error.
            </summary>
        </member>
        <member name="P:Infragistics.Services.DataErrorInfo.Exception">
            <summary>
            Gets the Exception object if any associated with the error.
            </summary>
        </member>
        <member name="P:Infragistics.Services.DataErrorInfo.ErrorList">
            <summary>
            If multiple errors occurred during an operation then this list will return the list of errors.
            </summary>
        </member>
        <member name="P:Infragistics.Services.DataErrorInfo.Severity">
            <summary>
            Specifies the severity of the error.
            </summary>
        </member>
        <member name="P:Infragistics.Services.DataErrorInfo.UserErrorText">
            <summary>
            Text to be displayed to the end user.
            </summary>
        </member>
        <member name="M:Infragistics.Services.DataErrorInfo.CreateFromList(System.Collections.Generic.IList{Infragistics.Services.DataErrorInfo})">
            <summary>
            If the errorList is empty, returns null. If it has one item, returns that item. Otherwise it creates
            a new data error info that wraps the error list.
            </summary>
            <param name="errorList"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Services.DeferredOperation">
            <summary>
            Helper class for invoking an action asynchronously with the ability to cancel the operation or invoke it synchronously at an earlier point.
            </summary>
        </member>
        <member name="T:Infragistics.Services.PropertySerializationInfo">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Services.PropertySerializationInfo.#ctor(System.Type,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Type of the property.</param>
            <param name="name">Name of the property.</param>
        </member>
        <member name="P:Infragistics.Services.PropertySerializationInfo.Type">
            <summary>
            Type of the property. If this property represents a collection property, then this type 
            should be the type of the items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Services.PropertySerializationInfo.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="P:Infragistics.Services.PropertySerializationInfo.IsGetOnlyCollectionProperty">
            <summary>
            Indicates if this property represents a get only collection property. In such a case, the collection type
            name will not be an element in the generated XML.
            </summary>
        </member>
        <member name="M:Infragistics.Services.PropertySerializationInfo.GetHashCode">
            <summary>
            Overridden. Returns the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.PropertySerializationInfo.Equals(System.Object)">
            <summary>
            Overridden. Checks to see if the specified object is equal to this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Services.ObjectSerializationInfo">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Infragistics.Services.ObjectSerializationInfo.COLLECTION_ELEMENT_DESIGNATOR_KEY">
            <summary>
            Used for designating collection elements in the dictionary returned
            by Serialize and in the dictionary passed into the Deserialize. Basically 
            the ObjectSerializationInfo for a collection will return a property with
            this name from its SerializedProperties collection and dictionaries from
            Serialize method and Deserialize methods will have an entry with this key
            and value that is a list of the collection elements.
            </summary>
        </member>
        <member name="P:Infragistics.Services.ObjectSerializationInfo.SerializedProperties">
            <summary>
            Returns a list of properties that are to be serialized.
            </summary>
        </member>
        <member name="M:Infragistics.Services.ObjectSerializationInfo.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deserializes the specified information into an instance of the object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Services.ObjectSerializationInfo.GetSerializedProperties">
            <summary>
            Returns a list of properties that are to be serialized.
            </summary>
        </member>
        <member name="M:Infragistics.Services.ObjectSerializationInfo.Serialize(System.Object)">
            <summary>
            Serializes the specified object. Returns a map of properties to their values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Services.DependencyObjectSerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing dependency objects.
            </summary>
        </member>
        <member name="M:Infragistics.Services.DependencyObjectSerializationInfo.#ctor(System.Type,System.Windows.DependencyProperty[])">
            <summary>
            Constructor.
            </summary>
            <param name="type"></param>
            <param name="dpProps"></param>
        </member>
        <member name="T:Infragistics.Services.ReflectionSerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing an object using reflection. 
            It only serializes public properties.
            </summary>
        </member>
        <member name="M:Infragistics.Services.ReflectionSerializationInfo.#ctor(System.Type,System.Func{System.Object},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Type of objects that this serialization info will serialize.</param>
            <param name="objectCreator">Used to create the object when deserializing. If null then public parameterless constructor will be used.</param>
            <param name="serializeDefaultValues">Specifies whether to serialize null values.</param>
        </member>
        <member name="T:Infragistics.Services.CollectionSerializationInfo`2">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a collection type.
            </summary>
        </member>
        <member name="M:Infragistics.Services.AttributeValueParser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Services.AttributeValueParser.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="dataPresenterCompatibilityMode">This parameter is for maintaining data presenter
            load-save behavior where it uses some wpf specific converters as well as has fallback
            logic for generically parsing some types using Utilities.ConvertDataValule.</param>
        </member>
        <member name="T:Infragistics.Services.ObjectSerializer">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Services.ObjectSerializer.#ctor(Infragistics.Services.AttributeValueParser)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Services.ObjectSerializer.RegisterInfo(System.Type,Infragistics.Services.ObjectSerializationInfo)">
            <summary>
            Registers an instance of ObjectSerializationInfo for a specific type where ObjectSerializationInfo
            can serialize and deserialize instances of that type.
            </summary>
            <param name="type"></param>
            <param name="info"></param>
        </member>
        <member name="M:Infragistics.Services.ObjectSerializer.RegisterReflectionSerializationInfo(System.Type)">
            <summary>
            Registers an instance of ReflectionSerializationInfo for the specified type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Infragistics.Services.ObjectSerializer.GetRegisteredInfo(System.Type)">
            <summary>
            Gets the object serialization information that was registed with <see cref="M:Infragistics.Services.ObjectSerializer.RegisterInfo(System.Type,Infragistics.Services.ObjectSerializationInfo)" /> method.
            </summary>
            <param name="type">Type for which to get the registered object serialization information</param>
            <returns><see cref="T:Infragistics.Services.ObjectSerializationInfo" /> instance.</returns>
        </member>
        <member name="M:Infragistics.Services.ObjectSerializer.GetRegisteredInfo(System.Type,System.String)">
            <summary>
            Gets the object serialization info for the type with the name of the 'typeName' and that is a base of the
            specified 'baseType'.
            </summary>
            <param name="baseType">Base type to match.</param>
            <param name="typeName">Name of the type to match.</param>
            <returns>ObjectSerializationInfo instance.</returns>
        </member>
        <member name="T:Infragistics.Services.TimeRange">
            <summary>
            Represents a range of time.
            </summary>
            <remarks>
            <para class="body">
            <b>TimeRange</b> class represents a range of time as defined by start and end <i>TimeSpan</i> values.
            </para>
            </remarks>
        </member>
        <member name="T:Infragistics.Services.TimeRange.SerializationInfo">
            <summary>
            Provides necessary information to the ObjectSerializerBase for serializing and deserializing a TimeRange.
            </summary>
        </member>
        <member name="M:Infragistics.Services.TimeRange.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Services.TimeRange" />.
            </summary>
            <param name="start">Start time of the time range, inclusive.</param>
            <param name="end">Start time of the time range, exclusive.</param>
        </member>
        <member name="M:Infragistics.Services.TimeRange.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Services.TimeRange.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Services.TimeRange.op_Equality(Infragistics.Services.TimeRange,Infragistics.Services.TimeRange)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Services.TimeRange" /> structures for equality
            </summary>
            <param name="range1">The first structure</param>
            <param name="range2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Services.TimeRange.op_Inequality(Infragistics.Services.TimeRange,Infragistics.Services.TimeRange)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Services.TimeRange" /> structures for inequality
            </summary>
            <param name="range1">The first structure</param>
            <param name="range2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Services.TimeRange.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.Services.DateRange" /></returns>
        </member>
        <member name="M:Infragistics.Services.TimeRange.ToString(System.String)">
            <summary>
            Returns a string representation of the range using the specified format to format the <see cref="P:Infragistics.Services.TimeRange.Start" /> and <see cref="P:Infragistics.Services.TimeRange.End" />
            </summary>
            <param name="format">The format used to format the Start and End times.</param>
            <returns>A string that represents this <see cref="T:Infragistics.Services.TimeRange" /></returns>
        </member>
        <member name="M:Infragistics.Services.TimeRange.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the range using the specified format to format the <see cref="P:Infragistics.Services.TimeRange.Start" /> and <see cref="P:Infragistics.Services.TimeRange.End" />
            </summary>
            <param name="format">The format used to format the Start and End times.</param>
            <param name="formatProvider">An object that provides culture specific formatting information</param>
            <returns>A string that represents this <see cref="T:Infragistics.Services.TimeRange" /></returns>
        </member>
        <member name="P:Infragistics.Services.TimeRange.End">
            <summary>
            Specifies the end time of the time range.
            </summary>
        </member>
        <member name="P:Infragistics.Services.TimeRange.IsEmpty">
            <summary>
            Returns true if the Start and End are the same values.
            </summary>
        </member>
        <member name="P:Infragistics.Services.TimeRange.Start">
            <summary>
            Specifies the start time of the time range.
            </summary>
        </member>
        <member name="M:Infragistics.Services.TimeRange.Normalize">
            <summary>
            Ensures that the start time is less than or equal to the end time.
            </summary>
        </member>
        <member name="M:Infragistics.Services.TimeRange.Equals(Infragistics.Services.TimeRange)">
            <summary>
            Compares two <see cref="T:Infragistics.Services.TimeRange" />
            </summary>
            <param name="other">The object to compare to this instance</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Services.Schedules.ValidateSecurityTokenEventArgs">
            <summary>
            Event args associated with the <see cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ValidateSecurityToken" /> event.
            </summary>
        </member>
        <member name="M:Infragistics.Services.Schedules.ValidateSecurityTokenEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Infragistics.Services.Schedules.ValidateSecurityTokenEventArgs.SecurityToken">
            <summary>
            Returns the security information that was be passed from the client.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.IWcfListConnectorService">
            <summary>
            The contract for a service which communicates list data about schedule objects between a client and server.
            </summary>
            <seealso cref="T:Infragistics.Services.Schedules.WcfListConnectorService" />
            <seealso cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceSingle" />
            <seealso cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceMulti" />
        </member>
        <member name="M:Infragistics.Services.Schedules.IWcfListConnectorService.GetInitialInfo(Infragistics.Services.Schedules.GetInitialInfoContext)">
            <summary>
            Gets the informatoin necessary to set up the data connector on the client.
            </summary>
            <param name="context">
            The client context information and all paramters needed by the remote service call.
            </param>
        </member>
        <member name="M:Infragistics.Services.Schedules.IWcfListConnectorService.PerformActivityOperation(Infragistics.Services.Schedules.PerformActivityOperationContext)">
            <summary>
            Performs an add, update, or remove operation on an activity.
            </summary>
            <param name="context">
            The client context information and all paramters needed by the remote service call.
            </param>
        </member>
        <member name="M:Infragistics.Services.Schedules.IWcfListConnectorService.Ping">
            <summary>
            A dummy method used to check for service availability.
            </summary>
        </member>
        <member name="M:Infragistics.Services.Schedules.IWcfListConnectorService.PollForItemSourceChanges(Infragistics.Services.Schedules.PollForItemSourceChangesContext)">
            <summary>
            Gets a collection of version information for each item source.
            </summary>
            <param name="context">
            The client context information and all paramters needed by the remote service call.
            </param>
        </member>
        <member name="M:Infragistics.Services.Schedules.IWcfListConnectorService.PollForItemSourceChangesDetailed(Infragistics.Services.Schedules.PollForItemSourceChangesDetailedContext)">
            <summary>
            Gets a collection of detailed changes to an item source since a specifiec version of it.
            </summary>
            <param name="context">
            The client context information and all paramters needed by the remote service call.
            </param>
        </member>
        <member name="M:Infragistics.Services.Schedules.IWcfListConnectorService.QueryActivities(Infragistics.Services.Schedules.QueryActivitiesContext)">
            <summary>
            Gets a list of activities which meet the criteria of the given linq query.
            </summary>
            <param name="context">
            The client context information and all paramters needed by the remote service call.
            </param>
        </member>
        <member name="T:Infragistics.Services.Schedules.WcfListConnectorServiceMulti">
            <summary>
            A WCF service which provides list schedule data to client. A new instance of this service will be created for 
            each remote call into the service and calls may be made on different threads. Because of this, the data sources
            provided to this service must be thread safe. Also, there is some overhead in setting up the service instance and 
            hooking up the data sources on the calls where they are needed. So if only a relatively small number of clients 
            will be connecting to the service, it is recommended that the <see cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceSingle" />
            is used instead, since the only one instance is ever created and the data sources only need to be hooked up once.
            </summary>
            <seealso cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceSingle" />
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorServiceMulti.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceMulti" /> instance.
            </summary>
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorServiceMulti.GetItemSource(Infragistics.Services.Schedules.ItemSourceType)">
            <summary>
            Gets the item source for a specific collection.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> For each remote call, this method will be called once at most per <see cref="T:Infragistics.Services.Schedules.ItemSourceType" />.
            </p>
            </remarks>
            <param name="itemSourceType">A value indicating which item source is required.</param>
            <returns>An IEnumerable instance or null of there is no item source for the requested value.</returns>
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorServiceMulti.InitializePropertyMappings(Infragistics.Services.Schedules.ItemSourceType,System.Object)">
            <summary>
            Initializes the property mappings collection for the specified type of item source.
            </summary>
            <param name="itemSourceType">Indicates the item source to which the property mappings apply.</param>
            <param name="mappings">The property mappings collection. This must be downcast to the concrete type to be initialized.</param>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.JournalPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourcePropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.TaskPropertyMappingCollection" />
        </member>
        <member name="T:Infragistics.Services.Schedules.ActivityBaseSerializableItem">
            <summary>
            A WCF serializable class which represents an activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.Categories">
            <summary>
            The Categories property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.Description">
            <summary>
            The Description property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.End">
            <summary>
            The End property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.EndTimeZoneId">
            <summary>
            The EndTimeZoneId property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.IsLocked">
            <summary>
            The IsLocked property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.IsOccurrenceDeleted">
            <summary>
            The IsOccurrenceDeleted property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.IsTimeZoneNeutral">
            <summary>
            The IsTimeZoneNeutral property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.IsVisible">
            <summary>
            The IsVisible property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.LastModifiedTime">
            <summary>
            The LastModifiedTime property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.MaxOccurrenceDateTime">
            <summary>
            The MaxOccurrenceDateTime property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.OriginalOccurrenceEnd">
            <summary>
            The OriginalOccurrenceEnd property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.OriginalOccurrenceStart">
            <summary>
            The OriginalOccurrenceStart property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.OwningCalendarId">
            <summary>
            The OwningCalendarId property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.OwningResourceId">
            <summary>
            The OwningResourceId property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.Recurrence">
            <summary>
            The Recurrence property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.RecurrenceVersion">
            <summary>
            The RecurrenceVersion property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.Reminder">
            <summary>
            The Reminder property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.ReminderEnabled">
            <summary>
            The ReminderEnabled property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.ReminderInterval">
            <summary>
            The ReminderInterval property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.RootActivityId">
            <summary>
            The RootActivityId property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.Start">
            <summary>
            The Start property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.StartTimeZoneId">
            <summary>
            The StartTimeZoneId property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.Subject">
            <summary>
            The Subject property value of the associated activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityBaseSerializableItem.VariantProperties">
            <summary>
            The VariantProperties property value of the associated activity.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ActivityCategorySerializableItem">
            <summary>
            A WCF serializable class which represents an activity category.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityCategorySerializableItem.CategoryName">
            <summary>
            The CategoryName property value of the associated activity category.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityCategorySerializableItem.Color">
            <summary>
            The Color property value of the associated activity category.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityCategorySerializableItem.Description">
            <summary>
            The Description property value of the associated activity category.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ActivityListType">
            <summary>
            Represents a type of activity list or items source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityListType.Appointment">
            <summary>
            The appointment list.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityListType.Journal">
            <summary>
            The journal list.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityListType.RecurringAppointment">
            <summary>
            The recurring appointment list.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ActivityListType.Task">
            <summary>
            The task list.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.AppointmentSerializableItem">
            <summary>
            A WCF serializable class which represents an appointment.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.AppointmentSerializableItem.Location">
            <summary>
            The Location property value of the associated appointment.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.CallContext">
            <summary>
            The base class for client context information for all remote calls.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.CallContext.SecurityToken">
            <summary>
            Contains the security information from the client or null if the service does not require 
            security information to process messages.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.CallResult">
            <summary>
            The base class for remote call result data for all remote calls.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.CallResult.ErrorInfo">
            <summary>
            Information about any exception that may have been thrown during the remote call.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.DetailedItemSourceChangeInfo">
            <summary>
            Represents detailed information about what has changed in an item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.DetailedItemSourceChangeInfo.VersionInfo">
            <summary>
            The current version information of the list manager.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.DetailedItemSourceChangeInfo.Changes">
            <summary>
            The list of changes or null if no changes have occurred.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.GetInitialInfoContext">
            <summary>
            The client context information and all paramters needed by the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.GetInitialInfo(Infragistics.Services.Schedules.GetInitialInfoContext)" /> 
            operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.GetInitialInfoContext.RequestedInfo">
            <summary>
            The types of information needed by the caller.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.GetInitialInfoResult">
            <summary>
            The result information for the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.GetInitialInfo(Infragistics.Services.Schedules.GetInitialInfoContext)" /> operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.GetInitialInfoResult.ActivityCategoryItemsSource">
            <summary>
            An enumerable collection of all activity categories in the database.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.GetInitialInfoResult.ActivityCategoryItemsVersionInfo">
            <summary>
            The current version information of the activity category items.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.GetInitialInfoResult.ItemSourceInfos">
            <summary>
            Information about the item sources.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.GetInitialInfoResult.ResourceCalendarItemsSource">
            <summary>
            An enumerable collection of all resource calendars in the database.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.GetInitialInfoResult.ResourceCalendarItemsVersionInfo">
            <summary>
            The current version information of the resource calendar items.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.GetInitialInfoResult.ResourceItemsSource">
            <summary>
            An enumerable collection of all resources in the database.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.GetInitialInfoResult.ResourceItemsVersionInfo">
            <summary>
            The current version information of the resource items.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.InitialInfoTypes">
            <summary>
            Bit flags which specify types of information needed by a client.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.InitialInfoTypes.ResourceItemSource">
            <summary>
            The ResourceItemSource is needed by the client.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.InitialInfoTypes.ResourceCalendarItemSource">
            <summary>
            The ResourceCalendarItemSource is needed by the client.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.InitialInfoTypes.ItemSourceInfos">
            <summary>
            Information about all the items sources is needed by the client.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.InitialInfoTypes.ActivityCategoryItemSource">
            <summary>
            The ActivityCategoryItemSource is needed by the client.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.InitialInfoTypes.All">
            <summary>
            All information is needed by the client.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ItemSourceChange">
            <summary>
            Represents a change which has occurred on an item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceChange.ChangeType">
            <summary>
            The type of change that has occurred.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceChange.ChangedItem">
            <summary>
            The changed item or null if the <see cref="F:Infragistics.Services.Schedules.ItemSourceChange.ChangeType" /> is <see cref="T:Infragistics.Services.Schedules.ItemSourceChangeType" />.Reset.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ItemSourceChangeType">
            <summary>
            Represents a type of change to an item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceChangeType.AddItem">
            <summary>
            An item has been added to the item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceChangeType.ChangeItem">
            <summary>
            An item has been changed on the item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceChangeType.RemoveItem">
            <summary>
            An item has been removed from the item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceChangeType.Reset">
            <summary>
            The item source has been reset or too many changes to the item source have occurred 
            and the client should just requery as if a reset has occurred.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ItemSourceType">
            <summary>
            Indentifies a type of item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceType.ActivityCategory">
            <summary>
            The activity category item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceType.Appointment">
            <summary>
            The appointment item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceType.Journal">
            <summary>
            The journal item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceType.RecurringAppointment">
            <summary>
            The recurring appointment item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceType.ResourceCalendar">
            <summary>
            The resource calendar item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceType.Resource">
            <summary>
            The resource item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceType.Task">
            <summary>
            The task item source.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ItemSourceInfo">
            <summary>
            A WCF serializable class which provides information about an items source from the server.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceInfo.VersionInfo">
            <summary>
            The current version information of the list manager.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ItemSourceInfo.MappedProperties">
            <summary>
            A list of properties that have mappings on the server side.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.JournalSerializableItem">
            <summary>
            A WCF serializable class which represents a journal entry.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ListManagerVersionInfo">
            <summary>
            Represents the version of a list manager and it's data.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ListManagerVersionInfo.ChangeHistoryId">
            <summary>
            The Id of the class which manages the data list version number.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ListManagerVersionInfo.DataListVersion">
            <summary>
            The current version of the item source.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ListManagerVersionInfo.HasList">
            <summary>
            Gets or sets the value indicating whether an item source list is specified.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ListManagerVersionInfo.ListCapabilities">
            <summary>
            Represents the operations which can be perfromed on the item source. 
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ListManagerVersionInfo.PropertyMappingsVersion">
            <summary>
            The current version of the property mappings.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.PerformActivityOperationContext">
            <summary>
            The client context information and all paramters needed by the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.PerformActivityOperation(Infragistics.Services.Schedules.PerformActivityOperationContext)" /> 
            operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PerformActivityOperationContext.Activity">
            <summary>
            The activity which should be added, updated, or removed.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PerformActivityOperationContext.ClientVersionInfo">
            <summary>
            The client's version information of the list manager associated with the activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PerformActivityOperationContext.Operation">
            <summary>
            The operation to be performed.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.PerformActivityOperationResult">
            <summary>
            The result information for the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.PerformActivityOperation(Infragistics.Services.Schedules.PerformActivityOperationContext)" /> operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PerformActivityOperationResult.NewVersionInfo">
            <summary>
            The server's version information of the list associated with the activity after the add operation is complete.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PerformActivityOperationResult.UpdatedActivityIfChanged">
            <summary>
            During an add or update operation, contains the updated activity information if the service has 
            modified the data on the client's activity.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PerformActivityOperationResult.VersionWasOutOfDate">
            <summary>
            Indicates whether the client's version of the list was out of date when the call was received.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.PollForItemSourceChangesContext">
            <summary>
            The client context information and all paramters needed by the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.PollForItemSourceChanges(Infragistics.Services.Schedules.PollForItemSourceChangesContext)" /> 
            operation contract.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.PollForItemSourceChangesResult">
            <summary>
            The result information for the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.PollForItemSourceChanges(Infragistics.Services.Schedules.PollForItemSourceChangesContext)" /> operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PollForItemSourceChangesResult.VersionInfos">
            <summary>
            A dictionary of list manager version information keyed by the type of item source.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.PollForItemSourceChangesDetailedContext">
            <summary>
            The client context information and all paramters needed by the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.PollForItemSourceChangesDetailed(Infragistics.Services.Schedules.PollForItemSourceChangesDetailedContext)" /> 
            operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PollForItemSourceChangesDetailedContext.ClientItemSourceVersions">
            <summary>
            A collection of the versions of the item sources the client's data reflects. 
            All changes returned from this method will have occurred after the item source had this version.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.PollForItemSourceChangesDetailedResult">
            <summary>
            The result information for the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.PollForItemSourceChangesDetailed(Infragistics.Services.Schedules.PollForItemSourceChangesDetailedContext)" /> operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.PollForItemSourceChangesDetailedResult.DetailedChanges">
            <summary>
            A dictionary of detailed changes to an item source since a specifiec version of it.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.QueryActivitiesContext">
            <summary>
            The client context information and all paramters needed by the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.QueryActivities(Infragistics.Services.Schedules.QueryActivitiesContext)" /> 
            operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.QueryActivitiesContext.ListType">
            <summary>
            The type of activity list which should being queried.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.QueryActivitiesContext.LinqStatementEncoded">
            <summary>
            The XML encoded linq query.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.QueryActivitiesResult">
            <summary>
            The result information for the <see cref="M:Infragistics.Services.Schedules.IWcfListConnectorService.QueryActivities(Infragistics.Services.Schedules.QueryActivitiesContext)" /> operation contract.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.QueryActivitiesResult.Activities">
            <summary>
            An enumerable collection of the activities meeting the conditions on the query.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ResourceCalendarSerializableItem">
            <summary>
            A WCF serializable class which represents a resource calendar.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceCalendarSerializableItem.BaseColor">
            <summary>
            The BaseColor property value of the associated resource calendar.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceCalendarSerializableItem.IsVisible">
            <summary>
            The IsVisible property value of the associated resource calendar.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceCalendarSerializableItem.Description">
            <summary>
            The Description property value of the associated resource calendar.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceCalendarSerializableItem.Name">
            <summary>
            The Name property value of the associated resource calendar.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceCalendarSerializableItem.OwningResourceId">
            <summary>
            The OwningResourceId property value of the associated resource calendar.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.ResourceSerializableItem">
            <summary>
            A WCF serializable class which represents a resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.CustomActivityCategories">
            <summary>
            The CustomActivityCategories property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.DaySettingsOverrides">
            <summary>
            The DaySettingsOverrides property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.DaysOfWeek">
            <summary>
            The DaysOfWeek property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.Description">
            <summary>
            The Description property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.EmailAddress">
            <summary>
            The EmailAddress property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.FirstDayOfWeek">
            <summary>
            The FirstDayOfWeek property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.IsLocked">
            <summary>
            The IsLocked property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.IsVisible">
            <summary>
            The IsVisible property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.Name">
            <summary>
            The Name property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.PrimaryCalendarId">
            <summary>
            The PrimaryCalendarId property value of the associated resource.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.ResourceSerializableItem.PrimaryTimeZoneId">
            <summary>
            The PrimaryTimeZoneId property value of the associated resource.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.SerializableItemBase">
            <summary>
            A base class for any WCF serializable item.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.SerializableItemBase.Id">
            <summary>
            The Id property value of the associated item.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.SerializableItemBase.UnmappedProperties">
            <summary>
            The UnmappedProperties property value of the associated resource.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.TaskSerializableItem">
            <summary>
            A WCF serializable class which represents a task.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.TaskSerializableItem.PercentageComplete">
            <summary>
            The PercentComplete property value of the associated task.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.WcfRemoteErrorInfo">
            <summary>
            Represents an error thrown when processing a message.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.WcfRemoteErrorInfo.ExceptionType">
            <summary>
            The full type name of the exception.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.WcfRemoteErrorInfo.Message">
            <summary>
            The message describing the error.
            </summary>
        </member>
        <member name="F:Infragistics.Services.Schedules.WcfRemoteErrorInfo.StackTrace">
            <summary>
            The stack tace of the error.
            </summary>
        </member>
        <member name="T:Infragistics.Services.Schedules.WcfListConnectorServiceSingle">
            <summary>
            A WCF service which provides list schedule data to client. Only one instance of this service class will be created
            and all remote calls will be run on the same thread. This reduces overhead on each remote call, but because of this, 
            this service should only be used when it is known that a relatively small number of clients will be connecting to the 
            service. If too many clients are connecting to this service and/or timeouts are occurring frequently on client machines, 
            use the <see cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceMulti" /> instead.
            </summary>
            <seealso cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceMulti" />
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceSingle" /> instance.
            </summary>
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ActivityCategoryItemsSource">
            <summary>
            Specifies the data source where the activity categories are stored.
            </summary>
            <seealso cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.AppointmentPropertyMappings" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ActivityCategoryPropertyMappings">
            <summary>
            Specifies the data source field mappings for the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ActivityCategoryPropertyMappings</b> property is used to specify which fields in the 
            <see cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ActivityCategoryItemsSource" /> provide data for which properties of the
            <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategory" /> object.
            </para>
            <para class="body">
            This property by default returns an empty collection. You can set the 
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.UseDefaultMappings" /> property 
            on the returned <i>ActivityCategoryPropertyMappingCollection</i> to true if the field names 
            in the data source are the same as the property names as defined by the <see cref="T:Infragistics.Controls.Schedules.Services.ActivityCategoryProperty" /> 
            enum. You can also set <i>UseDefaultMapping</i> to true and add entries for specific
            fields to override the field mappings for those particular fields while having the 
            rest of the fields use the default field mappings.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ActivityCategoryPropertyMapping" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ActivityCategoryProperty" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.AppointmentItemsSource">
            <summary>
            Specifies the data source where the appointments are stored.
            </summary>
            <seealso cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.AppointmentPropertyMappings" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.AppointmentPropertyMappings">
            <summary>
            Specifies the data source field mappings for the <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>AppointmentPropertyMappings</b> property is used to specify which fields in the 
            <see cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.AppointmentItemsSource" /> provide data for which properties of the
            <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object.
            </para>
            <para class="body">
            This property by default returns an empty collection. You can set the 
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.UseDefaultMappings" /> property 
            on the returned <i>AppointmentPropertyMappingCollection</i> to true if the field names 
            in the data source are the same as the property names as defined by the <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentProperty" /> 
            enum. You can also set <i>UseDefaultMapping</i> to true and add entries for specific
            fields to override the field mappings for those particular fields while having the 
            rest of the fields use the default field mappings.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.AppointmentProperty" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.JournalItemsSource">
            <summary>
            Specifies the data source where the journals are stored.
            </summary>
            <seealso cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.JournalPropertyMappings" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.JournalPropertyMappings">
            <summary>
            Specifies the data source field mappings for the <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>JournalPropertyMappings</b> property is used to specify which fields in the 
            <see cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.JournalItemsSource" /> provide data for which properties of the
            <see cref="T:Infragistics.Controls.Schedules.Services.Journal" /> object.
            </para>
            <para class="body">
            This property by default returns an empty collection. You can set the 
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.UseDefaultMappings" /> property 
            on the returned <i>JournalPropertyMappingCollection</i>
            to true if the field names in the data source are the same as the 
            property names as defined by the <see cref="T:Infragistics.Controls.Schedules.Services.JournalProperty" /> enum.
            You can also set <i>UseDefaultMapping</i> to true and add entries for specific
            fields to override the field mappings for those particular fields while having
            the rest of the fields use the default field mappings.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.JournalPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.JournalPropertyMapping" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.JournalProperty" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.RecurringAppointmentItemsSource">
            <summary>
            Specifies the data source where the recurring appointments are stored.
            </summary>
            <remarks>
            <para class="body">
            <b>RecurringAppointmentItemsSource</b> specifies the data source where the recurring
            appointments are stored. This is optional. If not specified then the recurring appointments
            will be stored in the data source specified by <see cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.AppointmentItemsSource" />.
            If specified then the recurring appointments, including variances, will be stored in this 
            data source.
            </para>
            <para class="body">
            Note that if this data source is specified then all the appointments in the 
            <i>AppointmentItemsSource</i> will be assumed to be non-recurring appointments. 
            In other words it's not allowed for both the <i>AppointmentItemsSource</i> and 
            <i>RecurringAppointmentItemsSource</i> data sources to contain recurring appointments.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.RecurringAppointmentPropertyMappings" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.RecurringAppointmentPropertyMappings">
            <summary>
            Specifies the data source field mappings for the <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>RecurringAppointmentPropertyMappings</b> property is used to specify which fields in the 
            <see cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.RecurringAppointmentItemsSource" /> provide data for which properties of the
            <see cref="T:Infragistics.Controls.Schedules.Services.Appointment" /> object.
            </para>
            <para class="body">
            This property by default returns an empty collection. You can set the 
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.UseDefaultMappings" /> property 
            on the returned <i>AppointmentPropertyMappingCollection</i> to true if the field names 
            in the data source are the same as the property names as defined by the <see cref="T:Infragistics.Controls.Schedules.Services.AppointmentProperty" /> 
            enum. You can also set <i>UseDefaultMappings</i> to true and add entries for specific
            fields to override the field mappings for those particular fields while having the 
            rest of the fields use the default field mappings.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.AppointmentPropertyMapping" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.AppointmentProperty" />
            <seealso cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.RecurringAppointmentItemsSource" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ResourceCalendarItemsSource">
            <summary>
            Specifies the data source where the resource calendars are stored.
            </summary>
            <seealso cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ResourceCalendarPropertyMappings" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ResourceCalendarPropertyMappings">
            <summary>
            Specifies the data source field mappings for the <see cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendar" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ResourceCalendarPropertyMappings</b> property is used to specify which fields in the 
            <see cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ResourceItemsSource" /> provide data for which properties of the
            <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> object.
            </para>
            <para class="body">
            This property by default returns an empty collection. You can set the 
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.UseDefaultMappings" /> property 
            on the returned <i>ResourceCalendarPropertyMappingCollection</i>  
            to true if the field names in the data source are the same as the 
            property names as defined by the <see cref="T:Infragistics.Controls.Schedules.Services.ResourceProperty" /> enum.
            You can also set <i>UseDefaultMapping</i> to true and add entries for specific
            fields to override the field mappings for those particular fields while having
            the rest of the fields use the default field mappings.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendarPropertyMapping" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourceCalendarProperty" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ResourceItemsSource">
            <summary>
            Specifies the data source where the resources are stored.
            </summary>
            <seealso cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ResourcePropertyMappings" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ResourcePropertyMappings">
            <summary>
            Specifies the data source field mappings for the <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>ResourcePropertyMappings</b> property is used to specify which fields in the 
            <see cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.ResourceItemsSource" /> provide data for which properties of the
            <see cref="T:Infragistics.Controls.Schedules.Services.Resource" /> object.
            </para>
            <para class="body">
            This property by default returns an empty collection. You can set the 
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.UseDefaultMappings" /> property 
            on the returned <i>ResourcePropertyMappingCollection</i>  
            to true if the field names in the data source are the same as the 
            property names as defined by the <see cref="T:Infragistics.Controls.Schedules.Services.ResourceProperty" /> enum.
            You can also set <i>UseDefaultMapping</i> to true and add entries for specific
            fields to override the field mappings for those particular fields while having
            the rest of the fields use the default field mappings.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourcePropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourcePropertyMapping" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ResourceProperty" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.TaskItemsSource">
            <summary>
            Specifies the data source where the tasks are stored.
            </summary>
            <seealso cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.TaskPropertyMappings" />
        </member>
        <member name="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.TaskPropertyMappings">
            <summary>
            Specifies the data source field mappings for the <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> object.
            </summary>
            <remarks>
            <para class="body">
            <b>TaskPropertyMappings</b> property is used to specify which fields in the 
            <see cref="P:Infragistics.Services.Schedules.WcfListConnectorServiceSingle.TaskItemsSource" /> provide data for which properties of the
            <see cref="T:Infragistics.Controls.Schedules.Services.Task" /> object.
            </para>
            <para class="body">
            This property by default returns an empty collection. You can set the 
            <see cref="P:Infragistics.Services.PropertyMappingCollection`2.UseDefaultMappings" /> property 
            on the returned <i>TaskPropertyMappingCollection</i>  
            to true if the field names in the data source are the same as the 
            property names as defined by the <see cref="T:Infragistics.Controls.Schedules.Services.TaskProperty" /> enum.
            You can also set <i>UseDefaultMapping</i> to true and add entries for specific
            fields to override the field mappings for those particular fields while having
            the rest of the fields use the default field mappings.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.TaskPropertyMappingCollection" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.TaskPropertyMapping" />
            <seealso cref="T:Infragistics.Controls.Schedules.Services.TaskProperty" />
        </member>
        <member name="T:Infragistics.Services.Schedules.WcfListConnectorService">
            <summary>
            Base class for WCF services used for providing schedule data to a client over WCF services.
            </summary>
            <remarks>
            <p class="body">
            There are two classes derived from this base class which cover most scenarios. <see cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceSingle" />
            is a single instance, single threaded WCF service. This service is ideal when a relatively small number of clients will be
            connecting to the service. The data sources can be initialized once when the service is first used, which gives a performance
            boost on subsequent remote calls. However, because all calls are processed on the same thread, having too many clients could 
            cause a bottleneck, especially if one of the clients requires a large amount of data from the service. When many clients will
            be connecting to the service, the <see cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceMulti" /> is a better choice. Each remote call is processed 
            on a different thread and with a different service instance. Because of this, the data sources must be thread safe, such as a 
            SQL database. Also, because a new service instance is needed for each call, some work must be done internally to hook up to 
            the data sources for each remote call. This will cause a slight performance hit for each call over the 
            WcfListConnectorServiceSingle.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceSingle" />
            <seealso cref="T:Infragistics.Services.Schedules.WcfListConnectorServiceMulti" />
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorService.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Services.Schedules.WcfListConnectorService" /> instance.
            </summary>
        </member>
        <member name="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityAdded">
            <summary>
            Raised after an activity is added.
            </summary>
            <remarks>
            <para class="body">
            <b>ActivityAdded</b> event is raised after a new activity is successfully commited.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ActivityAddedEventArgs" />
            <seealso cref="M:Infragistics.Services.Schedules.WcfListConnectorService.OnActivityAdded(Infragistics.Controls.Schedules.Services.ActivityAddedEventArgs)" />
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorService.OnActivityAdded(Infragistics.Controls.Schedules.Services.ActivityAddedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityAdded" /> event.
            </summary>
            <param name="args">Event args for raising the event.</param>
            <seealso cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityAdded" />
        </member>
        <member name="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityChanged">
            <summary>
            Raised after user changes to an activity are committed.
            </summary>
            <remarks>
            <para class="body">
            <b>ActivityChanged</b> event is raised after user changes to an 
            activity are committed.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ActivityChangedEventArgs" />
            <seealso cref="M:Infragistics.Services.Schedules.WcfListConnectorService.OnActivityChanged(Infragistics.Controls.Schedules.Services.ActivityChangedEventArgs)" />
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorService.OnActivityChanged(Infragistics.Controls.Schedules.Services.ActivityChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityChanged" /> event.
            </summary>
            <param name="args">Event args for raising the event.</param>
            <seealso cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityChanged" />
        </member>
        <member name="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityRemoved">
            <summary>
            Raised after an activity is removed.
            </summary>
            <remarks>
            <para class="body">
            <b>ActivityRemoved</b> event is raised after an activity is removed by the user.
            </para>
            </remarks>
            <seealso cref="T:Infragistics.Controls.Schedules.Services.ActivityRemovedEventArgs" />
            <seealso cref="M:Infragistics.Services.Schedules.WcfListConnectorService.OnActivityRemoved(Infragistics.Controls.Schedules.Services.ActivityRemovedEventArgs)" />
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorService.OnActivityRemoved(Infragistics.Controls.Schedules.Services.ActivityRemovedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityRemoved" /> event.
            </summary>
            <param name="args">Event args for raising the event.</param>
            <seealso cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ActivityRemoved" />
        </member>
        <member name="E:Infragistics.Services.Schedules.WcfListConnectorService.ValidateSecurityToken">
            <summary>
            Raised when a call is made on the service so the service can validate the caller.
            An exception should be thrown from the handler is the security information is invalid.
            </summary>
            <seealso cref="T:Infragistics.Services.Schedules.ValidateSecurityTokenEventArgs" />
            <seealso cref="M:Infragistics.Services.Schedules.WcfListConnectorService.OnValidateSecurityToken(Infragistics.Services.Schedules.ValidateSecurityTokenEventArgs)" />
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorService.OnValidateSecurityToken(Infragistics.Services.Schedules.ValidateSecurityTokenEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ValidateSecurityToken" /> event.
            </summary>
            <param name="args">Event args for raising the event.</param>
            <seealso cref="E:Infragistics.Services.Schedules.WcfListConnectorService.ValidateSecurityToken" />
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorService.OnRemoteCallProcessed(Infragistics.Services.Schedules.CallResult)">
            <summary>
            Occurs when a remote call is finished processing and it about to return to the client.
            </summary>
        </member>
        <member name="M:Infragistics.Services.Schedules.WcfListConnectorService.OnRemoteCallReceived(Infragistics.Services.Schedules.CallContext)">
            <summary>
            Occurs when a remote call is received by a client and is about to be processed.
            </summary>
        </member>
        <member name="T:Infragistics.DependencyObjectNotifier">
            <summary>
            Abstract base class for objects that implement INotifyPropertyChanged and derive from DependencyObject
            </summary>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DependencyObjectNotifier" /> class
            </summary>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.OnPropertyChanged(System.String)">
            <summary>
            Used to raise the <see cref="E:Infragistics.DependencyObjectNotifier.PropertyChanged" /> event for the specified property name.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.RaisePropertyChangedEvent(System.String,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="nestedSender">The sender whose property change notification triggered this change</param>
            <param name="nestedArgs">The nested arguments</param>
        </member>
        <member name="E:Infragistics.DependencyObjectNotifier.PropertyChanged">
            <summary>
            Raised when a property has changed
            </summary>
        </member>
        <member name="T:Infragistics.Shared.Services.ResourceCustomizer">
            <summary>
            Class used to provide the ability to customize resource strings.
            </summary>
            <remarks>
            <p>There is an instance of this class exposed by the <see cref="!:Infragistics.Shared.ResourceCustomizer" /> property of the Resources object exposed by each Infragistics.Win assembly.</p>
            <p>It allows for customization/substitution of strings that would normally be loaded from resources.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Shared.Services.ResourceCustomizer.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Shared.Services.ResourceCustomizer" />
            </summary>
        </member>
        <member name="P:Infragistics.Shared.Services.ResourceCustomizer.CustomizedStringsVersion">
            <summary>
            For internal infrastructure use. This number is incremented every time a 
            customized string is modified.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Services.ResourceCustomizer.GetCustomizedString(System.String)">
            <summary>
            Gets the customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource that was customized.</param>
            <returns>The customized string or nulll if the resoource wasn't customized.</returns>
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetAllCustomizedStrings" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetCustomizedString(System.String)" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.SetCustomizedString(System.String,System.String)" />
        </member>
        <member name="M:Infragistics.Shared.Services.ResourceCustomizer.RefreshLocalizedResources">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Shared.Services.ResourceCustomizer.ResourceCustomizationChanged" /> for all <see cref="T:Infragistics.Shared.Services.ResourceCustomizer" /> instances
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Services.ResourceCustomizer.ResetAllCustomizedStrings">
            <summary>
            Clears all strings customized by calls to <see cref="M:Infragistics.Shared.Services.ResourceCustomizer.SetCustomizedString(System.String,System.String)" /> method.
            </summary>
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.SetCustomizedString(System.String,System.String)" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetCustomizedString(System.String)" />
        </member>
        <member name="M:Infragistics.Shared.Services.ResourceCustomizer.ResetCustomizedString(System.String)">
            <summary>
            Resets a customized string identified by the specified string resource name so that it will load from the resource file.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.SetCustomizedString(System.String,System.String)" />
        </member>
        <member name="M:Infragistics.Shared.Services.ResourceCustomizer.SetCustomizedString(System.String,System.String)">
            <summary>
            Sets a customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <param name="customizedText">The customized string. If null this has the same effect as calling <see cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetCustomizedString(System.String)" /></param>
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetAllCustomizedStrings" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetCustomizedString(System.String)" />
        </member>
        <member name="E:Infragistics.Shared.Services.ResourceCustomizer.ResourceCustomizationChanged">
            <summary>
            This event is raised when a string is customized. The property name in the event arguments refers to the resource name. 
            </summary>
            <remarks>If PropertyName is null then all customizations have been reset.</remarks>
        </member>
        <member name="T:Infragistics.Shared.Services.DynamicResourceString">
            <summary>
            A class that tracks customization changes to a resource and raises an event when the resource value is changed.
            </summary>
            <seealso cref="T:Infragistics.Shared.Services.ResourceCustomizer" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.SetCustomizedString(System.String,System.String)" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetCustomizedString(System.String)" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetAllCustomizedStrings" />
        </member>
        <member name="M:Infragistics.Shared.Services.DynamicResourceString.#ctor(Infragistics.Shared.Services.ResourceCustomizer,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            This constructor is for internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Services.DynamicResourceString.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
        </member>
        <member name="P:Infragistics.Shared.Services.DynamicResourceString.Value">
            <summary>
            Returns the converted string resource
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Services.DynamicResourceString.GetStringFromResource(System.String,System.Globalization.CultureInfo)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Services.DynamicResourceString.DoPropertiesMatch(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:Infragistics.Shared.Services.DynamicResourceString.PropertyChanged">
            <summary>
            Occurs when the underlying resource string changes via the ResourceCustomizer
            </summary>
            <seealso cref="T:Infragistics.Shared.Services.ResourceCustomizer" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.SetCustomizedString(System.String,System.String)" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetCustomizedString(System.String)" />
            <seealso cref="M:Infragistics.Shared.Services.ResourceCustomizer.ResetAllCustomizedStrings" />
        </member>
        <member name="T:Infragistics.Shared.Services.DynamicResourceString.ID">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Services.DynamicResourceString.ID.#ctor(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Creates an instance of the struct
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Services.DynamicResourceString.ID.Equals(System.Object)">
            <summary>
            Returns true if the passed in object is equal
            </summary>
        </member>
        <member name="M:Infragistics.Shared.Services.DynamicResourceString.ID.GetHashCode">
            <summary>
            Caclulates a value used for hashing
            </summary>
        </member>
        <member name="T:Infragistics.StringResourceLocationAttribute">
            <summary>
            A custom attribute to specify the location of strings.
            Use: [assembly: StringResourceLocation("Infragistics.Silverlight.Strings")]
            </summary>
        </member>
        <member name="P:Infragistics.StringResourceLocationAttribute.Location">
            <summary>
            Specifies the location of strings.resx
            </summary>
        </member>
        <member name="M:Infragistics.StringResourceLocationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.StringResourceLocationAttribute" />
            </summary>
            <param name="location">The location of string</param>
        </member>
    </members>
</doc>
