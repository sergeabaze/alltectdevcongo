<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWPF4.Controls.Maps.XamMap.v17.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer">
            <summary>
            The automation peer for the map color swatch pane
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.#ctor(Infragistics.Controls.Maps.MapColorSwatchPane)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer"/> class.
            </summary>
            <param name="pane">The pane.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.Pane">
            <summary>
            Gets or sets the pane.
            </summary>
            <value>The pane.</value>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>A value of the enumeration.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>
            The name of the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. See Remarks.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.DockPosition">
            <summary>
            Gets the current <see cref="T:System.Windows.Automation.DockPosition"/> of the control in a docking container.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Windows.Automation.DockPosition"/> of the control, relative to the boundaries of the docking container and to other elements in the container.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.SetDockPosition(System.Windows.Automation.DockPosition)">
            <summary>
            Docks the control in a docking container.
            </summary>
            <param name="dockPosition">The dock position, relative to the boundaries of the docking container and to other elements in the container.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.CanMove">
            <summary>
            Gets a value that indicates whether the element can be moved.
            </summary>
            <value></value>
            <returns>true if the element can be moved; otherwise, false. </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.CanResize">
            <summary>
            Gets a value that indicates whether the element can be resized.
            </summary>
            <value></value>
            <returns>true if the element can be resized; otherwise, false. </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.CanRotate">
            <summary>
            Gets a value that indicates whether the element can be rotated.
            </summary>
            <value></value>
            <returns>true if the element can be rotated; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.Move(System.Double,System.Double)">
            <summary>
            Moves the control.
            </summary>
            <param name="x">The absolute screen coordinates of the left side of the control.</param>
            <param name="y">The absolute screen coordinates of the top of the control.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.Resize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="width">The new width of the window, in pixels.</param>
            <param name="height">The new height of the window, in pixels.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapColorSwatchPaneAutomationPeer.Rotate(System.Double)">
            <summary>
            Rotates the control.
            </summary>
            <param name="degrees">The number of degrees to rotate the control. A positive number rotates the control clockwise. A negative number rotates the control counterclockwise.</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer">
            <summary>
            The automation peer for the map navigation pane
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.#ctor(Infragistics.Controls.Maps.MapNavigationPane)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer"/> class.
            </summary>
            <param name="pane">The pane.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.Pane">
            <summary>
            Gets or sets the pane.
            </summary>
            <value>The pane.</value>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>A value of the enumeration.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>
            The name of the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. See Remarks.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.DockPosition">
            <summary>
            Gets the current <see cref="T:System.Windows.Automation.DockPosition"/> of the control in a docking container.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Windows.Automation.DockPosition"/> of the control, relative to the boundaries of the docking container and to other elements in the container.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.SetDockPosition(System.Windows.Automation.DockPosition)">
            <summary>
            Docks the control in a docking container.
            </summary>
            <param name="dockPosition">The dock position, relative to the boundaries of the docking container and to other elements in the container.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.CanMove">
            <summary>
            Gets a value that indicates whether the element can be moved.
            </summary>
            <value></value>
            <returns>true if the element can be moved; otherwise, false. </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.CanResize">
            <summary>
            Gets a value that indicates whether the element can be resized.
            </summary>
            <value></value>
            <returns>true if the element can be resized; otherwise, false. </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.CanRotate">
            <summary>
            Gets a value that indicates whether the element can be rotated.
            </summary>
            <value></value>
            <returns>true if the element can be rotated; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.Move(System.Double,System.Double)">
            <summary>
            Moves the control.
            </summary>
            <param name="x">The absolute screen coordinates of the left side of the control.</param>
            <param name="y">The absolute screen coordinates of the top of the control.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.Resize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="width">The new width of the window, in pixels.</param>
            <param name="height">The new height of the window, in pixels.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapNavigationPaneAutomationPeer.Rotate(System.Double)">
            <summary>
            Rotates the control.
            </summary>
            <param name="degrees">The number of degrees to rotate the control. A positive number rotates the control clockwise. A negative number rotates the control counterclockwise.</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer">
            <summary>
            The automation peer for the map scale pane
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.#ctor(Infragistics.Controls.Maps.MapScalePane)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer"/> class.
            </summary>
            <param name="pane">The pane.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.Pane">
            <summary>
            Gets or sets the pane.
            </summary>
            <value>The pane.</value>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>A value of the enumeration.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>
            The name of the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. See Remarks.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.DockPosition">
            <summary>
            Gets the current <see cref="T:System.Windows.Automation.DockPosition"/> of the control in a docking container.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Windows.Automation.DockPosition"/> of the control, relative to the boundaries of the docking container and to other elements in the container.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.SetDockPosition(System.Windows.Automation.DockPosition)">
            <summary>
            Docks the control in a docking container.
            </summary>
            <param name="dockPosition">The dock position, relative to the boundaries of the docking container and to other elements in the container.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.CanMove">
            <summary>
            Gets a value that indicates whether the element can be moved.
            </summary>
            <value></value>
            <returns>true if the element can be moved; otherwise, false. </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.CanResize">
            <summary>
            Gets a value that indicates whether the element can be resized.
            </summary>
            <value></value>
            <returns>true if the element can be resized; otherwise, false. </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.CanRotate">
            <summary>
            Gets a value that indicates whether the element can be rotated.
            </summary>
            <value></value>
            <returns>true if the element can be rotated; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.Move(System.Double,System.Double)">
            <summary>
            Moves the control.
            </summary>
            <param name="x">The absolute screen coordinates of the left side of the control.</param>
            <param name="y">The absolute screen coordinates of the top of the control.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.Resize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="width">The new width of the window, in pixels.</param>
            <param name="height">The new height of the window, in pixels.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapScalePaneAutomationPeer.Rotate(System.Double)">
            <summary>
            Rotates the control.
            </summary>
            <param name="degrees">The number of degrees to rotate the control. A positive number rotates the control clockwise. A negative number rotates the control counterclockwise.</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer">
            <summary>
            The automation peer for the map thumbnail pane
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.#ctor(Infragistics.Controls.Maps.MapThumbnailPane)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer"/> class.
            </summary>
            <param name="pane">The pane.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.Pane">
            <summary>
            Gets or sets the pane.
            </summary>
            <value>The pane.</value>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>A value of the enumeration.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.DockPosition">
            <summary>
            Gets the current <see cref="T:System.Windows.Automation.DockPosition"/> of the control in a docking container.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Windows.Automation.DockPosition"/> of the control, relative to the boundaries of the docking container and to other elements in the container.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.SetDockPosition(System.Windows.Automation.DockPosition)">
            <summary>
            Docks the control in a docking container.
            </summary>
            <param name="dockPosition">The dock position, relative to the boundaries of the docking container and to other elements in the container.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.CanMove">
            <summary>
            Gets a value that indicates whether the element can be moved.
            </summary>
            <value></value>
            <returns>true if the element can be moved; otherwise, false. </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.CanResize">
            <summary>
            Gets a value that indicates whether the element can be resized.
            </summary>
            <value></value>
            <returns>true if the element can be resized; otherwise, false. </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.CanRotate">
            <summary>
            Gets a value that indicates whether the element can be rotated.
            </summary>
            <value></value>
            <returns>true if the element can be rotated; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.Move(System.Double,System.Double)">
            <summary>
            Moves the control.
            </summary>
            <param name="x">The absolute screen coordinates of the left side of the control.</param>
            <param name="y">The absolute screen coordinates of the top of the control.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.Resize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="width">The new width of the window, in pixels.</param>
            <param name="height">The new height of the window, in pixels.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.MapThumbnailPaneAutomationPeer.Rotate(System.Double)">
            <summary>
            Rotates the control.
            </summary>
            <param name="degrees">The number of degrees to rotate the control. A positive number rotates the control clockwise. A negative number rotates the control counterclockwise.</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.AutomationPeers.XamMapAutomationPeer">
            <summary>
            The automation peer for the map
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.XamMapAutomationPeer.#ctor(Infragistics.Controls.Maps.XamMap)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.AutomationPeers.XamMapAutomationPeer"/> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.AutomationPeers.XamMapAutomationPeer.Map">
            <summary>
            Gets or sets the map.
            </summary>
            <value>The map.</value>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.XamMapAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>A value of the enumeration.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.XamMapAutomationPeer.GetClassNameCore">
            <summary>
            Returns the name of the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName"/>.
            </summary>
            <returns>
            The name of the owner type that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. See Remarks.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.XamMapAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.AutomationPeers.XamMapAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.BubbleGauge">
            <summary>
            Represents a content control which automatically resizes its content according
            to its value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.BubbleGauge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.BubbleGauge"/> class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.BubbleGauge.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="F:Infragistics.Controls.Maps.BubbleGauge.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.BubbleGauge.Value"/> dependency property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapColorSwatchPane">
            <summary>
            Specialised color swatch legend pane within an XamMap component.
            </summary>
            <remarks>
            MapColorSwatchPanes are placed within XamMap controls to display
            a chloropleth legend for a given layer. Outside the specification of
            the layer name, only minimal configuration is required by the user -
            typically only the mode used to format the brush samples and the string used
            to format the labels.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapColorSwatchPane.#ctor">
            <summary>
            Creates a new ColorSwatchPane initialised with the default properties.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.LogicalParent">
            <summary>
            Sets or gets the current object's logical parent.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.Map">
            <summary>
            Gets the current object's map hierarchical ancestor.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.LabelMode">
            <summary>
            Sets or gets the labelling mode for the current color swatch pane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.LabelModeProperty">
            <summary>
            Identifies the LabelMode dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.LabelFormatString">
            <summary>
            Sets or gets the formatting string used to display scale values on
            this color swatch.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.LabelFormatStringProperty">
            <summary>
            Identifies the LabelFormatString dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.DisplayMode">
            <summary>
            Sets or gets the display mode for the current MapColorSwatchPane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.DisplayModeProperty">
            <summary>
            Identifies the DisplayMode dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.ShadowOffset">
            <summary>
            Gets or sets the shadow offset for the layer brush samples, leader lines and text for the current colorswatch pane.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.ShadowOffsetProperty">
            <summary>
            Identifies the ShadowOffset dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.CornerRadius">
            <summary>
            Gets or sets the corner radius for the layer brush samples in the current colorswatch pane.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.LeaderStyle">
            <summary>
            Sets or gets the Style applied to leader lines (if any) in the colorswatch pane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.LeaderStyleProperty">
            <summary>
            Identifies the LeaderStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.SwatchStyle">
            <summary>
            Sets or gets the Style applied to layer brush samples in the colorswatch pane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.SwatchStyleProperty">
            <summary>
            Identifies the SwatchStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.ShadowStyle">
            <summary>
            Sets or gets the Style applied to the swatch and leader lines in the colorswatch pane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.ShadowStyleProperty">
            <summary>
            Identifies the ShadowStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.TextStyle">
            <summary>
            Sets or gets the Style applied to the labels in the colorswatch pane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.TextStyleProperty">
            <summary>
            Identifies the TextStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.TextShadowStyle">
            <summary>
            Sets or gets the Style applied to labels in the colorswatch pane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.TextShadowStyleProperty">
            <summary>
            Identifies the TextShadowStyle dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapColorSwatchPane.OnApplyTemplate">
            <summary>
            Called when ApplyTemplate is called.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.ContentPresenter">
            <summary>
            Gets the current MapColorSwatchPane object's Canvas root visual element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.Layer">
            <summary>
            Sets or gets the layer for the current colorswatch pane. 
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            Setting the LayerName property will automatically and immediately
            override any value set into the Layer property. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.LayerProperty">
            <summary>
            Identifies the Layer dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapColorSwatchPane.LayerName">
            <summary>
            Sets or gets the layer for the current colorswatch pane. 
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            Setting the LayerName property will automatically and immediately
            override any value set into the Layer property. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPane.LayerNameProperty">
            <summary>
            Identifies the LayerName dependency property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapLayer">
            <summary>
            A layer of elements in an XamMap control.
            </summary>
            <remarks>
            MapLayer objects act as collections of elements and martials their interactions.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.#ctor">
            <summary>
            Initialises a new MapLayer object with its default values
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.LogicalParent">
            <summary>
            Gets or sets the layer's logical parent, usually an XamMap component.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.Map">
            <summary>
            Gets the current layer's map hierarchical ancestor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.EnsurePreExistingElementsAreRenderable">
            <summary>
            Ensures that if there are pre-existing elements that they are
            prepped for rendering. If the elements collection was filled
            before the layer was added to the map, this could be the case.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.EnsureWorldRectHasPropagatedToNewOwner">
            <summary>
            Ensures that when a layer is retargeted to a new map owner
            that the new map owner updates its auto world rec BEFORE
            we call renderwindow, or we won't have prepped our elements for
            rendering.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.ImportAsync">
            <summary>
            Starts asynchronously importing from the current layer's reader.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.Reader">
            <summary>
            Sets or gets a reader for the current map layer object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.ReaderProperty">
            <summary>
            Identifies the Reader dependency property.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.MapLayer.Imported">
            <summary>
            Event triggered when an asynchronous import terminates.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.WorldRect">
            <summary>
            Sets or gets the current layer's worldRect bounding rectangle
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.WorldRectProperty">
            <summary>
            Identifies the WorldRect dependency property.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.MapLayer.WorldRectChanged">
            <summary>
            Event triggered whenever the current layer's WorldRect property is
            set or changed.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnWorldRectChanged(Infragistics.Controls.Maps.MapWorldRectChangedEventArgs)">
            <summary>
            Triggers a WorldRectChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.Elements">
            <summary>
            Gets the collection of elements for this layer.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.ElementsProperty">
            <summary>
            Identifies the Elements dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.DataBind">
            <summary>
            Update Element and annotation children from the data source.
            </summary>
            <remarks>
            If a named Element cannot be located in the layer, the row is silently ignored. To enhance performance,
            automatic value refresh is turned fof during data binding and restored to its original value when the
            binding terminates.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.DataSource">
            <summary>
            Sets or gets the data source for this layer
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.DataSourceProperty">
            <summary>
            Identifies the DataSource dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnDataSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.DataMapping">
            <summary>
            Sets or gets the data mapping for this layer.
            </summary>
            <remarks>
            The data mapping string is stored in a compiled form, so syntactical errors
            are detected as soon as the value is set, and the value is reformatted
            when read.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.PlaceWindow">
            <summary>
            Place all visible elements in the current layer.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.RenderWindow">
            <summary>
            This function is really the entry point to the frame rendering, triggering
            a complete cull and refresh.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.RenderElement(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Refresh the visual representation of an Element
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.DerenderElement(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Refresh the visual representation of an Element
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.MapLayer.ElementPrerender">
            <summary>
            Event triggered whenever an Element is about to be rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnElementPrerender(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Triggers the ElementPrerender event
            </summary>
            <param name="element"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.MapLayer.ElementDerender">
            <summary>
            Event triggered immediately after an Element is derendered.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnElementDerender(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Triggers the ElementPrerender event
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.Resolution">
            <summary>
            Sets or gets the layer's display resolution.
            </summary>
            <remarks>
            The display resolution is the smalles area (in square pixels) at which
            a SurfaceElement is considered visible.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.AutoCalculateResolutionProperty">
            <summary>
            Identifies the AutoCalculationResolution dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.AutoCalculateResolution">
            <summary>
            Sets or gets whether to automatically calculate the resolution
            of the layer.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            Set this to false in order to set the resolution property of the
            layer manually.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.MinimumPathLength">
            <summary>
            Gets or sets the minimum number of pixels at which polylines become visible
            </summary>
            <value>The minimum number of pixels at which polylines become visible.</value>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.MinimumPathLengthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.MapLayer.MinimumPathLength"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnMinimumPathLengthChanged(System.Double,System.Double)">
            <summary>
            MinimumPathLengthProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.MinimumLabellingSize">
            <summary>
            Gets or sets the minimum number of pixels at which texts can be labelled
            </summary>
            <value>The minimum number of pixels of the labelling.</value>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.MinimumLabellingSizeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.MapLayer.MinimumLabellingSize"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnMinimumLabellingSizeChanged(System.Double,System.Double)">
            <summary>
            MinimumLabellingSizeProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.LayerName">
            <summary>
            Sets or gets the layer's LayerName property.
            </summary>
            <remarks>
            Getting a layer's LayerName when the property is not set, or is set to null, returns
            the value of the layer's Name property. Setting a layer's Name property in code is
            considered an error and may result in ill-defined behaviour.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ActualIsSelectable">
            <summary>
            Gets the effective value for the current layers's IsSelectable property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.IsSelectable">
            <summary>
            Sets or gets the current layers's IsSelectable property.
            </summary>
            <remarks>
            For an individual element to be selectable, its IsSelectable, its
            parent layer's IsSelectable and its parent map's IsSelectable properties
            must all be set to true.
            <para>
            The IsSelectable property controls mouse-based element selection. Other
            mechanisms are not affected by this property.
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.IsSelectableProperty">
            <summary>
            Identifies the IsSelectable dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ActualIsClickable">
            <summary>
            Gets the effective value for the current layers's IsClickable property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.IsClickable">
            <summary>
            Sets or gets the current layer's IsClickable property.
            </summary>
            <remarks>
            For an individual element to be clickable, its IsClickable, its
            parent layer's IsClickable and its parent map's IsClickable properties
            must all be set to true.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.IsClickableProperty">
            <summary>
            Identifies the IsClickable dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ActualIsSensitive">
            <summary>
            Gets the effective value for the current layers's IsSensitive property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.IsSensitive">
            <summary>
            Sets or gets the current layer's IsSensitive property.
            </summary>
            <remarks>
            For an individual element to be clickable or hoverable, its IsSensitive, its
            parent layer's IsSensitive and its parent map's IsSensitive properties
            must all be set to true.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.IsSensitiveProperty">
            <summary>
            Identifies the IsSensitive dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.IsVisible">
            <summary>
            Gets or sets the current layer's visibility. Setting IsVisible to false
            guarantees that the layer will not be displayed. Setting the visibility to
            trye allows (but does not guarantee that) the layer to be displayed.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.IsVisibleProperty">
            <summary>
            Identifies the IsVisible dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.VisibleFromScale">
            <summary>
            Gets or sets the minimum scale at which this layer becomes visible.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            Setting the VisibleFromScale property immediately causes the layer's
            visibility to be reevaluated.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.VisibleFromScaleProperty">
            <summary>
            Identifies the VisibleFromScale dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.VisibleToScale">
            <summary>
            Gets or sets the maximum scale at which this layer is displayed.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            Setting the VisibleToScale property immediately causes the layer's
            visibility to be reevaluated.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.VisibleToScaleProperty">
            <summary>
            Identifies the VisibleToScale dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ValueScale">
            <summary>
            Sets or gets the scale for the current layer object.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            Setting a layer's ValueScale triggers a ValueScaleChanged event.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.ValueScaleProperty">
            <summary>
            Identifies the ValueScale dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnValueScaleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
             <summary>
             ValueScale dependency property value changed listener.
            
             Attaches a ScaleChanged listener to the new ValueScale
             Calls OnValueScaleChanged to trigger a ValueScaleChanged event
             </summary>
             <param name="d"></param>
             <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.ValueScale_ScaleChanged(System.Object,Infragistics.Controls.Maps.MapValueScaleChangedEventArgs)">
             <summary>
             Listener for the current layer's ValueScale's ScaleChanged event.
            
             Calls OnValueScaleChanged to trigger a ValueScaleChanged event.
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.MapLayer.ValueScaleChanged">
            <summary>
            Event triggered whenever the layer's ValueScale property is set or whenever
            any of its parameters such as MinimumValue or MaximumValue change.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnValueScaleChanged(Infragistics.Controls.Maps.MapValueScaleChangedEventArgs)">
            <summary>
            Triggers a ValueScaleChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ValueTemplate">
            <summary>
            Sets or gets the element template for this layer
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.ValueTemplateProperty">
            <summary>
            Identifies the ValueTemplate dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.SmartOverlap">
             <summary>
             Sets or gets the smart overlap for this layer.
            
             This is a dependency property.
             </summary>
             <remarks>
             Smart overlap is the maximum permissable overlap for objects which are to be displayed over MapElements in this layer.
             This property setting should be expressed as a value between 0 and 1, relative to the total area of a caption or ValueTemplate being displayed over a MapElement.
             </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.SmartOverlapProperty">
            <summary>
            Identifies the SmartOverlap dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.SmartFade">
             <summary>
             Sets or gets the smart fade for this layer.
            
             This is a dependency property.
             </summary>
             <remarks>
             SmartFade determines the opacity of objects which are displayed over MapElements in this layer, which overlap with one another.  A higher value for this property will result in more transparent captions or ValueTemplates when an overlap occurs.  This transparency is relative to the amount of overlap, in addition to this property setting.
             </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.SmartFadeProperty">
            <summary>
            Identifies the SmartFade dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.GetSymbolGeometry(System.Nullable{Infragistics.Controls.Maps.MapSymbolType})">
            <summary>
            Converts an MapSymbolType to Geometry.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ActualSymbolGeometry">
            <summary>
            Gets the effective symbol geometry for this layer.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.SymbolGeometry">
            <summary>
            Sets or gets the current layer's symbol geometry. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.SymbolGeometryProperty">
            <summary>
            Identifies the SymbolGeometry dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.SymbolType">
            <summary>
            Sets or gets the current layer's symbol type property. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.SymbolTypeProperty">
            <summary>
            Identifies the SymbolType dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.SymbolSize">
            <summary>
            Sets or gets the current layer's symbol size property. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.SymbolSizeProperty">
            <summary>
            Identifies the SymbolSize dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.Caption">
            <summary>
            Sets or gets the current layer's caption property. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.CaptionProperty">
            <summary>
            Identifies the ElementCaption dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ToolTip">
            <summary>
            Sets or gets the current layer's tool tip property. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.ToolTipProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.Brushes">
            <summary>
            Sets or gets the brushes used to fill items on the current layer.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.BrushesProperty">
            <summary>
            Identifies the Brushes dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnBrushesPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.Brushes_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Listener for the current layer's Brushes's CollectionChanged event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.MapLayer.BrushesChanged">
            <summary>
            Event triggered whenever the layer's Brushes property is set or the contents
            of the Brushes collection changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayer.OnBrushesChanged(Infragistics.Controls.Maps.MapBrushesChangedEventArgs)">
            <summary>
            Triggers the BrushesChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.FillMode">
            <summary>
            Sets or gets the current layer's fill mode property. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.FillModeProperty">
            <summary>
            Identifies the FillMode dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.Fill">
            <summary>
            Sets or gets the current layer's Fill brush. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.FillProperty">
            <summary>
            Identifies the Fill dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ShadowFill">
            <summary>
            Sets or gets the current layer's shadow fill brush. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.ShadowFillProperty">
            <summary>
            Identifies the ShadowFill dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.ShadowOffset">
            <summary>
            Sets or gets the current layer's shadow offset. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            This property is a Point with the X and Y coordinates representing the distance from a MapElement to its shadow.  Negative X and Y coordinates will result in shadows appearing to the top/left of MapElements, whereas positive X and Y coordinates will result in shadows appearing to the bottom/right of MapElements.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.ShadowOffsetProperty">
            <summary>
            Identifies the ShadowOffset dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.Stroke">
            <summary>
            Sets or gets the current layer's stroke brush. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.StrokeDashArray">
            <summary>
            Sets or gets the current layer's stroke dash array. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeDashArrayProperty">
            <summary>
            Identifies the StrokeDashArray dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.StrokeDashCap">
            <summary>
            Sets or gets the current layer's stroke dash cap. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeDashCapProperty">
            <summary>
            Identifies the StrokeDashCap dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.StrokeDashOffset">
            <summary>
            Sets or gets the current layer's stroke dash offset. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeDashOffsetProperty">
            <summary>
            Identifies the StrokeDashOffset dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.StrokeEndLineCap">
            <summary>
            Sets or gets the current layer's stroke end line cap. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeEndLineCapProperty">
            <summary>
            Identifies the StrokeEndLineCap dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.StrokeLineJoin">
            <summary>
            Sets or gets the current layer's stroke line join. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeLineJoinProperty">
            <summary>
            Identifies the StrokeLineJoin dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.StrokeMiterLimit">
            <summary>
            Sets or gets the current layer's stroke miter limit. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeMiterLimitProperty">
            <summary>
            Identifies the StrokeMiterLimit dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.StrokeStartLineCap">
            <summary>
            Sets or gets the current layer's stroke start line cap. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeStartLineCapProperty">
            <summary>
            Identifies the StrokeStartLineCap dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.StrokeThickness">
            <summary>
            Sets or gets the current layer's stroke thickness. Changing the value
            causes elements which do not locally override it to be updated.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.IsAutoWorldRect">
            <summary>
            Sets or gets whether the current layer should auto calculate it's world
            rectangle.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            If set to true, when elements are added to or bound to the layer, the layer's
            world rectangle bounds are automatically adjusted to accomodate the new elements.
            <para>
            Defaults to false.
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.IsAutoWorldRectProperty">
            <summary>
            Identifies the IsAutoWorldRect dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayer.CanHaveDuplicateInnerLabels">
            <summary>
            Sets or gets whether the current layer can have duplicate surface labels.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            If set to trye, the layer will not try to eliminate duplicate labels that occur on
            polygons that are wholly contained by other polygons. Setting this to true can have
            performance benefits for some shapefiles that have many non overlapping surface elements.
            <para>
            Defaults to false.
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.CanHaveDuplicateInnerLabelsProperty">
            <summary>
            Identifies the CanHaveDuplicateInnerLabels dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayer.InnerForegroundProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.MapLayer.InnerForeground"/> dependency property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapNavigationPane">
            <summary>
            The navigation pane provides a set of interactive controls for navigating or 
            panning the map. Panning functionality is tied closely to the location of the 
            canvas's view center.
            </summary>
            <remarks>
            MapNavigationPanes are placed within XamMap controls to allow
            end-user navigation within the parent map. No configuration is required
            by the user.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapNavigationPane.#ctor">
            <summary>
            Initialises a new MapNavigationPane object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.Map">
            <summary>
            Gets the current object's map hierarchical ancestor.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.LogicalParent">
            <summary>
            Gets or sets the current object's logical parent
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.Orientation">
            <summary>
            Gets or sets whether the navigation pane is displayed horizontally or vertically. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapNavigationPane.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.PanWestButton">
            <summary>
            XamMap component pan west button, usually but not necessarily a RepeatButton.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.PanSouthButton">
            <summary>
            XamMap component pan south button, usually but not necessarily a RepeatButton.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.PanEastButton">
            <summary>
            XamMap component pan east button, usually but not necessarily a RepeatButton.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.PanNorthButton">
            <summary>
            XamMap component pan north button, usually but not necessarily a RepeatButton.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.BackButton">
            <summary>
            XamMap component window back button, usually but not necessarily a Button.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.ForwardButton">
            <summary>
            XamMap component window back button, usually but not necessarily a Button.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.ZoomInButton">
            <summary>
            Sets or gets the zoom in button, usually but not necessarily a RepeatButton.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.ZoomOutButton">
            <summary>
            Sets or gets the zoom out button, usually but not necessarily a RepeatButton.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.FitButton">
            <summary>
            Sets or gets the zoom fit button, usually but not necessarily a Button.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.ZoomRange">
            <summary>
            Sets or gets the zoom RangeBase control, usually but not necessarily a Slider.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.HorizontalRoot">
            <summary>
            Sets or gets the root FrameworkElement for horizontal layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapNavigationPane.VerticalRoot">
            <summary>
            Sets or gets the root FrameworkElement for vertical layout.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapNavigationPane.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapPanPane">
            <summary>
            Specialised pan pane within an XamMap component. The pan pane typically contains button
            controls to pan West, South, East and North as well as one to step back in the window
            position history
            any of which may be overridden or reconfigured
            by the user.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPanPane.#ctor">
            <summary>
            Initialises a new MapPanPane object.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapZoomPane">
             <summary>
             A zoom pane provides a set of interactive controls for changing the zoom or 
             magnification level of the map. It operates similar to a Windows scrollbar and 
             consists of a slider bar with tick marks, a slider thumb, and two buttons for 
             incremental zoom level changes.
             
             Pressing the plus button or dragging the slider thumb towards the plus button causes
             the map to zoom in (increases the zoom or magnification level). Pressing the minus
             button or dragging the slider thumb towards the minus button causes the map to zoom
             out (decreases the zoom level).
            
             Specialised zoom pane within an XamMap component. The zoom pane typically contains button
             controls to step zoom and fit, as well as a slider to incrementally zoom, the map window, 
             any of which may be overridden or reconfigured
             by the user.
             </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapZoomPane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.MapZoomPane"/> class.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapScalePane">
            <summary>
            Specialised scale pane within an XamMap component.
            </summary>
            <remarks>
            MapScalePane are placed within XamMap controls to display
            the scale for the map. Only minimal configuration is required by the user -
            typically only the mode used to format the sample distances.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapScalePane.#ctor">
            <summary>
            Creates a new MapScalePane.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapScalePane.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of Silverlight layout. Classes can override this method to define their own measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.LogicalParent">
            <summary>
            Sets or gets the current object's logical parent (usually a map).
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.Map">
            <summary>
            Gets the current object's map hierarchical ancestor.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.ContentPresenter">
            <summary>
            Gets or sets the content presenter.
            </summary>
            <value>The content presenter.</value>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapScalePane.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.PrimaryStyle">
            <summary>
            Sets or gets the style used to display sample distances.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.PrimaryStyleProperty">
            <summary>
            Identifies the PrimaryStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.ShadowStyle">
            <summary>
            Sets or gets the style used to display shadows.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.ShadowStyleProperty">
            <summary>
            Identifies the ShadowStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.SecondaryStyle">
            <summary>
            Sets or gets the style used to display subivisions of sample distances in bar display mode.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.SecondaryStyleProperty">
            <summary>
            Identifies the SecondaryStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.TextStyle">
            <summary>
            Sets or gets the style used to display text.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.TextStyleProperty">
            <summary>
            Identifies the TextStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.TextShadowStyle">
            <summary>
            Sets or gets the style used to display text shadows.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.TextShadowStyleProperty">
            <summary>
            Identifies the TextShadowStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.CornerRadius">
            <summary>
            Gets or sets the corner radius for the current scale pane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.ShadowOffset">
            <summary>
            Gets or sets the shadow offset for the current scale pane.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.ShadowOffsetProperty">
            <summary>
            Identifies the ShadowOffset dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.IsDisplaySubdivisions">
            <summary>
            <para>
            Sets or gets the flag indicating that scale bars and lines should
            display size and unit appropriate subdivisions.
            </para>
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.IsDisplaySubdivisionsProperty">
            <summary>
            Identifies the IsDisplaySubdivisions dependency property. This is a dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.DisplayMode">
            <summary>
            <para>
            Sets or gets the scale display mode for the current object. 
            </para>
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapScalePane.DisplayModeProperty">
            <summary>
            Identifies the DisplayMode dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.IsMetric">
            <summary>
            Sets or gets whether or not to display the metric scale for the current object.
            </summary>
            <remarks>
            The scale pane displays a single scale in up to two units, conventionally
            conventionally used for metric and imperial measurement. However, this usage is
            not enforced and any combination of units may be used. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.MetricUnits">
            <summary>
            Sets or gets the potential metric units for the current object.
            </summary>
            <remarks>
            The scale pane displays a single scale in up to two units, conventionally
            conventionally used for metric and imperial measurement. However, this usage is
            not enforced and any combination of units may be used. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.IsImperial">
            <summary>
            Sets or gets whether or not to display the imperial scale for the current object.
            </summary>
            <remarks>
            The scale pane displays a single scale in up to two units, conventionally
            used for metric and imperial measurement. However, this usage is
            not enforced and any combination of units may be used. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapScalePane.ImperialUnits">
            <summary>
            Sets or gets the potential imperial units for the current object.
            </summary>
            <remarks>
            The scale pane displays a single scale in up to two units, conventionally
            used for metric and imperial measurement. However, this usage is
            not enforced and any combination of units may be used. 
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapThumbnailPane">
            <summary>
            Represents a control used to a thumbnail view of, and navigation for,
            a map's window.
            </summary>
            <remarks>
            The MapThumbnail is normally created as an immediate child of a map
            and requires no user configuration beyond setting the width and height.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapThumbnailPane.#ctor">
            <summary>
            Initializes a new instance of the MapThumbnail class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapThumbnailPane.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of Silverlight layout. Classes can override this method to define their own measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapThumbnailPane.ContentPresenter">
            <summary>
            Gets or sets the content presenter.
            </summary>
            <value>The content presenter.</value>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapThumbnailPane.ContentPresenterName">
            <summary>
            Content presenter name
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapThumbnailPane.OnApplyTemplate">
            <summary>
            Creates the visual tree for the cuurent MapThumbnail object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapThumbnailPane.LogicalParent">
            <summary>
            Gets or sets the logical parent (usually a XamMap) for the
            current MapThumbnail oject.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapThumbnailPane.Map">
            <summary>
            Gets the current thumbnail's map hierarchical ancestor.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapThumbnailPane.WorldBackground">
            <summary>
            Gets or sets the world background.
            </summary>
            <value>The world background.</value>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapThumbnailPane.WorldBackgroundProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.MapThumbnailPane.WorldBackground"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapThumbnailPane.WorldStyle">
            <summary>
            Sets or gets the style applied to the path which represents the 
            map's worldRect rectangle.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapThumbnailPane.WorldStyleProperty">
            <summary>
            Identifies the WorldStyle dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapThumbnailPane.OnWorldStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapThumbnailPane.WindowStyle">
            <summary>
            Sets or gets the style applied to the path which represents the 
            map's window rectangle.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapThumbnailPane.WindowStyleProperty">
            <summary>
            Identifies the WindowStyle dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapThumbnailPane.OnWindowStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapThumbnailPane.PreviewStyle">
            <summary>
            Sets or gets the style applied to the path which represents the 
            map's zoom preview area.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapThumbnailPane.PreviewStyleProperty">
            <summary>
            Identifies the PreviewStyle dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapThumbnailPane.OnPreviewStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapThumbnailPane.DragCursor">
            <summary>
            Sets or gets the cursor used during window drags. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapThumbnailPane.DragCursorProperty">
            <summary>
            Identifies the DragCursor dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapThumbnailPane.OnDragCursorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapThumbnailPane.MinimumRect(System.Windows.Rect,System.Double,System.Double)">
            <summary>
            Calculates an approximation of the parameter rectangle, guaranteed
            to no smaller than minimumWidth by minimumHeight. The aspect
            ratio and center are maintained.
            </summary>
            <param name="rc"></param>
            <param name="minimumWidth"></param>
            <param name="minimumHeight"></param>
            <returns>Original or, new clamped, rectangle.</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapViewport">
            <summary>
            Represents the main map area in a XamMap control
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapViewport.#ctor">
            <summary>
            Initialises a new MapViewport object.
            </summary>
            <remarks>
            The default viewport object is created with nested drag and preview paths.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.GridStroke">
            <summary>
            Sets or gets the brush used to draw the current viewport's map grid lines.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapViewport.GridStrokeProperty">
            <summary>
            Identifies the GridStroke dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.GridStrokeThickness">
            <summary>
            Sets or gets the thickness of the current viewport's map grid lines.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapViewport.GridStrokeThicknessProperty">
            <summary>
            Identifies the GridStrokeThickness dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.GridShadowStroke">
            <summary>
            Sets or gets the brush used to draw the current viewport's map shadow grid lines.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapViewport.GridShadowStrokeProperty">
            <summary>
            Identifies the GridShadowStroke dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.GridShadowOffset">
            <summary>
            Sets or gets the current viewport's map shadow grid line offset.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapViewport.GridShadowOffsetProperty">
            <summary>
            Identifies the GridShadowOffset dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapViewport.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of Silverlight layout. Classes can override this method to define their own measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.LogicalParent">
            <summary>
            Gets or sets the viewport's logical parent
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.Map">
            <summary>
            Gets the current layer's ultramap hierarchical ancestor.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.Rect">
            <summary>
            Gets the viewport rectangle.
            </summary>
            <remarks>
            The viewport rectangle may differ significantly from the Viewport control rectangle
            if the control is configured to display zoombar controls.
            <para>If the viewport rectangle cannot be determined for any reason, the empty rectangle
            is returned.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.DragPath">
            <summary>
            Gets the path used to display the user drag rectangle.
            </summary>
            <remarks>
            Although it is possible for users to set their own value for the drag path, there
            is no real reason or advantage to doing so.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.DragStyle">
            <summary>
            Sets or gets the style applied to the user drag rectangle.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapViewport.DragStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.MapViewport.DragStyle"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.PreviewPath">
            <summary>
            Gets or sets the preview path.
            </summary>
            <value>The preview path.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.PreviewStyle">
            <summary>
            Gets or sets the preview style.
            </summary>
            <value>The preview style.</value>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapViewport.PreviewStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.MapViewport.PreviewStyle"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapViewport.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.ContentPresenter">
            <summary>
            Gets or sets the content presenter.
            </summary>
            <value>The content presenter.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.RootCanvas">
            <summary>
            Gets or sets the root canvas.
            </summary>
            <value>The root canvas.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapViewport.MultiScaleImage">
            <summary>
            Gets or sets the multi scale image.
            </summary>
            <value>The multi scale image.</value>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapViewport.UpdateMultiScaleImageViewport(System.Windows.Rect)">
            <summary>
            Updates the multi scale image viewport.
            </summary>
            <param name="windowRect">The window rect.</param>
        </member>
        <member name="E:Infragistics.Controls.Maps.MapViewport.MapImageStreamValid">
            <summary>
            Handle this event if you want to indicate that certain image responses to the 
            tile source provider are invalid and should be ignored rather than trying to display them.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.DistributionScale">
            <summary>
            Simple equal distribution scale
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.DistributionScale.OnMinimumValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:MinimumValueChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.DistributionScale.OnMaximumValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:MaximumValueChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.DistributionScale.OnValueStopCountChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValueStopCountChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.DistributionScale.OnValueStopsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValueStopsChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.DistributionScale.DoAutoRange">
            <summary>
            Recalculates the range for this scale.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.LinearScale">
            <summary>
            Simple linear scale
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearScale.OnValueStopsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValueStopsChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearScale.OnValueStopCountChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValueStopCountChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearScale.DoAutoRange">
            <summary>
            Recalculates the range for this scale.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.LinearUnitCollection">
            <summary>
            Represents a collection of linear units.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.LinearUnitCollection.Converter">
            <summary>
            Converts instances of LinearUnitCollection to and from other type representations.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearUnitCollection.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearUnitCollection.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearUnitCollection.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:Infragistics.Controls.Maps.LinearUnitUtil">
            <summary>
            Static utility class containing methods to provide 
            descriptions of LinearUnitType enumeration values. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearUnitUtil.GetUnit(Infragistics.Controls.Maps.LinearUnitType)">
            <summary>
            Gets the standard unit name.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearUnitUtil.GetName(Infragistics.Controls.Maps.LinearUnitType)">
            <summary>
            Gets the standard unit name.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearUnitUtil.GetAbbreviation(Infragistics.Controls.Maps.LinearUnitType)">
            <summary>
            Gets the standard unit abbreviation.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearUnitUtil.GetSize(Infragistics.Controls.Maps.LinearUnitType)">
            <summary>
            Gets the size of the unit in SI base units.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LinearUnitUtil.GetDisplaySubdivisions(Infragistics.Controls.Maps.LinearUnitType)">
            <summary>
            Gets the display subdivisions.
            </summary>
            <param name="unit">The unit.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.LogarithmicScale">
            <summary>
            Simple logarithmic scale
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LogarithmicScale.#ctor">
            <summary>
            Initialises a new instance of an LogarithmicScale with
            default properties.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.LogarithmicScale.Base">
            <summary>
            Sets or gets the logarithm base for this LogarithmicScale object.
            <para> This is a dependency property.</para>
            </summary>
            <remarks>
            Setting an impossible logarithm base immediately causes the base to 
            be reset to its previous value.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.LogarithmicScale.BaseProperty">
            <summary>
            Identifies the Base dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LogarithmicScale.OnValueStopsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValueStopsChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.LogarithmicScale.OnValueStopCountChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValueStopCountChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.LogarithmicScale.DoAutoRange">
            <summary>
            Recalculates the range for this scale.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapElement">
            <summary>
            The abstract base class for all map elements (direct layer content).
            </summary>
            <remarks>
            This class has intentionally been left public to enable creation of new
            Element types by the user. Creating new Element types may not be
            a trivial propostion.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.#ctor">
            <summary>
            Initialises a new map Element with its default values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.LogicalParent">
            <summary>
            Sets or gets the logical parent for the current Element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.Layer">
            <summary>
            Gets the owner layer for the current Element.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.SetProperty(System.String,System.Object)">
            <summary>
            Sets an Element regular or custom property.
            </summary>
            <remarks>
            There are two kinds of Element properties, a fixed set of regular properties with
            have a type a getter and a setter and arbitrary custom properties.
            
            If this method is used to access a regular
            property, the type is verified and the setter called.
            
            Null is a valid value for custom properties - RemoveCustomProperty() is
            the only way to remove a property from an Element.
            </remarks>
            <param name="name"></param>
            <param name="value"></param>
            <returns>true if the property value was set</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.HasCustomProperty(System.String)">
            <summary>
            Tests for the presence of a custom property on the current Element.
            </summary>
            <param name="name">The name of the custom property to test.</param>
            <returns>true if the current Element has the custom property.</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.HasCustomProperties">
            <summary>
            Tests for the presence of any custom properties on the current Element.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.RemoveCustomProperty(System.String)">
            <summary>
            Removes the named custom property from the current Element 
            </summary>
            <param name="name">The name of the custom property to remove.</param>
            <returns>true if the Element is successfully found and removed</returns>
            <remarks>
            Null is a valid value for custom properties - RemoveCustomProperty() is
            the only way to remove a property from an Element.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.GetProperty(System.String)">
            <summary>
            Gets the value of a named property.
            </summary>
            <remarks>
            There are two kinds of Element properties, a fixed set of regular properties with
            have a type a getter and a setter and arbitrary custom properties.
            
            If this method is used to access a regular
            property, the getter called and the returned object is guaranteed to be
            of the property type.
            </remarks>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.SurfaceZIndexBase">
            <summary>
            Base canvas ZIndex for surface elements.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.PathZIndexBase">
            <summary>
            Base canvas ZIndex for Path elements.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.SymbolZIndexBase">
            <summary>
            Base canvas ZIndex for symbol elements.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.WorldRect">
            <summary>
            Gets or sets the world rectangle for the current MapElement object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualSymbolOrigin">
            <summary>
            Gets the effective symbol origin for the current MapElement object.
            </summary>
            <remarks>
            If the SymbolOrigin property is set, it is used as the effective
            symbol origin, otherwise the SymbolOrigin is defined as the
            center of the world rectangle.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.SymbolOrigin">
            <summary>
            Gets or sets the symbol origin for the current MapElement object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.Contains(System.Windows.Point)">
            <summary>
            Determines whether the map element contains the specified pt.
            </summary>
            <param name="pt">The pt.</param>
            <returns>
            	<c>true</c> if the map element contains the specified pt; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.Name">
             <summary>
             Gets or sets the name of this Element. Setting an
             Element's value to null (the initial value) causes 
             its value to be taken from the owner layer. Changing the value
             causes the Element to immediately update itself.
            
             This is a dependency property.
             </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.NameProperty">
            <summary>
            Identifies the Name dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ToolTip">
             <summary>
             Gets or sets the tool tip for this Element. Setting an
             Element's tool tip to null (the initial value) causes 
             its value to be taken from the owner layer. Changing the value
             causes the Element to immediately update itself.
            
             This is a dependency property.
             </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualToolTip">
            <summary>
            Gets the effective tooltip for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.ToolTipProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.Visibility">
             <summary>
             Gets or sets the visiblity for this Element. 
            
             This is a dependency property.
             </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualVisibility">
            <summary>
            Gets the effective tooltip for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.VisibilityProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ZIndex">
             <summary>
             Gets or sets the z index for this Element. Setting an
             Element's z index to null (the initial value) causes 
             its value to be taken from the owner layer. Changing the value
             causes the Element to immediately update itself.
            
             This is a dependency property.
             </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualZIndex">
            <summary>
            Gets the effective z index for this Element.
            </summary>
            <remarks>
            This method is overridden in subclasses to offset the ZIndex by
            the appropriate class-specific base.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.ZIndexProperty">
            <summary>
            Identifies the ZIndex dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualValueTemplate">
            <summary>
            Gets the effective value template for this Element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ValueTemplate">
            <summary>
            Sets or gets the element template for this map element
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.ValueTemplateProperty">
            <summary>
            Identifies the ValueTemplate dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.Value">
             <summary>
             Gets or sets the value this Element. Setting an
             Element's value to null (the initial value) causes 
             its value to be taken from the owner layer. Changing the value
             causes the Element to immediately update itself.
            
             This is a dependency property.
             </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ScaledValue">
            <summary>
            Gets or sets the scaled value this Element.
            
            This is a dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.ScaledValueProperty">
            <summary>
            Identifies the ScaledValue dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualFillMode">
            <summary>
            Gets the actual fill mode.
            </summary>
            <value>The actual fill mode.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.Caption">
            <summary>
            Gets or sets the caption for this Element. Setting an
            Element's caption to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualCaption">
            <summary>
            Gets the effective caption for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.CaptionProperty">
            <summary>
            Identifies the Caption dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualIsSensitive">
            <summary>
            Gets the effective value for the current element's IsSensitive property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.IsSensitive">
            <summary>
            Sets or gets the current layer's IsSensitive property.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            For an individual element to be clickable, its IsSensitive, its 
            parent layer's IsSensitive and its parent map's IsSensitive properties
            must all be set to true.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.IsSensitiveProperty">
            <summary>
            Identifies the IsSensitive dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualIsSelectable">
            <summary>
            Gets the effective value for the current element's IsSelectable property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.IsSelectable">
            <summary>
            Sets or gets the current element's IsSelectable property.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            For an individual element to be selectable, its IsSelectable, its 
            parent layer's IsSelectable and its parent map's IsSelectable properties
            must all be set to true.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.IsSelectableProperty">
            <summary>
            Identifies the IsSelectable dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualIsClickable">
            <summary>
            Gets the effective value for the current element's IsClickable property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.IsClickable">
            <summary>
            Sets or gets the current layer's IsClickable property.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            For an individual element to be clickable, its IsClickable, its 
            parent layer's IsClickable and its parent map's IsClickable properties
            must all be set to true.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.IsClickableProperty">
            <summary>
            Identifies the IsClickable dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.FontFamily">
            <summary>
            Gets or sets the font family for this Element. Setting an
            Element's font family to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualFontFamily">
            <summary>
            Gets the effective font family for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.FontFamilyProperty">
            <summary>
            Identifies the FontFamily dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.FontSize">
            <summary>
            Gets or sets the font size for this Element. Setting an
            Element's font size to zero (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualFontSize">
            <summary>
            Gets the effective font size for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.FontSizeProperty">
            <summary>
            Identifies the FontSize dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.FontStyle">
            <summary>
            Gets or sets the font style for this Element. Setting an
            Element's font style to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualFontStyle">
            <summary>
            Gets the effective font size for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.FontStyleProperty">
            <summary>
            Identifies the FontStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.FontWeight">
            <summary>
            Gets or sets the font weight for this Element. Setting an
            Element's font weight to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualFontWeight">
            <summary>
            Gets the effective font weight for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.FontWeightProperty">
            <summary>
            Identifies the FontWeight dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.Foreground">
            <summary>
            Gets or sets the foreground brush for this Element. Setting an
            Element's foreground brush to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualForeground">
            <summary>
            Gets the effective foreground brush for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.ForegroundProperty">
            <summary>
            Identifies the Foreground dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ShadowFill">
            <summary>
            Gets or sets the shadow fill brush for this Element. Setting an
            Element's shadow fill brush to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualShadowFill">
            <summary>
            Gets the effective shadow fill brush for this Element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualShadowStroke">
            <summary>
            Gets the effective shadow fill brush for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.ShadowFillProperty">
            <summary>
            Identifies the ShadowFill dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ShadowOffset">
            <summary>
            Gets or sets the shadow offset for this Element. Setting an
            Element's shadow offset to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualShadowOffset">
            <summary>
            Gets the effective shadow offset for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.ShadowOffsetProperty">
            <summary>
            Identifies the ShadowOffset dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.Fill">
             <summary>
             Gets or sets the fill brush for this Element. Setting an Element's fill brush to null (the
             initial value) causes its value to be taken from the owner layer.  Changing the value causes
             the Element to immediately update itself.
            
             This is a dependency property.
             </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualFill">
            <summary>
            Gets the effective fill brush for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.FillProperty">
            <summary>
            Identifies the Fill dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.Stroke">
            <summary>
            Gets or sets the stroke brush for this Element. Setting an
            Element's stroke brush to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualStroke">
            <summary>
            Gets the effective stroke brush for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.StrokeDashArray">
            <summary>
            Gets or sets the stroke dash array for this Element. Setting an
            Element's stroke dash array to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>        
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualStrokeDashArray">
            <summary>
            Gets the effective stroke dash array for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.StrokeDashArrayProperty">
            <summary>
            Identifies the StrokeDashArray dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.StrokeDashCap">
            <summary>
            Gets or sets the stroke dash cap for this Element. Setting an
            Element's stroke dash cap to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualStrokeDashCap">
            <summary>
            Gets the effective stroke dash cap for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.StrokeDashCapProperty">
            <summary>
            Identifies the StrokeDashCap dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.StrokeStartLineCap">
            <summary>
            Gets or sets the stroke start line cap for this Element. Setting an
            Element's stroke start line cap to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualStrokeStartLineCap">
            <summary>
            Gets the effective stroke start line cap for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.StrokeStartLineCapProperty">
            <summary>
            Identifies the StrokeStartLineCap dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.StrokeEndLineCap">
            <summary>
            Gets or sets the stroke end line cap for this Element. Setting an
            Element's stroke end line cap to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualStrokeEndLineCap">
            <summary>
            Gets the effective stroke end line cap for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.StrokeEndLineCapProperty">
            <summary>
            Identifies the StrokeEndLineCap dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.StrokeLineJoin">
            <summary>
            Gets or sets the stroke line join for this Element. Setting an
            Element's stroke start line cap to null (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualStrokeLineJoin">
            <summary>
            Gets the effective stroke line join for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.StrokeLineJoinProperty">
            <summary>
            Identifies the StrokeLineJoin dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.StrokeMiterLimit">
            <summary>
            Gets or sets the stroke miter limit for this Element. Setting an
            Element's stroke miter limit to 0.0 (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualStrokeMiterLimit">
            <summary>
            Gets the effective stroke miter limit for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.StrokeMiterLimitProperty">
            <summary>
            Identifies the StrokeMiterLimit dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness for this Element. Setting an
            Element's stroke thickness to 0.0 (the initial value) causes 
            its value to be taken from the owner layer. Changing the value
            causes the Element to immediately update itself.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.ActualStrokeThickness">
            <summary>
            Gets the effective stroke thickness for this Element.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapElement.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElement.CullFlag">
            <summary>
            Gets or sets the current Element's culled flag.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.Cull(System.Windows.Rect)">
            <summary>
            Culls the current Element against the specified window rectangle.
            </summary>
            <remarks>
            Calling this method will never trigger a render or derender - it simply tests 
            against the window rectangle and updates the culled flag.
            </remarks>
            <param name="rect"></param>
            <returns>the new culled flag value</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.RenderOverride">
            <summary>
            Render this Element into the parent MapLayer.
            </summary>
            <remarks>
            In combination with Derender, the correct implementation of this method forms
            the heart of the incremental rendering used by the XamMap control. Subclasses
            which implement this method should do so with great care.
            
            This function is called under basically two circumstances
            
                Element becomes visible
                the window zoom changes
            
            If the current paths and such actually exist, elements may reuse them but
            should take note that the zoom may have changed since the last call.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElement.Place(Infragistics.SmartPlacer)">
            <summary>
            Places all of the current Element's placeable content.
            </summary>
            <param name="placer"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.MapElement.PropertyChanged">
            <summary>
            Event raised when a property value changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapElementCollection">
            <summary>
            Represents an observable collection of MapElement objects.
            </summary>
            <remarks>
            <para>
            MapElementCollection supports two extended methods for
            matching elements: by matching named property values either
            literally or by regular expression.
            </para>
            <para>
            In the future, other methods such as searching by area, by point
            etc will be added.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElementCollection.Item(System.String,System.String)">
            <summary>
            Gets an enumerable object which may be used to iterate
            over all elements in the current collection corresponding
            to the specified criteria.
            </summary>
            <param name="name">Attribute name used for value matching.</param>
            <param name="pattern">Literal string to match.</param>
            <returns>Enumerable object containing all matching elements</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElementCollection.Item(System.String)">
            <summary>
            Gets an enumerable object which may be used to iterate
            over all elements in the current collection corresponding
            to the specified criteria.
            </summary>
            <param name="pattern">Literal string to match to the Name property.</param>
            <returns>Enumerable object containing all matching elements</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElementCollection.Item(System.Windows.Point)">
            <summary>
            Gets the MapElements with the specified pt.
            </summary>
            <value></value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElementCollection.Item(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Gets an enumerable object which may be used to iterate
            over all elements in the current collection corresponding
            to the specified criteria.
            </summary>
            <param name="name">Attribute name used for value matching.</param>
            <param name="pattern">Regular expresssion to match.</param>
            <returns>Enumerable object containing all matching elements</returns>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElementCollection.Item(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets an enumerable object which may be used to iterate
            over all elements in the current collection corresponding
            to the specified criteria.
            </summary>
            <param name="pattern">Regular expresssion to match.</param>
            <returns>Enumerable object containing all matching elements</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElementCollection.FindElement(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Returns an enumerable object which may be used to iterate
            over all elements in the current collection corresponding
            to the specified criteria.
            </summary>
            <param name="name">Attribute name used for value matching.</param>
            <param name="pattern">Literal string to match.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElementCollection.FindElement(System.String,System.String)">
            <summary>
            Returns an enumerable object which may be used to iterate
            over all elements in the current collection corresponding
            to the specified criteria.
            </summary>
            <param name="name">Attribute name used for value matching.</param>
            <param name="pattern">Regular expression to match.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElementCollection.FindElement(System.Windows.Point)">
            <summary>
            Finds the element that contains pt.
            </summary>
            <param name="pt">The pt.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapLayerCollection">
            <summary>
            An observable collection of layers.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayerCollection.Item(System.String)">
            <summary>
            Gets the first layer with a matching LayerName property.
            </summary>
            <param name="name">Literal string to match to the LayerName property.</param>
            <returns>Matching layer or null</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayerCollection.FindName(System.String)">
            <summary>
            Gets an enumerable to all layers with a literally matching LayerName property.
            </summary>
            <param name="name">Literal string to match to the LayerName property.</param>
            <returns>layer enumerable</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayerCollection.FindName(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets an enumerable to all layers with a matching LayerName property.
            </summary>
            <param name="pattern">Expression string to match to the LayerName property.</param>
            <returns>layer enumerable</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapPolyline">
            <summary>
            Simple ordered collection of points with built-in type-conversion from string
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolyline.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapPolyline.Converter">
            <summary>
            Converts instances of other types to and from a MapPolyline. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolyline.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolyline.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolyline.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified value object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>  not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolyline.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapPolylineCollection">
            <summary>
            Represents a collection of MapPolyline objects.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapPolylineCollection.Converter">
            <summary>
            Converts instances of other types to and from a MapPolylineCollection. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolylineCollection.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter. 
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolylineCollection.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context. </param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolylineCollection.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified value object to the specified type. 
            </summary>
            <param name="context">An object that provides a format context. </param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolylineCollection.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the type of this converter. 
            </summary>
            <param name="context">An object that provides a format context. </param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolylineCollection.ToString">
            <summary>
            Returns a String that represents the current MapPolylineCollection. 
            </summary>
            <returns>A String that represents the current MapPolylineCollection.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapPolylineCollection.GetWorldRect">
            <summary>
            Gets the world rectangle for the current MapPolylineCollection.  
            </summary>
            <returns>WorldRectangle (may be Rect.Empty)</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.PathElement">
            <summary>
            A specialised layer Element representing a line or polyline object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.PathElement.Polylines">
            <summary>
            Gets or sets the polylines which define the current path element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.PathElement.WorldRect">
            <summary>
            Gets or sets the world rectangle for the current path element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.PathElement.ActualZIndex">
            <summary>
            Gets the effective z index for this Element.
            </summary>
            <value></value>
            <remarks>
            This method is overridden in subclasses to offset the ZIndex by
            the appropriate class-specific base.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Maps.SmartFrameworkElement`1">
            <summary>
            SmartPlaceable FrameworkElement with assoicated shadow. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SmartFrameworkElement`1.Element">
            <summary>
            Gets or sets the FrameworkElement associated with the
            current SmartFrameworkElement.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SmartFrameworkElement`1.ShadowElement">
            <summary>
            Gets or sets the shadow FrameworkElement associated with the
            current SmartFrameworkElement.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SmartFrameworkElement`1.Origin">
            <summary>
            Gets or sets the origin for the current SmartFrameworkElement
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SmartFrameworkElement`1.SmartSize">
            <summary>
            Gets or sets the smart size for the current SmartFrameworkElement
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SmartFrameworkElement`1.ShadowOffset">
            <summary>
            Gets or sets the shadow offset for the current SmartFrameworkElement
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.SmartTextBlock">
            <summary>
            SmartPlaceable TextBlock with associated shadow. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.SurfaceElement">
            <summary>
            A specialised layer Element representing a polygonal or polypolygonal object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SurfaceElement.ActualZIndex">
            <summary>
            Gets the effective z index for this Element.
            </summary>
            <value></value>
            <remarks>
            This method is overridden in subclasses to offset the ZIndex by
            the appropriate class-specific base.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.SurfaceElement.Polylines">
            <summary>
            Gets or sets the polylines.
            </summary>
            <value>The polylines.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.SurfaceElement.WorldRect">
            <summary>
            Gets or sets the world rectangle for the current MapElement object.
            </summary>
            <value></value>
        </member>
        <member name="M:Infragistics.Controls.Maps.SurfaceElement.Contains(System.Windows.Point)">
            <summary>
            Determines whether the specified pt is contained.
            </summary>
            <param name="pt">The pt.</param>
            <returns>
            	<c>true</c> if [contains] [the specified pt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.SymbolElement">
            <summary>
            A specialised layer Element representing a point object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SymbolElement.WorldRect">
            <summary>
            Gets or sets the world rectangle for the current MapElement object.
            </summary>
            <value></value>
        </member>
        <member name="P:Infragistics.Controls.Maps.SymbolElement.ActualZIndex">
            <summary>
            Gets the effective z index for this Element.
            </summary>
            <value></value>
            <remarks>
            This method is overridden in subclasses to offset the ZIndex by
            the appropriate class-specific base.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.SymbolElement.SymbolType">
            <summary>
            Gets or sets the type of the symbol.
            </summary>
            <value>The type of the symbol.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.SymbolElement.ActualSymbolType">
            <summary>
            Gets the actual type of the symbol.
            </summary>
            <value>The actual type of the symbol.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.SymbolElement.SymbolSize">
            <summary>
            Gets or sets the symbol size for this Element. Setting an Element's symbol size to NaN (the
            initial value) causes its value to be taken from the owner layer. Changing the value causes
            the Element to immediately update itself.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SymbolElement.ActualSymbolSize">
            <summary>
            Gets the effective symbol size for this Element. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.SymbolElement.symbolSize">
            <summary>
            The symbol size.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SymbolElement.SymbolGeometry">
            <summary>
            Gets or sets the symbol geometry for this symbol. Changing the value causes
            the Element to immediately update itself. Note that setting geometry on a
            symbol overrides the symbol's SymbolType setting,  
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SymbolElement.ActualSymbolGeometry">
            <summary>
            Gets the effective symbol geometry for this symbol, taking into account 
            the symbols and layer symbol geometries and symbol types.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.UltraUnit">
            <summary>
            Describes a unit of measurement
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.UltraUnit.Name">
            <summary>
            Gets the standard unit name.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.UltraUnit.Abbreviation">
            <summary>
            Gets the standard unit abbreviation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.UltraUnit.Size">
            <summary>
            Gets the size of the unit in SI base units.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.UltraUnit.DisplaySubdivisions">
            <summary>
            Gets or sets the display subdivisions.
            </summary>
            <value>The display subdivisions.</value>
        </member>
        <member name="T:Infragistics.Controls.Maps.ValueScale">
            <summary>
            Abstract base class for scale functionality.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ValueScale.LogicalParent">
            <summary>
            Gets or sets the layer's logical parent, usually an MapLayer component.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ValueScale.Layer">
            <summary>
            Gets the current ValueScale objects's hierarchical layer ancestor.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ValueScale.MinimumValue">
            <summary>
            Sets or gets the minimum value for this scale.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ValueScale.MinimumValueProperty">
            <summary>
            Identifies the MinimumValue dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnMinimumValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:MinimumValueChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnMinimumValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the minimum value changes.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Infragistics.Controls.Maps.ValueScale.ignoreMinimumValueChanged">
            <summary>
            Determines if the minimum value change should be ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ValueScale.MaximumValue">
            <summary>
            Sets or gets the maximum value for this scale.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ValueScale.MaximumValueProperty">
            <summary>
            Identifies the MaximumValue dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnMaximumValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:MaximumValueChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnMaximumValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the maximum value changes.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Infragistics.Controls.Maps.ValueScale.ignoreMaximumValueChanged">
            <summary>
            Determines if the maximum value change should be ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ValueScale.IsAutoRange">
            <summary>
            Sets or gets the autorange mode for this scale. Setting the autorange mode to
            true causes the scale to immediately adjust its range.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ValueScale.AutoRangeProperty">
            <summary>
            Identifies the IsAutoRange dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnAutoRangeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:AutoRangeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnAutoRangeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the maximum value changes.
            </summary>
            <param name="d"></param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.ValueScale.ValueStops">
            <summary>
            Sets or gets the value stops for this scale. Value stops may be used for scale display purposes
            or as part of the scaling function.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnValueStopsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValueStopsChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Infragistics.Controls.Maps.ValueScale.ValueStopsProperty">
            <summary>
            Identifies the ValueStops dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ValueScale.ignoreValueStopsChanged">
            <summary>
            Determines if the value stop changes should be ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ValueScale.ValueStopCount">
            <summary>
            Sets or gets the ValueStopCount for this ValueScale object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ValueScale.ValueStopCountProperty">
            <summary>
            Identifies the ValueStopCountProperty dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnValueStopCountChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ValueStopCountChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.DoAutoRange">
            <summary>
            Recalculates the range for this scale.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.GetScaledValue(System.Double)">
            <summary>
            Gets a scaled value from the parameter value.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.GetScaledBrush(System.Double,Infragistics.BrushCollection)">
            <summary>
            Gets a scaled brush from the parameter value.
            </summary>
            <param name="v"></param>
            <param name="brushes"></param>
            <returns></returns>
        </member>
        <member name="E:Infragistics.Controls.Maps.ValueScale.ValueScaleChanged">
            <summary>
            Event triggered whenever the scale changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ValueScale.OnMapScaleChanged(Infragistics.Controls.Maps.MapValueScaleChangedEventArgs)">
            <summary>
            Raises the <see cref="E:MapScaleChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Infragistics.Controls.Maps.MapValueScaleChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.DesignServices">
            <summary>
            Utility class for design time.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.DesignServices.IsInDesignModeStatic">
            <summary>
            Gets a value indicating whether the control is in design mode (running in Blend
            or Visual Studio).
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ColorSwatchPaneDisplayMode">
            <summary>
            Defines how the color swatch panel displays brush samples.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ColorSwatchPaneDisplayMode.Swatch">
            <summary>
            Display an interpolated swatch representing the brushes.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ColorSwatchPaneDisplayMode.Sample">
            <summary> 
            Display representative samples of the brushes labelled
            at the center of each sample.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ColorSwatchPaneDisplayMode.Range">
            <summary> 
            Display representative samples of the brushes labelled
            at the extremes of each sample.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ElementHoverAction.None">
            <summary>
            The elements should not perform an action when the mouse hovers over them.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ElementHoverAction.Highlight">
            <summary>
            The elements should display the default highlight animation when the mouse hovers over them.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.LinearUnitType">
            <summary>
            Specifies a standard linear unit.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.CM">
            <summary>
            Specifies centimetres.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.DM">
            <summary>
            Specifies decimetres.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.M">
            <summary>
            Specifies metres.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.DAM">
            <summary>
            Specifies decametres.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.HM">
            <summary>
            Specifies hectometres.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.KM">
            <summary>
            Specifies kilometres.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.IN">
            <summary>
            Specifies inches.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.FT">
            <summary>
            Specifies feet.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.USFT">
            <summary>
            Specifies US Survey feet.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.YD">
            <summary>
            Specifies yards.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.FU">
            <summary>
            Specifies furlongs.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.MI">
            <summary>
            Specifies miles.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LinearUnitType.NMI">
            <summary>
            Specifies nautical miles.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapColorSwatchPaneLabelMode">
            <summary>
            Defines the possible color swatch pane label modes.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPaneLabelMode.Top">
            <summary>
            Label rows are stacked above the color swatch.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPaneLabelMode.Bottom">
            <summary>
            Label rows are stacked below the color swatch.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapColorSwatchPaneLabelMode.Alternate">
            <summary>
            Label rows are alternate between top and bottom placement.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapFillMode">
            <summary>
            Defines how the map component modifies Element fill settings.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapFillMode.None">
            <summary>
            The Element fill is not modified.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapFillMode.RandomSelect">
            <summary>
            The Element's fill is set by random selection when it is added to the layer.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapFillMode.RandomInterpolate">
            <summary>
            The Element's fill is set by random interpolation when it is added to the layer.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapFillMode.Choropleth">
            <summary>
            The Element's fill is set according to its value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapFillMode.Chloropleth">
            <summary>
            The Element's fill is set according to its value. This is a synonym for Choropleth.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapGridDisplayMode">
            <summary>
            Defines the possible mapd grid display modes.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapGridDisplayMode.None">
            <summary>
            Hides the map grid.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapGridDisplayMode.Front">
            <summary>
            Draws the map grid in front of the map.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapGridDisplayMode.Back">
            <summary>
            Draws the map grid behind the map.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapSymbolType">
            <summary>
            Defines the shape used to display symbol elements.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.None">
            <summary>
            Not defined symbol
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Bubble">
            <summary>
            Circular symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Pyramid">
            <summary>
            Flat-based triangular symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Triangle">
            <summary>
            Pointed-based triangular symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Square">
            <summary>
            Square symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Diamond">
            <summary>
            Diamond-shaped symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Pentagon">
            <summary>
            Regular pentagon symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Hexagon">
            <summary>
            Regular hexagon symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Tetragram">
            <summary>
            Four-pointed star symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Pentagram">
            <summary>
            Five-pointed star symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Star">
            <summary>
            Six-pointed star symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Thermometer">
            <summary>
            Stylised thermometer-shaped symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Hourglass">
            <summary>
            Stylised hourglass-shaped symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Tube">
            <summary>
            Vertical tube-shaped symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Raindrop">
            <summary>
            Stylised raindrop-shaped symbol.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapSymbolType.Smiley">
            <summary>
            Stylised "smiley" symbol.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapWindowAnimationMode">
            <summary>
            Used to define how value scales map values to brushes.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapWindowAnimationMode.None">
            <summary>
            Window steps from one position to another
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapWindowAnimationMode.Linear">
            <summary>
            Window moves at constant speed from one position to another.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapWindowAnimationMode.Logarithmic">
            <summary>
            Window moves smoothly from one position to another.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapWindowAnimationMode.Trigonometric">
            <summary>
            Window accelerates and decelerates from one position to another.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ProjectionType">
            <summary>
            Defines a projection type used by coordiante systems to convert geodetic
            to Cartesian coordinates.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.SphericalMercator">
            <summary>
            SphericalMercator projection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Mercator">
            <summary>
            Mercator projection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.ObliqueMercator">
            <summary>
            Oblique Mercator projection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Lambert">
            <summary>
            Lambert Cylindrical Equal Area
            </summary>
            <remarks>
            The Lambert cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of thirty degrees. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Behrmann">
            <summary>
            Behrmann Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Behrmann cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of thirty degrees. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.TristanEdwards">
            <summary>
            Tristan Edwards Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Tristan Edwards cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of 37.383 degrees. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Peters">
            <summary>
            Peters Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Tristan Edwards cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of 44.138 degrees. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.GallOrthographic">
            <summary>
            Gall Orthographic Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Tristan Edwards cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of 45 degrees. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Balthasart">
            <summary>
            Balthasart Cylindrical Equal Area Projection
            </summary>
            <remarks>
            The Balthasart cylindrical equal-area mapProjection is a cylindrical
            equal-area mapProjection with a standard parallel of 50 degrees. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.MillerCylindrical">
            <summary>
            Miller cylindrical projection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Equirectangular">
            <summary>
            Equirectangular Projection
            </summary>
            <remarks>
            An equirectangular mapProjection is a cylindrical equidistant mapProjection,
            also called a rectangular mapProjection, plane chart, plate carre, or
            unprojected map, in which the horizontal coordinate is the longitude
            and the vertical coordinate is the latitude, so the standard parallel
            is taken as zero degrees. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Miller37">
            <summary>
            Cylindrical equidistant mapProjection with a standard
            parallel of 37.5 degrees
            </summary>
            <remarks>
            Miller cylindrical equidistant mapProjection with a standard
            parallel of 37.5 degrees gives minimal overall scale distortion.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Miller43">
            <summary>
            Cylindrical equidistant mapProjection with a standard
            parallel of 45.0 degrees
            </summary>
            <remarks>
            Miller cylindrical equidistant mapProjection with a standard
            parallel of 45.0 degrees gives scale distortion over continents.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ProjectionType.Miller50">
            <summary>
            Cylindrical equidistant mapProjection with a standard
            parallel of 50.0 degrees
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ScalePaneDisplayMode">
            <summary>
            Defines the method used by the scale pane to diplay a sample distance.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ScalePaneDisplayMode.Line">
            <summary>
            Sample distance is displayed as a line.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ScalePaneDisplayMode.Bar">
            <summary>
            Sample distance is displayed as a bar.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapBrushesChangedEventArgs">
            <summary>
            Provides information about the MapBrushesChanged event that occurs when
            an MapLayer's brushes collection or its contents changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapBrushesChangedEventArgs.#ctor(Infragistics.BrushCollection)">
            <summary>
            Initialises a new MapBrushesChangedEventArgs object
            </summary>
            <param name="brushes"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapBrushesChangedEventArgs.#ctor(Infragistics.BrushCollection,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Initialises a new MapBrushesChangedEventArgs object
            </summary>
            <param name="brushes"></param>
            <param name="collectionChangedEventArgs"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapBrushesChangedEventArgs.Brushes">
            <summary>
            Gets the brushes collection associated with the current object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapBrushesChangedEventArgs.CollectionChangedEventArgs">
            <summary>
            Gets the underlying CollectionChangedEventArgs associated with the current object.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapBrushesChangedEventHandler">
            <summary>
            Represents the method that handles the MapBrushesChanged event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapElementClickEventArgs">
            <summary>
            Provides information about the MapElementClickEvent event that occurs when
            an Element in a map is activated either by the end-user or programmatically.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElementClickEventArgs.#ctor(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Initialises a new MapElementClickEventArgs object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElementClickEventArgs.Element">
            <summary>
            Gets the Element associated with the current MapElementClickEventArgs object.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapElementClickEventHandler">
            <summary>
            Represents the method that handles the MapElementClickEventArgs event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapElementHoverEventArgs">
            <summary>
            Provides information about the MapElementHover event that occurs when
            the mouse enters or leaves an element on an MapLayer.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElementHoverEventArgs.#ctor(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Initialises a new MapElementHoverEventArgs object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElementHoverEventArgs.Element">
            <summary>
            Gets the hovered element
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapElementHoverEventHandler">
            <summary>
            Represents the method that handles the MapElementHoverEvent event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapElementRenderEventArgs">
            <summary>
            Provides information about the MapElementPrerender event that occurs immediately
            before rendering a layer Element.
            </summary>
            
        </member>
        <member name="M:Infragistics.Controls.Maps.MapElementRenderEventArgs.#ctor(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Initialises a new MapElementRenderEventArgs object referencing
            the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapElementRenderEventArgs.Element">
            <summary>
            Gets the MapElement associated with the current MapElementRenderEventArgs object. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapElementRenderEventHandler">
            <summary>
            Represents the method that handles the MapElementRenderEvent event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapLayerImportAction">
            <summary>
            Represents an action associated with a MapLayerImport event.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayerImportAction.Start">
            <summary>
            Layer import has started.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayerImportAction.Progress">
            <summary>
            Layer is importing.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayerImportAction.End">
            <summary>
            Layer import has finished without error.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MapLayerImportAction.Error">
            <summary>
            Layer import has finished with an error.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapLayerImportEventArgs">
            <summary>
            Provides information about the MapLayerImport event that occurs when
            an MapLayer import terminates.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayerImportEventArgs.#ctor(Infragistics.Controls.Maps.MapLayerImportAction)">
            <summary>
            Initialises a new MapLayerImportProgressEventArgs object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayerImportEventArgs.#ctor(Infragistics.Controls.Maps.MapLayerImportAction,System.Exception)">
            <summary>
            Initialises a new MapLayerImportProgressEventArgs object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayerImportEventArgs.#ctor(Infragistics.Controls.Maps.MapLayerImportAction,System.Double)">
            <summary>
            Initialises a new MapLayerImportProgressEventArgs object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayerImportEventArgs.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayerImportEventArgs.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayerImportEventArgs.Progress">
            <summary>
            Gets or sets the progress.
            </summary>
            <value>The progress.</value>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapLayerImportEventHandler">
            <summary>
            Represents the method that handles the MapLayerImport event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapLayersChangedEventArgs">
            <summary>
            Provides information about the MapLayersChanged event that occurs when
            an MapLayer's layers collection or its contents changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapLayersChangedEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            Initialises a new MapLayersChangedEventArgs object.
            </summary>
            <param name="oldLayers"></param>
            <param name="newLayers"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayersChangedEventArgs.OldLayers">
            <summary>
            Gets or sets the old layers.
            </summary>
            <value>The old layers.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapLayersChangedEventArgs.NewLayers">
            <summary>
            Gets or sets the new layers.
            </summary>
            <value>The new layers.</value>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapLayersChangedEventHandler">
            <summary>
            Represents the method that handles the MapLayersChanged event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapMouseButtonEventHandler">
            <summary>
            Represents the method that will handle mouse button related routed events,
            for example MapMouseLeftButtonDown. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapMouseButtonEventArgs">
            <summary>
            Provides data for mouse button related events. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapMouseButtonEventArgs.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.MapMouseButtonEventArgs"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapMouseButtonEventArgs.#ctor(System.Windows.Point,Infragistics.Controls.Maps.MapElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.MapMouseButtonEventArgs"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="element">The MapElement in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapMouseButtonEventArgs.Element">
            <summary>
            Returns the map element associated with this event. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapMouseButtonEventArgs.Position">
            <summary>
            Returns the world position of the mouse pointer.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapMouseEventHandler">
            <summary>
            Represents the method that will handle mouse related routed events that do not
            specifically involve mouse buttons or the mouse wheel; for example,
            MapMouseMove.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapMouseEventArgs">
            <summary>
            Provides data for mouse related routed events that do not specifically
            involve mouse buttons or the mouse wheel, for example MapMouseMove.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapMouseEventArgs.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.MapMouseEventArgs"/> class.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapMouseEventArgs.#ctor(System.Windows.Point,Infragistics.Controls.Maps.MapElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.MapMouseEventArgs"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="element">The MapElement in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapMouseEventArgs.Element">
            <summary>
            Returns the map element associated with this event. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapMouseEventArgs.Position">
            <summary>
            Returns the world position of the mouse pointer.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapRectChangedEventArgs">
            <summary>
            Provides data for the Map_WindowRectChanged event which occurs when the window
            rectangle is changed either by the end-user or programmatically.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapRectChangedEventArgs.#ctor(System.Windows.Rect)">
            <summary>
            Initialises a new MapWindowRectChangedEventArgs object.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapRectChangedEventArgs.Rect">
            <summary>
            Gets the new window rectangle.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapRectChangedEventHandler">
            <summary>
            Represents the method that handles the MapWindowRectChanged event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapSelectionChangedEventArgs">
            <summary>
            Provides information about the MapSelectionChangedEvent event that occurs when
            an Element on an MapLayer is activated either by the end-user or programmatically.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapSelectionChangedEventArgs.#ctor">
            <summary>
            Initialises a new MapElementClickEventArgs object.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapSelectionChangedEventHandler">
            <summary>
            Represents the method that handles the MapSelectionChanged event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapValueScaleChangedEventArgs">
            <summary>
            Provides information about the ValueScale event that occurs when
            an an MapLayer's scale or any of its properties are changed either
            manually or as the result of an autorange operation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapValueScaleChangedEventHandler">
            <summary>
            Represents the method that handles the ValueScale event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapWindowRectChangedEventArgs">
            <summary>
            Provides data for the Map_WindowRectChanged event which occurs when the window
            rectangle is changed either by the end-user or programmatically.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapWindowRectChangedEventArgs.#ctor(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Initialises a new MapWindowRectChangedEventArgs object.
            </summary>
            <param name="windowRect"></param>
            <param name="windowCenter"></param>
            <param name="windowScale"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapWindowRectChangedEventArgs.WindowRect">
            <summary>
            Gets the new window rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapWindowRectChangedEventArgs.WindowCenter">
            <summary>
            Gets the new window center.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapWindowRectChangedEventArgs.WindowScale">
            <summary>
            Gets the new window scale.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapWindowRectChangedEventHandler">
            <summary>
            Represents the method that handles the MapWindowRectChanged event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapWorldRectChangedEventArgs">
            <summary>
            Provides data for the MapWorldRectChanged event which occurs when the
            map's worldRect rectangle is changed.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapWorldRectChangedEventArgs.#ctor(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.MapWorldRectChangedEventArgs"/> class.
            </summary>
            <param name="oldWorldRect">The old world rect.</param>
            <param name="newWorldRect">The new world rect.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapWorldRectChangedEventArgs.OldWorldRect">
            <summary>
            Gets the worldRect rectangle from before the change.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapWorldRectChangedEventArgs.NewWorldRect">
            <summary>
            Gets the new worldRect rectangle.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapWorldRectChangedEventHandler">
            <summary>
            Represents the method that handles the MapWorldRectChanged event. 
            </summary>
            <param name="sender"></param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.ILogicalObject">
            <summary>
            The ILogicalObject interface is used extensively within the map component to allow
            definition of logical object hierarchies.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ILogicalObject.LogicalParent">
            <summary>
            Sets or gets the current object's logical parent.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapStateMachine.Arm(Infragistics.Controls.Maps.MapStateTrigger,System.Object,System.EventArgs)">
            <summary>
            State for tracking an element having captured the mouse.
            </summary>
            <param name="trigger"></param>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapValueViewer">
            <summary>
            Some sort of proxy for the "gauge" control potentially assoicated with each
            layer Element.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MapValueViewer.#ctor(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Constructs a ValueViewer for the specified Element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapValueViewer.Origin">
            <summary>
            Gets or sets the smart size for the current SmartFrameworkElement
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.WindowAnimator">
            <summary>
            Implements smooth panning and zooming for the map viewport.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.WindowAnimator.#ctor(Infragistics.Controls.Maps.MapViewport)">
            <summary>
            Initialises a new WindowAnimator object for the specified viewport
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.WindowAnimator.UpdateTransform(System.Double)">
            <summary>
            Updates the render transform according to the interpolation parameter.
            </summary>
            <param name="p">interpolation parameter.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.WindowAnimator.Start(System.Windows.Point,System.Double)">
            <summary>
            Starts an window animation.
            </summary>
            <param name="centerMax">target window center</param>
            <param name="scaleMax">target window scale</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.WindowAnimator.windowTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Increments the current window animation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Controls.Maps.Geocs">
            <summary>
            Represents a geo coordinate system.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Geocs.#ctor">
            <summary>
            Initialises a new Geocs object with the default values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Geocs.EllipsoidType">
            <summary>
            Sets or gets the ellipsoid type for the current coordinate system.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.Geocs.EllipsoidTypeProperty">
            <summary>
            Identifies the EllipsoidType property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Geocs.UpdateEllipsoidType(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the type of the ellipsoid.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.Geocs.Ellipsoid">
            <summary>
            Sets or gets the ellipsoid for the current coordinate system.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.Geocs.EllipsoidProperty">
            <summary>
            Identifies the EllipsoidType property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Geocs.Update(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the specified d.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.Geocs.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.CoordinateSystem">
            <summary>
            Represents a coordinate system.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Maps.CoordinateSystem"/> class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CoordinateSystem.UnitType">
            <summary>
            Sets or gets the current CoordinateSystem's standard linear unit type.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            Setting the current CoordinateSystem's unit type also sets its unit. 
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.CoordinateSystem.UnitTypeProperty">
            <summary>
            Identifies the UnitType dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.UpdateUnitType(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the type of the unit.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.CoordinateSystem.Unit">
            <summary>
            Sets or gets the current CoordinateSystem's unit.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CoordinateSystem.UnitProperty">
            <summary>
            Identifies the Unit dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CoordinateSystem.Geocs">
            <summary>
            Gets or sets the geocs.
            </summary>
            <value>The geocs.</value>
        </member>
        <member name="F:Infragistics.Controls.Maps.CoordinateSystem.GeocsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CoordinateSystem.Geocs"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.OnGeocsChanged(Infragistics.Controls.Maps.Geocs,Infragistics.Controls.Maps.Geocs)">
            <summary>
            GeocsProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.CoordinateSystem.Projection">
            <summary>
            Sets or gets the current CoordinateSystem's projection.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CoordinateSystem.ProjectionProperty">
            <summary>
            Identifies the Projection dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CoordinateSystem.FalseEasting">
            <summary>
            Sets or gets the current CoordinateSystem's FalseEasting expressed
            in the units specified by the Units property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CoordinateSystem.FalseEastingProperty">
            <summary>
            Identifies the FalseEasting dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CoordinateSystem.FalseNorthing">
            <summary>
            Sets or gets the current CoordinateSystem's FalseNorthing expressed
            in the units specified by the Units property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CoordinateSystem.FalseNorthingProperty">
            <summary>
            Identifies the FalseNorthing dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.Update(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the specified d.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.ProjectToMap(System.Windows.Point)">
            <summary>
            Projects to map.
            </summary>
            <param name="geodetic">The geodetic.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.UnprojectFromMap(System.Windows.Point)">
            <summary>
            Unprojects from map.
            </summary>
            <param name="cartesian">The cartesian.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.Project(System.Windows.Point)">
            <summary>
            Project a point from geodetic to Cartesian according to the current
            CoordinateSystem's settings.
            </summary>
            <param name="geodetic">Point to project.</param>
            <returns>Projected point.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.CoordinateSystem.Unproject(System.Windows.Point)">
            <summary>
            Project a point from Cartesian to geodetic according to the current
            CoordinateSystem's settings.
            </summary>
            <param name="cartesian">Point to project.</param>
            <returns>Projected point.</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.CylindricalEqualArea">
            <summary>
            The normal aspect cylindrical equal area projection.
            </summary>
            <remarks>
            The cylindrical equal area projection was proposed by Johann Heinrich Lambert
            and is occaisionally given his name. 
            <para>
            Like other regular cylindricals, the graticule of the normal Cylindrical Equal
            Area projection consists of straight equally spaced vertical meridians perpendicular
            to straight unequally spaced horizontal parallels.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.CylindricalEqualArea.StandardParallel">
            <summary>
            Sets or gets the current projections's standard southern parallel
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CylindricalEqualArea.StandardParallelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CylindricalEqualArea.StandardParallel"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CylindricalEqualArea.LongitudeOrigin">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CylindricalEqualArea.LongitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CylindricalEqualArea.LongitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CylindricalEqualArea.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CylindricalEqualArea.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.CylindricalEqualArea.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified cylindrical equal area.
            </summary>
            <param name="cylindricalEqualArea">The cylindrical equal area.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.CylindricalEquidistant">
            <summary>
            Represents a cylindrical equidistance projection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CylindricalEquidistant.Radius">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CylindricalEquidistant.RadiusProperty">
            <summary>
            The radius dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CylindricalEquidistant.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CylindricalEquidistant.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CylindricalEquidistant.CentralMeridian"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.CylindricalEquidistant.StandardParallel">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.CylindricalEquidistant.StandardParallelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.CylindricalEquidistant.StandardParallel"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CylindricalEquidistant.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.CylindricalEquidistant.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.CylindricalEquidistant.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified cylindrical equidistant.
            </summary>
            <param name="cylindricalEquidistant">The cylindrical equidistant.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.Ellipsoid">
            <summary>
            Represents a map ellipsoid shape
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Ellipsoid.#ctor(Infragistics.Controls.Maps.EllipsoidType)">
            <summary>
            Initialises a new Ellipsoid from the specified ellipsoid type.
            </summary>
            <param name="ellipsoidType"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.Ellipsoid.#ctor(System.Double,System.Double)">
            <summary>
            Initialises a new Ellipsoid with the specified a and f parameters.
            </summary>
            <param name="a"></param>
            <param name="f"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.Ellipsoid.a">
            <summary>
            Gets the a parameter for the ellipsoid.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Ellipsoid.f">
            <summary>
            Gets the f parameter for the ellipsoid.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Ellipsoid.e2">
            <summary>
            Gets the e sqaured parameter for the ellipsoid.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Ellipsoid.ep2">
            <summary>
            Gets the e prime sqaured parameter for the ellipsoid.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.EllipsoidType">
            <summary>
            Standard ellipsoids.
            </summary>
            <remarks>
            For many maps, including nearly all maps in commercial atlases, it may be
            assumed that the Earth is a sphere. Actually, it is more nearly an oblate ellipsoid
            of revolution, also called an oblate shperoid. This is an ellipse rotated about its
            shorter axis. The flattening of the ellipse for the Earth is only about one part in
            three hundred; but it is sufficient to become a necessary part of calculations in
            plotting accurate maps at a scale of 1:100 000 or larger, and is significant even for
            1:5 000 000-scale maps of the United States, affecting plotted shapes by up to
            2/3 percent. On small-scale maps, including single-sheet worldRect maps, the oblateness
            is negligble.
            <para>
            The Earth is not an exact ellipsoid, and deviations from this shape are continuously
            evaluated. The geoid is the name given to the shape that the Earth would
            assume if it were measured at mean sea-level. This is an undulating surface 
            that varies not more than about a hundred metres above or below a well-fitting
            ellipsoid, a variation far less than the ellipsoid varies from the sphere. It is
            important to remember that elevations and contour lines on the Earth are reported
            relative to the geoid, not the ellipsoid. Latitude, Longitude and all plane
            coordinate systems, on the other hand, are determined with respect to the ellipsoid. 
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.GRS1980">
            <summary>
            The GRS80 map datum.
            </summary> 
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.NAD83">
            <summary>
            The NAD 83 map datum
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.WGS72">
            <summary>
            The WGS 72 map datum.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.WGS84">
            <summary>
            The WGS 84 map datum.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.Australian">
            <summary>
            The Australian national map datum.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.Krassovsky">
            <summary>
            The Krassovsky map datum.
            </summary> 
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.International">
            <summary>
            The International map datum.
            </summary> 
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.Hayford">
            <summary>
            The Hayford map datum.
            </summary> 
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.Clarke1880">
            <summary>
            The Clark 1880 map datum.
            </summary> 
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.Clarke1866">
            <summary>
            The Clark 1866 map datum.
            </summary> 
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.Airy">
            <summary>
            The Airy map datum
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.Bessel1841">
            <summary>
            The Bessel 1841 map datum.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.EllipsoidType.Everest">
            <summary>
            The Everest map datum.
            </summary> 
        </member>
        <member name="T:Infragistics.Controls.Maps.EllipsoidUtil">
            <summary>
            Static utility class for map ellipsoid definitions.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.EllipsoidUtil.a(Infragistics.Controls.Maps.EllipsoidType)">
            <summary>
            As the specified ellipsoid type.
            </summary>
            <param name="ellipsoidType">Type of the ellipsoid.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.EllipsoidUtil.f(Infragistics.Controls.Maps.EllipsoidType)">
            <summary>
            F of the ellipsoid.
            </summary>
            <param name="ellipsoidType">Type of the ellipsoid.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.EllipsoidUtil.e2(Infragistics.Controls.Maps.EllipsoidType)">
            <summary>
            E2 of the ellipsoid.
            </summary>
            <param name="ellipsoidType">Type of the ellipsoid.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.EllipsoidUtil.ep2(Infragistics.Controls.Maps.EllipsoidType)">
            <summary>
            Ep2 of the ellipsoid.
            </summary>
            <param name="ellipsoidType">Type of the ellipsoid.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.LambertConformalConic">
            <summary>
            
            </summary>
            <remarks>
            The Lambert Conformal Conic projection is used for the 1:1 000 000-scale regional
            worldRect aeronautical charts, the 1:500 000-scale sectional aeronautical charts and
            1:500 000-scale State base maps (all 48 contiguous states have the same
            standard parallels of lat. 33 and 45N, and thus match). Also cast on the Lambert
            are most of the 1:24 000-scale 5.7 minute quadrangle maps prepared after 1957
            which lie in zones for which the Lambert is the base for the SPCS. In the latter
            case,  the standard parallels for the zone are used, rather than the parameters
            designed for the individual quadrangles.
            <para>
            The Lambert Conformal Conic has also been adopted as the official topographic
            representation for some other countries.
            </para>
            <para>
            The pole in the same hemisphere as the standard parallels is shown on the 
            Lambert conformal conic as a point, the pole in the other hemisphere is 
            at infinity. Straight lines between points approximate great circle
            arcs for maps of moderate coverage.
            </para>
            <para>
            In some atlases, partiularly British, the Lambert Conformal Conic is called the 
            "Conical Orthomorophic" projection.
            </para>
            <para>
            This code has been verified against the numerical examples in "Map Projections -
            A Working Manual" by John P Snyder, United States Geological Survey Professional
            Paper 1395" for forward and reverse ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.LambertConformalConic.StandardParallelNorth">
            <summary>
            Sets or gets the current projections's standard southern parallel
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LambertConformalConic.StandardParallelNorthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.LambertConformalConic.StandardParallelNorth"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.LambertConformalConic.StandardParallelSouth">
            <summary>
            Sets or gets the current projections's standard southern parallel
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LambertConformalConic.StandardParallelSouthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.LambertConformalConic.StandardParallelSouth"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.LambertConformalConic.LatitudeOrigin">
            <summary>
            Sets or gets the current projections's latitude origin
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LambertConformalConic.LatitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.LambertConformalConic.LatitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.LambertConformalConic.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.LambertConformalConic.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="F:Infragistics.Controls.Maps.LambertConformalConic.CentralMeridianProperty"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LambertConformalConic.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.LambertConformalConic.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.LambertConformalConic.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified lambert conformal conic.
            </summary>
            <param name="lambertConformalConic">The lambert conformal conic.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.Mercator">
            <remarks>
            The well-known Mercator projection was perhaps the first projection to be
            regularly identified when atlases of over a century ago gradually began to
            name projections used, a practice now fairly commonplace.
            <para>
            The meridians of longitude of the Mercator projection are vertical parallel
            equally spaced lines, cut at right angles by horizontal straight parallels
            which are increasingly spaced at each pole so that conformality exists.
            </para>
            <para>
            The major navigational feature of the projection is found in the facts that a
            sailing route between two points is shown as a straight line, if the direction or
            azimuth of the ship remains constant with respect to north. This kind of route
            is called a loxodrome or rhumb line and is usually longer than the great circle
            path. 
            </para>
            <para>
            This projection has been standard since 1910 for nautical charts prepared by the
            former U.S. Coast and Geodetic Survey.
            </para>
            <para>
            This code has been verified against the numerical examples in "Map Projections -
            A Working Manual" by John P Snyder, United States Geological Survey Professional
            Paper 1395" for forward and reverse spherical and ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.Mercator.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.Mercator.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.Mercator.CentralMeridian"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Mercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Mercator.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Mercator.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified mercator.
            </summary>
            <param name="mercator">The mercator.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.MillerCylindrical">
            <summary>
            Represents a miller cylindrical projection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MillerCylindrical.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MillerCylindrical.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.MillerCylindrical.CentralMeridian"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MillerCylindrical.Radius">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.MillerCylindrical.RadiusProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.MillerCylindrical.Radius"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MillerCylindrical.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.MillerCylindrical.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.MillerCylindrical.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified miller cylindrical.
            </summary>
            <param name="millerCylindrical">The miller cylindrical.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.ModifiedTransverseMercator">
            <summary>
            
            </summary>
            <remarks>
            In 1972, the USGS devised a projection specifically for the revision of a 1954
            map of Alaska which, like its predecessors, was based on the Polyconic projection.
            It resembles the Transverse Mercator in a very limited manner and cannot
            be considered a cylindrical projection.
            <para>
            For transferring data to and from Alaska maps, it was necesary to determine
            projection formulas for computer programming. Since it appeared to be 
            unnecessarily complicated to derive formulas based on the correct construction,
            it was decided to test empirical formulas with actual coordinates. After
            various trial values for scale and standard parallels were tested, the empirical
            formulas used in this class were obtained. These agree with measured values
            within 0.005 inch at mapping scale for 44 out of 58 measurements made on the map
            and within 0.01 inch for 54 of them.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.ModifiedTransverseMercator.LongitudeOrigin">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ModifiedTransverseMercator.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.ModifiedTransverseMercator.LongitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ModifiedTransverseMercator.LatitudeOrigin">
            <summary>
            Sets or gets the current projections's latitude origin
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ModifiedTransverseMercator.LatitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.ModifiedTransverseMercator.LatitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ModifiedTransverseMercator.ScaleFactor">
            <summary>
            Sets or gets the current projections's scale factor
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ModifiedTransverseMercator.ScaleFactorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.ModifiedTransverseMercator.ScaleFactor"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ModifiedTransverseMercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ModifiedTransverseMercator.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.ModifiedTransverseMercator.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified modified transverse mercator.
            </summary>
            <param name="modifiedTransverseMercator">The modified transverse mercator.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.ObliqueMercator">
            <summary>
            The Hotine Oblique Mercator Projection
            </summary>
            <remarks>
            There are several geographical regions such as the Alaska panhandle
            centered along lines which are neither parallels nor meridians, but 
            which may be taken as great circle routes passing through the region.
            If conformality is desired in such regions, the Oblique Mercator is
            a projection which should be considered.
            <para>
            The Oblique Mercator projection is used in the spherical form for
            a few atlas maps. In the ellipsoid form it was used for Switzerland
            and Madagascar as well as Malaya and Borneo and Italy. It is used
            in the Hotine form by the USGS for grid marks on the panhandle of
            Alaska as well as by the US Lake Survey for mapping of the five
            great lakes, the St Lawrence River, and the US-Canada border lakes.
            </para>
            <para>
            Until the implementation of Space Oblique Mercator, the Hotine Oblique
            Mercator was probably the most suitable projection available for
            mapping Landsat type data.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.ObliqueMercator.LatitudeOrigin">
            <summary>
            Sets or gets the current projections's latitude origin
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ObliqueMercator.LatitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.ObliqueMercator.LatitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ObliqueMercator.LongitudeOrigin">
            <summary>
            Sets or gets the current projections's longitude origin
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ObliqueMercator.LongitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.ObliqueMercator.LongitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ObliqueMercator.ScaleFactor">
            <summary>
            Sets or gets the current projections's scale factor
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ObliqueMercator.ScaleFactorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.ObliqueMercator.ScaleFactor"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ObliqueMercator.Azimuth">
            <summary>
            Sets or gets the current projections's azimuth
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ObliqueMercator.AzimuthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.ObliqueMercator.Azimuth"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ObliqueMercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ObliqueMercator.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.ObliqueMercator.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified oblique mercator.
            </summary>
            <param name="obliqueMercator">The oblique mercator.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.Projection">
            <summary>
            Projection objects define the full public API for projecting
            geodetic map coordinates to/from Cartesian the internal coordinate
            system
            </summary>
            <remarks>
            The general purpose of map projections and the problems encountered
            have been discusses often and well in various books on cartography
            and map projections. Every map user and maker should have a basic
            understanding of projections, no matter how much computers seem
            to have automated the operations.
            <para>
            A map projection is a systematic representation of all or part of the
            surface of a round body, especially the Earth, on a plane. This usually
            includes deliniating meridians and parallels, as required by some definitions
            of a map projection, but it may not, depending on the the purpose of the
            map. A projection is required in any case. Since this cannot be done without
            distortion, the cartographer must choose the characteristic which is to
            be shown accurately at the expense of others, or a compromise of several
            characteristics. If the map covers a continent or the Earth, distortion
            will be visually apparent. If the region is the size of a small town,
            distortion may be barely measurable using many projections, but it can
            still be serious with other projections. There is literally an infinite
            number of projections that can be devised, and several hundred have been
            published, most of which are rarely-used novelties. Most projections
            may be infinitely varied by choosing different points on Earth as the
            center or as a starting point.
            </para>
            <para>
            It cannot be said that there is one "best" projection for mapping. It is
            even risky to claim that one has found the best projection for a given
            application, unless the parameters chosen are artificially constricting.
            A carefully constructed globe is not the best map for most applications 
            because its scale is by necessity too small. A globe is awkward to use
            in general, and a straight edge cannot be satisfactorily used on one for
            measurement of distance.
            </para>
            <para>
            To identify the location points on the Earth, a graticule or network of
            longitude and latitude lines has been superimposed on the surface. They 
            are commonly referred to as meridians and parallels respectively.
            </para>
            <para>
            Given the North and South poles, which are approximately the ends of the 
            axis about which the Earth rotates, and the Equator, an imaginary line
            halfway between the two poles, the parallels of latitude are formed
            by circles surrounding the Earth and in planes parallel with that of 
            the equator. If the circles are drawn equally spaced along the surface
            of the sphere, with 90 spaces from the equator to 90 degrees North and South
            at the respective poles, each is called a degree of latitude.
            </para>
            <para>
            Meridians of longitude are formed with a series of imaginary lines, all 
            intersecting at both the North and South poles, and crossing each
            parallel of latitude at right angles but striking the equator at various 
            points.
            </para>
            <para>
            There is only one location for the equator and poles which serve as references
            for counting degrees of latitude, but there is no natural origin from which
            to count degrees of longitude, since all meridians are identical in shape and
            size. It thus becomes necessary to choose arbitrarily one meridian as the
            starting point, or prime meridian. In 1884, the International Meridian 
            Conference, meeting in Washington, agreed to adopt the "meridian passing through
            the center of the transit instrument at the Observatory of Greenwich as the
            initial meridian for longitude" resolving that "from this meridian longitude
            shall be counted in two directions up to 180 degrees, east longitude being
            plus and west longitude being minus"
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.Projection.EllipsoidType">
            <summary>
            Sets or gets the current projections's datum
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.Projection.EllipsoidTypeProperty">
            <summary>
            Identifies the EllipsoidType dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.UpdateConstants(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Updates the constants.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.ProjectToMap(System.Windows.Point)">
            <summary>
            Projects a geodetic point to the map's internal coordinate system.
            </summary>
            <param name="geodetic">Geodetic point to project.</param>
            <returns>Cartesian point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.ProjectToMap(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Projects a list of geodetic points to the map's internal coordinate system.
            </summary>
            <param name="geodetic">List of geodetic points to project.</param>
            <returns>List of Cartesian points.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.ProjectToMap(Infragistics.Controls.Maps.MapPolylineCollection)">
            <summary>
            Projects a geodetic MapPolylineCollection to the map's internal coordinate system. 
            </summary>
            <param name="geodetic">Geodetic MapPolylineCollection</param>
            <returns>Cartesian MapPolylineCollection</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.UnprojectFromMap(System.Windows.Point)">
            <summary>
            Unprojects a point in the map's internal coordinate system to geodetic.
            </summary>
            <param name="cartesian">Point in the map's internal coordinate system.</param>
            <returns>Geodetic point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.UnprojectFromMap(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Unprojects a list of points in the map's internal coordinate system to geodetic.
            </summary>
            <param name="cartesian">List of points in the map's internal coordinate system.</param>
            <returns>List of geodetic points.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.UnprojectFromMap(Infragistics.Controls.Maps.MapPolylineCollection)">
            <summary>
            Unprojects a MapPolylineCollection in the map's internal coordinate system to geodetic.
            </summary>
            <param name="cartesian">MapPolylineCollection in the map's internal coordinate system.</param>
            <returns>Geodetic MapPolylineCollection.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Projection.Unproject(System.Windows.Point)">
            <summary>
            Projects a Cartesian point to geodetic.
            </summary>
            <param name="cartesian">Cartesian point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.ProjectionUtil">
            <summary>
            Static utility class for map projections.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ProjectionUtil.Projection(Infragistics.Controls.Maps.ProjectionType)">
            <summary>
            Projections the specified projection type.
            </summary>
            <param name="projectionType">Type of the projection.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.SphericalMercator">
            <summary>
            Represents a spherical Mercator projection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SphericalMercator.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.SphericalMercator.CentralMeridianProperty">
            <summary>
            Central meridian property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.SphericalMercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.SphericalMercator.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.SphericalMercator.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified mercator.
            </summary>
            <param name="mercator">The mercator.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.UTMZone">
            <summary>
            Specifies a universal transverse Mercator zone.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.TransverseMercator">
            <remarks>
            Since the Mercator projection has little error close to the Equator, it has
            been found very useful in the transverse form, with the equator of the projection
            rotated 90 degrees to coincide with the desired central meridian.
            <para>
            The formulas are for the complete ellipsoid are practical only within
            a band between four degrees of longitude and some ten to fifteen degrees
            of arc distance on either side of the central meridian, because of the
            much more significant scale errors fundamental to any projection covering
            a larger area.
            </para>
            <para>
            Little use has been made of the Transverse Mercator for single maps of
            continental areas. 
            </para>
            <para>
            This code has been verified against the numerical examples in "Map Projections -
            A Working Manual" by John P Snyder, United States Geological Survey Professional
            Paper 1395" for forward and reverse ellipsoid.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.TransverseMercator.Zone">
            <summary>
            Sets or gets the current projections's datum
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.TransverseMercator.ZoneProperty">
            <summary>
            Identifies the UTMZone dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.TransverseMercator.ZoneChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Zones the changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.TransverseMercator.CentralMeridian">
            <summary>
            Sets or gets the current projections's central meridian
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.TransverseMercator.CentralMeridianProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.TransverseMercator.CentralMeridian"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.TransverseMercator.LatitudeOrigin">
            <summary>
            Sets or gets the current projections's latitude origin
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.TransverseMercator.LatitudeOriginProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.TransverseMercator.LatitudeOrigin"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.TransverseMercator.ScaleFactor">
            <summary>
            Sets or gets the current projections's scale factor
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.TransverseMercator.ScaleFactorProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.TransverseMercator.ScaleFactor"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.TransverseMercator.UpdateConstants">
            <summary>
            Updates the constants.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.TransverseMercator.Project(System.Windows.Point)">
            <summary>
            Projects a geodetic point to Cartesian.
            </summary>
            <param name="geodetic">Geodetic point to project</param>
            <returns>Projected point</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.TransverseMercator.Unproject(System.Windows.Point)">
            <summary>
            Unprojects the specified transverse mercator.
            </summary>
            <param name="transverseMercator">The transverse mercator.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.TransverseMercator.Test">
            <summary>
            Tests this instance.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.Reader">
            <summary>
            A base class for creating a map data reader
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Reader.Layer">
            <summary>
            Gets the map layer for the current ShapeFileReader object. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Reader.CoordinateSystem">
            <summary>
            Sets or gets the coordinate system used to project the shapefile 
            contents to geodetic coordinates.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.Reader.DataMapping">
            <summary>
            Sets or gets the DataMapping for this Reader.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Reader.#ctor">
            <summary>
            Base initialization for Reader objects, sets default values.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.Reader.DataMappingProperty">
            <summary>
            Identifies the DataMapping dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.Reader.ProjectToMap(System.Windows.Point,Infragistics.Controls.Maps.Projection,Infragistics.Controls.Maps.CoordinateSystem)">
            <summary>
            Translates point coordinates into world coordinates.
            </summary>
            <param name="pt">Point to translate.</param>
            <param name="dst">Projection used.</param>
            <param name="src">Coordinate system.</param>
            <returns>A point mapped to world coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Reader.ProjectToMap(System.Windows.Rect,Infragistics.Controls.Maps.Projection,Infragistics.Controls.Maps.CoordinateSystem)">
            <summary>
            Translates a rectangle into world coordinates.
            </summary>
            <param name="rc">Rectangle to translate.</param>
            <param name="dst">Projection used.</param>
            <param name="src">Coordinate system.</param>
            <returns>A rectangle mapped to world coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.Reader.ImportAsync(Infragistics.Controls.Maps.MapLayer)">
            <summary>
            Asynchronously loads data contents into the layer.
            </summary>
            <param name="layer">Layer to populate.</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.ShapefileEnumerable">
            <summary>
            Represents an ESRI shapefile as an ObservableCollection of objects.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapefileEnumerable.Source">
            <summary>
            Sets or gets the source base Uri for the current ShapefileEnumerable
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ShapeFileReader">
            <summary>
            Represents Represents an ESRI Shapefile with a method to asynchronously
            populate an MapLayer.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapeFileReader.Uri">
            <summary>
            Uri location of the ShapeFile to be read by this ShapeFileReader object.  This can be an absolute uri starting with http:// or a uri relative to the location of the .xap file in context.
            </summary>
            <remarks>
            The filename part of this Uri should match the filename of the ShapeFile, excluding the file extension.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapeFileReader.UriProperty">
            <summary>
            Identifies the Uri dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ShapeFileReader.ImportAsync(Infragistics.Controls.Maps.MapLayer)">
            <summary>
            Asynchronously loads the contents of the current ESRI Shapefile into
            the specified layer.
            </summary>
            <param name="layer">layer to populate.</param>
            <remarks>
            When this method is invoked, the value of the Uri property on this ShapeFileReader object determines where the Shapefile is read from.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Maps.ShapefileRow">
            <summary>
            Specifies a notional row of data from an ESRI shapefile.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ShapefileRow.RowType">
            <summary>
            Specifies the type of item represented by the current row.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.None">
            <summary>
            A placeholder value which cannot occur when reading a shapefile.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.Point">
            <summary>
            Specifies a point shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolyLine">
            <summary>
            Specifies a polyline shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.Polygon">
            <summary>
            Specifies a polygon shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolyPoint">
            <summary>
            Specifies a polypoint shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PointZ">
            <summary>
            Specifies a polypoint shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolyLineZ">
            <summary>
            Specifies a polylinez shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolygonZ">
            <summary>
            Specifies a polygonz shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolyPointZ">
            <summary>
            Specifies a polypointz shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PointM">
            <summary>
            Specifies a pointm shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolyLineM">
            <summary>
            Specifies a polylinem shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolygonM">
            <summary>
            Specifies a polygonm shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolyPointM">
            <summary>
            Specifies a polypointm shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.ShapefileRow.RowType.PolyPatch">
            <summary>
            Specifies a polypatchm shape (not supported; cannot occur when reading a shapefile)
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ShapefileRow.#ctor">
            <summary>
            Creates a new Row with the default properties.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapefileRow.Type">
            <summary>
            Sets or gets the data type for the current row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapefileRow.Origin">
            <summary>
            Sets or gets the data origin for the current row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapefileRow.Bounds">
            <summary>
            Sets or gets the data bounds for the current row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapefileRow.PointCollections">
            <summary>
            Sets or gets the data points for the current row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapefileRow.Attributes">
            <summary>
            Sets or gets the data attributes for the current row.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ShapeFileUtil">
            <summary>
            Represents an ESRI Shapefile.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.ShapeFileUtil.Header">
            <summary>
            Specifies global data from an ESRI shapefile.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapeFileUtil.Header.ShapeType">
            <summary>
            Sets or gets the shape type for the current shapefile.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapeFileUtil.Header.Bounds">
            <summary>
            Sets or gets the bounds for the current shapefile.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapeFileUtil.Header.XYMin">
            <summary>
            Sets or gets the minimum coordinate for the current shapefile.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.ShapeFileUtil.Header.XYMax">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.ShapeFileUtil.ReadHeader(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Read header information from the specified streams. 
            </summary>
            <param name="shpReader"></param>
            <param name="dbfReader"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.ShapeFileUtil.ReadShape(Infragistics.Controls.Maps.ShapeFileUtil.Header,System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Read shape information from the specified streams.
            </summary>
            <param name="shapeHeader"></param>
            <param name="shpReader"></param>
            <param name="dbfReader"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.SqlShapeReader">
            <summary>
            Map reader used to import data from an SQL database.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.SqlShapeReader.DataSource">
            <summary>
            Map datasource.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.SqlShapeReader.DataSourceProperty">
            <summary>
            Identifies the DataSource dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.SqlShapeReader.OnDataSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.SqlShapeReader.ImportAsync(Infragistics.Controls.Maps.MapLayer)">
            <summary>
            Asynchronously loads data contents into the layer.
            </summary>
            <param name="layer">Layer to populate.</param>
        </member>
        <member name="T:Infragistics.Controls.Maps.MapSRProvider">
            <summary>
            Provides string resources for this assembly.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapSRProvider.ZoomIn">
            <summary>
            Gets the zoom in string.
            </summary>
            <value>The zoom in.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapSRProvider.ZoomOut">
            <summary>
            Gets the zoom out string.
            </summary>
            <value>The zoom out.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapSRProvider.PanNorth">
            <summary>
            Gets the pan north string.
            </summary>
            <value>The pan north.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapSRProvider.PanWest">
            <summary>
            Gets the pan west string.
            </summary>
            <value>The pan west.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapSRProvider.PanSouth">
            <summary>
            Gets the pan south string.
            </summary>
            <value>The pan south.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapSRProvider.PanEast">
            <summary>
            Gets the pan east string.
            </summary>
            <value>The pan east.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapSRProvider.Back">
            <summary>
            Gets the back string.
            </summary>
            <value>The back.</value>
        </member>
        <member name="P:Infragistics.Controls.Maps.MapSRProvider.FitWindow">
            <summary>
            Gets the fit window string.
            </summary>
            <value>The fit window.</value>
        </member>
        <member name="T:Infragistics.Controls.Maps.PolygonUtil">
            <summary>
            Extension methods for lists of points as polygons.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.PolygonUtil.RectIntersectsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Determines whether two rectangles intersect each other or not.
            </summary>                
        </member>
        <member name="M:Infragistics.Controls.Maps.PolygonUtil.PolygonHoldsPoint(System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Windows.Rect)">
            <summary>
            Check if the polygon contains the point 
            </summary>
            <param name="points">The polygon points.</param>
            <param name="point">The point to check.</param>
            <param name="polygonRect">The polygon rect or Rect.Empty.</param>
            <returns>Returns truf if the polygon contains the point or the point is on the polygon's edge, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.PolygonUtil.GetPolygonCentroid(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Gets the centroid of the open simplex formed by the current points.
            </summary>
            <param name="points">Polygon for which to calculate the centroid.</param>
            <returns>
            Polygon centroid.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.PolygonUtil.GetPolygonSignedArea(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Calculate the signed area of the of the open simplex formed by the current points.
            </summary>
            <param name="C">Polygon for which to calculate the signed area.</param>
            <returns>Twice the signed area</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.PolygonUtil.GetPolygonArea(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Calculate the area of the open simplex formed by the current points.
            </summary>
            <param name="C">Polygon for which to calculate the area.</param>
            <returns>Area</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.PolygonUtil.GetPolygonSweepDirection(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Calculate the winding direction of the open simplex formed by the current points.
            </summary>
            <param name="C"></param>
            <returns>Winding direction</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.PolylineUtil">
            <summary>
            Extension methods for lists of points as polylines.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.WeakEventProxy`3">
            <summary>
            A weak event proxy class which allows the owner to be garbage
            collected if the event handler is its only remaining link.
            </summary>
            <typeparam name="TInstance">The instance type which listens for the event.</typeparam>
            <typeparam name="TSource">Event source's type.</typeparam>
            <typeparam name="TEventArgs">Event arguments' type.</typeparam>
        </member>
        <member name="F:Infragistics.Controls.Maps.WeakEventProxy`3._instance">
            <summary>
            A WeakReference instance which listens for the event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.WeakEventProxy`3.EventAction">
            <summary>
            Gets or sets the method which is going to be called when the event fires.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.WeakEventProxy`3.CleanAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.WeakEventProxy`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventProxy class.
            </summary>
            <param name="instance">The instance which is subscribed to the event.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.WeakEventProxy`3.EventHandling(`1,`2)">
            <summary>
            Event handler for the subscribed event which calls the EventAction if possible, 
            if not - clean the owner from it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Maps.WeakEventProxy`3.Disconnect">
            <summary>
            Disconnects from the subscribed event.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Maps.WorldRectangleCalculator">
            <summary>
            Provides useful utility functions for calculating world rectangles.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate``1(System.Windows.Rect,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Windows.Rect})">
            <summary>
            Calculate a bounding world rectangle based on the input items.
            </summary>
            <typeparam name="tItem">The type of the items to be calculated.</typeparam>
            <param name="currentRect">The current world rectangle to start the calculation from.</param>
            <param name="items">The items to contain in the world rectangle.</param>
            <param name="provideRectangle">A delegate that takes each item and returns its rectangle.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Windows.Rect})">
            <summary>
            Calculate a bounding world rectangle based on the input items.
            </summary>
            <typeparam name="tItem">The type of the items to be calculated.</typeparam>
            <param name="items">The items to contain in the world rectangle.</param>
            <param name="provideRectangle">A delegate that takes each item and returns its rectangle.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate``1(System.Windows.Rect,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Windows.Point})">
            <summary>
            Calculate a bounding world rectangle based on the input items.
            </summary>
            <typeparam name="tItem">The type of the items to be calculated.</typeparam>
            <param name="currentRect">The current world rectangle to start the calculation from.</param>
            <param name="items">The items to contain in the world rectangle.</param>
            <param name="providePoint">A delegate that takes each item and returns its point.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Windows.Point})">
            <summary>
            Calculate a bounding world rectangle based on the input items.
            </summary>
            <typeparam name="tItem">The type of the items to be calculated.</typeparam>
            <param name="items">The items to contain in the world rectangle.</param>
            <param name="providePoint">A delegate that takes each item and returns its point.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate(System.Windows.Rect,System.Collections.Generic.IEnumerable{Infragistics.Controls.Maps.MapElement})">
            <summary>
            Calculate a bounding world rectangle based on a list of MapElements
            </summary>
            <param name="currentRect">The current world rectangle to start the calculation from.</param>
            <param name="items">The MapElements to contain in the world rectangle.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate(System.Windows.Rect,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Calculate a bounding world rectangle based on a list of Points
            </summary>
            <param name="currentRect">The current world rectangle to start the calculation from.</param>
            <param name="items">The Points to contain in the world rectangle.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate(System.Windows.Rect,System.Collections.Generic.IEnumerable{System.Windows.Rect})">
            <summary>
            Calculate a bounding world rectangle based on a list of Rects
            </summary>
            <param name="currentRect">The current world rectangle to start the calculation from.</param>
            <param name="items">The Rects to contain in the world rectangle.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate(System.Collections.Generic.IEnumerable{Infragistics.Controls.Maps.MapElement})">
            <summary>
            Calculate a bounding world rectangle based on a list of MapElements
            </summary>
            <param name="items">The MapElements to contain in the world rectangle.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Calculate a bounding world rectangle based on a list of Points
            </summary>
            <param name="items">The Points to contain in the world rectangle.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.WorldRectangleCalculator.Calculate(System.Collections.Generic.IEnumerable{System.Windows.Rect})">
            <summary>
            Calculate a bounding world rectangle based on a list of Rects
            </summary>
            <param name="items">The Rects to contain in the world rectangle.</param>
            <returns>The new world rectangle.</returns>
        </member>
        <member name="T:Infragistics.Controls.Maps.XamMap">
            <summary>
            The XamMap Component
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.#ctor">
            <summary>
            Constructs a default XamMap control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.#cctor">
            <summary>
            Static constructor for the <see cref="T:Infragistics.Controls.Maps.XamMap"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.FitWindowToElements">
            <summary>
            When the elements are imported or attached, adjust the viewport to accomodate.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.PropertyChanged">
            <summary>
            Event raised when a property value changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.LogicalParent">
            <summary>
            Sets or gets the logical parent for the current Element.
            </summary>
            <remarks>
            Maps to do not typically have a logical parent, so there is no need
            for this property to be set.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.IsSelectable">
            <summary>
            Sets or gets the current map's IsSelectable property.
            </summary>
            <remarks>
            For an individual element to be selectable, its IsSelectable, its 
            parent layer's IsSelectable and its parent map's IsSelectable properties
            must all be set to true.
            <para>
            The IsSelectable property controls mouse-based element selection. Other
            mechanisms are not affected by this property.
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.IsSelectableProperty">
            <summary>
            Identifies the IsSelectable dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.IsClickable">
            <summary>
            Sets or gets the current map's IsClickable property.
            </summary>
            <remarks>
            For an individual element to be clickable, its IsClickable, its 
            parent layer's IsClickable and its parent map's IsClickable properties
            must all be set to true.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.IsClickableProperty">
            <summary>
            Identifies the IsClickable dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.IsPannable">
            <summary>
            Sets or gets the current map's IsPannable property.
            </summary>
            <para>
            The IsPannable property controls mouse-based element panning. Other
            mechanisms are not affected by this property.
            </para>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.IsPannableProperty">
            <summary>
            Identifies the IsPannable dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.IsZoomable">
            <summary>
            Sets or gets the current map's IsZoomable property.
            </summary>
            <para>
            The IsZoomable property controls mouse-based element zooming. Other
            mechanisms are not affected by this property.
            </para>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.IsZoomableProperty">
            <summary>
            Identifies the IsZoomable dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.RootPanel">
            <summary>
            Gets the root panel for the current XamMap control.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.RootElement">
            <summary>
            Gets or sets the root element.
            </summary>
            <value>The root element.</value>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.MapProjection">
            <summary>
            Gets or sets the map projection to apply when rendering the map.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.MapProjectionType">
            <summary>
            Gets or sets the projection type for the current XamMap object.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.MapProjectionTypeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Maps.XamMap.MapProjectionType"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnMapProjectionTypeChanged(Infragistics.Controls.Maps.ProjectionType,Infragistics.Controls.Maps.ProjectionType)">
            <summary>
            MapProjectionTypeProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.LogicalChildren">
            <summary>
            Gets the collection of logical children for the current XamMap control
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.LogicalChildrenProperty">
            <summary>
            Identifies the Logical dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnLogicalChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.GridDisplayMode">
            <summary>
            Sets or gets the GridDisplayMode property for the current XamMap object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.GridDisplayModeProperty">
            <summary>
            Identifies the GridDisplayMode dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.Layers">
            <summary>
            Gets the collection of layers for this map. Adding or removing layers, or modifying
            an existing layer's content will cause the view be refreshed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.LayersProperty">
            <summary>
            Identifies the Layers dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnLayersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Dependency property changed callback called when the
            layers collection (not its contents) is changed
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.Layers_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Layers collection contents changed callback
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.LayersChanged">
            <summary>
            Event triggered whenever the maps's Layers property is set or the contents
            of its Layers collection changes
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnLayersChanged(Infragistics.Controls.Maps.MapLayersChangedEventArgs)">
            <summary>
            Triggers the LayersChanged event
            </summary>
            <remarks>
            This function is called when either the layers collection is set, or
            when its contents are modified
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.layer_WorldRectChanged(System.Object,Infragistics.Controls.Maps.MapWorldRectChangedEventArgs)">
            <summary>
            Callback for when a layer's worldrect changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.IsAutoWorldRect">
            <summary>
            Gets or sets whether or not to automatically derive the worldRect bounding rectangle.
            </summary>
            <remarks>
            Changing the IsAutoWorldRect property will generate a WorldRectChanged event. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WorldRect">
            <summary>
            Gets or sets the world bounding rectangle.
            </summary>
            <remarks>
            Changing the WorldRect property will generate a WorldRectChanged event. 
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.AutoWorldRect">
            <summary>
            Gets the automatically calculated world bounding rectangle. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.ActualWorldRect">
            <summary>
            Gets the effective world bounding rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.Viewport">
            <summary>
            Gets the MapViewport control for the current XamMap control.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.ViewportMargin">
            <summary>
            Gets or sets the outer margin of the viewport element. 
            <para>This is a dependency property. </para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.ViewportMarginProperty">
            <summary>
            Identifies the BorderCornerRadius dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.ViewportBorderCornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the viewport Border are rounded.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.ViewportBorderCornerRadiusProperty">
            <summary>
            Identifies the ViewportBorderCornerRadius dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.ViewportBorderThickness">
            <summary>
            Gets or sets the border thickness for the viewport element. 
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.ViewportBorderThicknessProperty">
            <summary>
            Identifies the ViewportBorderThickness dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.ViewportBorderBrush">
            <summary>
            Gets or sets a Brush to use when painting the viewport's border.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.ViewportBorderBrushProperty">
            <summary>
            Identifies the ViewportBorderBrush dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.ViewportBackground">
            <summary>
            Gets or sets the Brush that fills the area between the bounds of the viewport border.
            <para>This is a dependency property.</para> 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.ViewportBackgroundProperty">
            <summary>
            Identifies the ViewportBackground dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.ViewportRect">
            <summary>
            Gets the viewport rectangle, or Rect.Empty if the viewport rectangle
            cannot be determined.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowAnimationMode">
            <summary>
            Sets or gets the current map's WindowAnimationMode property, used to
            configure visual pan and zoom operations.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.WindowAnimationModeProperty">
            <summary>
            Identifies the WindowAnimationMode dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowAnimationDuration">
            <summary>
            Sets or gets the current map's WindowAnimationDuration property, used to
            configure the duration of visual pan and zoom operations.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.WindowAnimationDurationProperty">
            <summary>
            Identifies the WindowAnimationDuration dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowScale">
            <summary>
            Gets or sets the window scale used to render the map. In combination with the window
            center, the window scale fully defines the part of the map visible to the user.
            </summary>
            <remarks>
            Window scale is specified as a pure number relative to the size of the world and the
            size of the physical viewport; a window scale of one will fit the world to the viewport
            such that the either world's width or height precisely fits the viewport, depending
            upon which dimension produces the loosest fit.
            <para>As far as possible, resizing the viewport at a constant WindowScale approximately maintains the visible
            part of the window.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowCenter">
            <summary>
            Gets or sets the window center used to render the map. In combination with the window
            scale, the window center fully defines the part of the map visible to the user.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowRect">
            <summary>
            Gets or suggests the window rectangle used to render the map.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowZoom">
            <summary>
            Gets or suggests the window zoom used to render the map.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowZoomMinimum">
            <summary>
            Gets or sets the minimum possible zoom for the map.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.WindowZoomMinimumProperty">
            <summary>
            Identifies the WindowZoomMinimum dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowZoomMaximum">
            <summary>
            Gets or sets the maximum possible zoom for the map.
            </summary>
            <remarks>
            Setting WindowZoomMaximum to a value greater than or equal to 48 can result in rendering glitches on some elements in MapLayers.  Mainly, Silverlight is affected due to optimizations in the framework which can cause precision loss in RenderTransforms.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.WindowZoomMaximumProperty">
            <summary>
            Identifies the WindowZoomMaximum dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.WindowZoomBase">
            <summary>
            Gets or sets the maximum zoom increment the map.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.WindowZoomBaseProperty">
            <summary>
            Identifies the WindowZoomBase dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowFit">
            <summary>
            Adjusts the window rectangle to fit the worldRect.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowFit(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Pushes the window onto the window stack and adjusts the window rectangle 
            to fit the element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.ZoomIn">
            <summary>
            Pushes the window onto the window stack and zooms toward its center.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.ZoomOut">
            <summary>
            Pushes the window onto the window stack and zooms out from its center.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowPanWest">
            <summary>
            Pushes the window onto the window stack and pans West (in the direction of decreasing X).
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowPanSouth">
            <summary>
            Pushes the window onto the window stack and pans South (in the direction of increasing Y).
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowPanEast">
            <summary>
            Pushes the window onto the window stack and pans East (in the direction of increasing X).
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowPanNorth">
            <summary>
            Pushes the window onto the window stack and pans West (in the direction of decreasing Y).
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowPan(Infragistics.Controls.Maps.MapElement)">
            <summary>
            Pushes the window onto the window stack and pans to the center of the element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowPush">
            <summary>
            Pushes the window onto the window stack
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.WindowPop">
            <summary>
            Restores the window from the window stack
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.MapTileSource">
            <summary>
            Sets or gets the current map's TileSource property, used to
            configure visual pan and zoom operations.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.MapTileSourceProperty">
            <summary>
            Identifies the TileSource dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.ScaleToZoom(System.Double)">
            <summary>
            Converts a window scale to a zoom, according to the current map object's settings.
            </summary>
            <param name="scale"></param>
            <returns>Zoom for specified scale.</returns>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.ZoomToScale(System.Double)">
            <summary>
            Converts a window zoom to a scale, according to the current map object's settings.
            </summary>
            <param name="zoom"></param>
            <returns>Scale for specified zoom.</returns>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.MapMouseMove">
            <summary>
            Event triggered whenever the current map's mouse pointer is moved over this map's viewport.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.MapMouseLeftButtonDown">
            <summary>
            Event raised when the left mouse button is pressed while the mouse pointer
            is over this map's viewport. 
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.MapMouseLeftButtonUp">
            <summary>
            Event raised when the left mouse button is released while the mouse pointer
            is over this map's viewport. 
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.ElementPropertyChanged">
            <summary>
            Event triggered whenever an element property is changed.
            </summary>
            <remarks>
            The sender parameter for the listener is the element, not the map.
            </remarks>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.ElementClick">
            <summary>
            Event triggered whenever an element is clicked.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnElementClick(Infragistics.Controls.Maps.MapElementClickEventArgs)">
            <summary>
            Triggers a ElementClick event.
            </summary>
            <remarks>
            This method is marked public so that it can be called from
            the state machine. This slight error will be fixed in 
            an immediately forthcoming release.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.ElementHover">
            <summary>
            Event triggered whenever an element is hovered.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnElementHover(Infragistics.Controls.Maps.MapElementHoverEventArgs)">
            <summary>
            Triggers a ElementHover event.
            </summary>
            <remarks>
            The map uses this function internally to set and unset the hover effect
            on its layer's elements.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.ElementUnhover">
            <summary>
            Event triggered whenever an element is unhovered.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnElementUnhover(Infragistics.Controls.Maps.MapElementHoverEventArgs)">
            <summary>
            Triggers a ElementUnhover event.
            </summary>
            <remarks>
            The map uses this function internally to set and unset the hover effect
            on its layer's elements.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.SelectionChanged">
            <summary>
            Event triggered whenever the map's selection changes.
            </summary>
            <remarks>
            Element interactions are not fully implemented for this release;
            this event is never trigger.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnSelectionChanged(Infragistics.Controls.Maps.MapSelectionChangedEventArgs)">
            <summary>
            Triggers a SelectionChanged event.
            </summary>
            <remarks>
            Element interactions are not fully implemented for this release;
            this function is never called.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.ZoomRectChanged">
            <summary>
            Event triggered whenever the current map's zoom rectangle changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.DragRectChanged">
            <summary>
            Event triggered whenever the current map's drag rectangle changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.WindowRectChanged">
            <summary>
            Event triggered whenever the current map's window rectangle changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnWindowRectChanged(Infragistics.Controls.Maps.MapWindowRectChangedEventArgs)">
            <summary>
            Triggers a WindowRectChanged event
            </summary>        
        </member>
        <member name="E:Infragistics.Controls.Maps.XamMap.ActualWorldRectChanged">
            <summary>
            Event triggered whenever the current map's effective worldRect rectangle changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.OnActualWorldRectChanged(Infragistics.Controls.Maps.MapWorldRectChangedEventArgs)">
            <summary>
            Triggers a WorldRectChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Infragistics.Controls.Maps.XamMap.ElementHoverActionProperty">
            <summary>
            Identifies the ElementHoverAction dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Maps.XamMap.ElementHoverAction">
            <summary>
            Gets or sets the type of action to take when the mouse hovers over the map elements.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.RegisterResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds an additonal Resx file in which the control will pull its resources from.
            </summary>
            <param name="name">The name of the embedded resx file that contains the resources to be used.</param>
            <param name="assembly">The assembly in which the resx file is embedded.</param>
            <remarks>Don't include the extension of the file, but prefix it with the default Namespace of the assembly.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Maps.XamMap.UnregisterResources(System.String)">
            <summary>
            Removes a previously registered resx file.
            </summary>
            <param name="name">The name of the embedded resx file that was used for registration.</param>
            <remarks>
            Note: this won't have any effect on controls that are already in view and are already displaying strings.
            It will only affect any new controls created.
            </remarks>
        </member>
    </members>
</doc>
