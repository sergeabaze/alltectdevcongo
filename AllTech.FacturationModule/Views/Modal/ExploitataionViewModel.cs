using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AllTech.FrameWork.PropertyChange;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.Unity;
using AllTech.FrameWork.Services;
using System.Windows.Input;
using AllTech.FrameWork.Command;
using AllTech.FrameWork.Region;
using System.ComponentModel;
using AllTech.FrameWork.Views;
using System.Windows;
using AllTech.FrameWork.Model;
using AllTech.FrameWork.Global;
using System.Collections.ObjectModel;
using System.Data;

namespace AllTech.FacturationModule.Views.Modal
{
    public class ExploitataionViewModel : ViewModelBase
    {
        
        private RelayCommand newCommand;
        private RelayCommand saveCommand;
        private RelayCommand deleteCommand;

        SocieteModel societeCourante;

        ExploitationFactureModel _exploitService;
        ExploitationFactureModel _exploitSelected;
        ObservableCollection<ExploitationFactureModel> _exploitList;
        ObservableCollection<ExploitationFactureModel> _cacheList;

        LangueModel _language;
        DroitModel _currentDroit;
        UtilisateurModel userConnected;

       // CompteTiersModel compteservice;
        CompteTiersModel compteGeneSelected;
        List<CompteTiersModel> compteGenerals;

        CompteAnalytiqueModel compteservice;
        CompteAnalytiqueModel compteSelected;
        List<CompteAnalytiqueModel> compteAnalytiquesListCache;
        List<CompteAnalytiqueModel> compteAnalytiquesList;
        int compteAnalListIndex;
     
        ClientModel currentClient;
        bool istxtEnabled;
        int cmbComteIndex;
        bool cmbCompteVisible;

       

        Window localwindow;


        public ExploitataionViewModel(Window window,ClientModel _clientSelected)
        {
            localwindow = window;
          
            societeCourante = GlobalDatas.DefaultCompany;
           _language = new LangueModel();
            _exploitService = new ExploitationFactureModel();
            UserConnected = GlobalDatas.currentUser;
            compteservice = new CompteAnalytiqueModel();
            if (CacheDatas.ui_currentdroitClientInterface == null)
            {
                CurrentDroit = UserConnected.Profile.Droit.Find(d => d.LibelleVue.ToLower().Contains("data reference")).SousDroits.Find(sd => sd.LibelleSouVue.Contains("client")) ?? new DroitModel();
                CacheDatas.ui_currentdroitClientInterface = CurrentDroit;
            }
            else CurrentDroit = CacheDatas.ui_currentdroitClientInterface;
            CurrentClient = _clientSelected;

           // _exploitSelected = new ExploitationFactureModel();
           // ExploitSelected = _exploitSelected;
            CmbCompteVisible = false;
            CmbComteIndex = -1;
            loadexploit();
        }

        #region PROPRIETES

        public List<CompteAnalytiqueModel> CompteAnalytiquesListCache
        {
            get { return compteAnalytiquesListCache; }
            set
            {
                compteAnalytiquesListCache = value;
                this.OnPropertyChanged("CompteAnalytiquesListCache");
            }
        }

        public List<CompteAnalytiqueModel> CompteAnalytiquesList
        {
            get { return compteAnalytiquesList; }
            set
            {
                compteAnalytiquesList = value;
                this.OnPropertyChanged("CompteAnalytiquesList");
            }
        }

        public CompteAnalytiqueModel CompteSelected
        {
            get { return compteSelected; }
            set
            {
               
                compteSelected = value;
                       if (ExploitSelected != null)
                           ExploitSelected.IdCompteTiers = value.IdCompteAnalytique;

                //compteAnalityqueselected = value;
                //if (value != null)
                //{
                //    if (CompteSelected != null)
                //    {
                //        CompteSelected.IdCompteAnal = value.IdCompteAnalytique;
                //    }
                //    else
                //    {
                //        CompteSelected = new CompteAnalClientModel();
                //        CompteSelected.IdCompteAnal = value.IdCompteAnalytique;
                //    }
                //}
                       this.OnPropertyChanged("CompteSelected");
            }
        }



        public int CmbComteIndex
        {
            get { return cmbComteIndex; }
            set { cmbComteIndex = value;
            this.OnPropertyChanged("CmbComteIndex");
            }
        }


        public bool CmbCompteVisible
        {
            get { return cmbCompteVisible; }
            set { cmbCompteVisible = value;
            this.OnPropertyChanged("CmbCompteVisible");
            }
        }

        //public CompteTiersModel CompteGeneSelected
        //{
        //    get { return compteGeneSelected; }
        //    set
        //    {
        //        compteGeneSelected = value;
        //        if (ExploitSelected != null)
        //            ExploitSelected.IdCompteTiers = value.IdCompteT;
             
        //        this.OnPropertyChanged("CompteGeneSelected");
        //    }
        //}

        //public List<CompteTiersModel> CompteGenerals
        //{
        //    get { return compteGenerals; }
        //    set
        //    {
        //        compteGenerals = value;
        //        this.OnPropertyChanged("CompteGenerals");
        //    }
        //}

        public DroitModel CurrentDroit
        {
            get { return _currentDroit; }
            set
            {
                _currentDroit = value;
                OnPropertyChanged("CurrentDroit");
            }
        }

        public UtilisateurModel UserConnected
        {
            get { return userConnected; }
            set
            {
                userConnected = value;
                OnPropertyChanged("UserConnected");
            }
        }

        public bool IstxtEnabled
        {
            get { return istxtEnabled; }
            set { istxtEnabled = value;
            this.OnPropertyChanged("IstxtEnabled");
            }
        }

        public ExploitationFactureModel ExploitSelected
        {
            get { return _exploitSelected; }
            set
            {
               
                _exploitSelected = value  ;
                IstxtEnabled = true;
                CmbCompteVisible = true;
                if (value != null)
                {
                    if (CompteAnalytiquesList != null && CompteAnalytiquesList.Count > 0)
                    {
                        if (value.IdCompteTiers.HasValue)
                        {
                            for (int i = 0; i < CompteAnalytiquesList.Count; i++)
                            {
                                if (CompteAnalytiquesList[i].IdCompteAnalytique == value.IdCompteTiers)
                                {
                                    CmbComteIndex = i;
                                    break;
                                }
                            }
                        }
                    }
                }
                else CmbComteIndex = -1;
                this.OnPropertyChanged("ExploitSelected");
            }
        }

        public ObservableCollection<ExploitationFactureModel> ExploitList
        {
            get { return _exploitList; }
            set
            {
                _exploitList = value;
                this.OnPropertyChanged("ExploitList");
            }
        }

        public ClientModel CurrentClient
        {
            get { return currentClient; }
            set { currentClient = value  ;
         
            this.OnPropertyChanged("CurrentClient");
            }
        }


        public ObservableCollection<ExploitationFactureModel> CacheList
        {
            get { return _cacheList; }
            set { _cacheList = value;
            this.OnPropertyChanged("CacheList");
            }
        }
       
        #endregion

        #region ICOMMAND
        public ICommand SaveCommand
        {
            get
            {
                if (this.saveCommand == null)
                {
                    this.saveCommand = new RelayCommand(param => this.canSave(), param => this.canExecuteSave());
                }
                return this.saveCommand;
            }
        }

        public ICommand NewCommand
        {
            get
            {
                if (this.newCommand == null)
                {
                    this.newCommand = new RelayCommand(param => this.canNew());
                }
                return this.newCommand;
            }


        }

        public ICommand DeleteCommand
        {
            get
            {
                if (this.deleteCommand == null)
                {
                    this.deleteCommand = new RelayCommand(param => this.canDelete(), param => this.canExecute());
                }
                return this.deleteCommand;
            }


        }
        #endregion


        #region METODS

        void loadexploit()
        {

            BackgroundWorker worker = new BackgroundWorker();
          
            worker.DoWork += (o, args) =>
            {
                try
                {
                    if (CurrentClient != null)
                    {
                       // if (CacheDatas.ui_ClientExploitations == null)
                        //{
                        if (!GlobalDatas.IdDataRefArchiveDatas)
                            ExploitList = _exploitService.EXPLOITATION_FACTURE_CLIENT_LIST(societeCourante.IdSociete, CurrentClient.IdClient);
                        else
                            ExploitList = _exploitService.EXPLOITATION_FACTURE_CLIENT_LIST_Archive(societeCourante.IdSociete, CurrentClient.IdClient);
                           // CacheDatas.ui_ClientExploitations = ExploitList;
                       // }
                       // else ExploitList = CacheDatas.ui_ClientExploitations;
                    }

                    List<CompteAnalytiqueModel>  listeTotalCompte =compteservice.ModelCompteAnal_SelectAll(societeCourante.IdSociete);
                    
                 
                    if (listeTotalCompte != null)
                    {
                        if (ExploitList != null && ExploitList.Count > 0)
                        {
                            foreach (ExploitationFactureModel compte in ExploitList)
                            {

                                var cmptDelete = listeTotalCompte.FirstOrDefault(c => c.IdCompteAnalytique == compte.IdCompteTiers);
                                if (cmptDelete != null)
                                    listeTotalCompte.Remove(cmptDelete);

                            }
                        }
                    }
                    CompteAnalytiquesList = listeTotalCompte;
                    CompteAnalytiquesListCache = compteservice.ModelCompteAnal_SelectAll(societeCourante.IdSociete);

                    //CompteGenerals = compteservice.SelectByExploitation(societeCourante.IdSociete, CurrentClient.IdClient);
                }
                catch (Exception ex)
                {
                    args.Result = ex.Message + " ;" + ex.InnerException;
                }

            };
            worker.RunWorkerCompleted += (o, args) =>
            {
                if (args.Result != null)
                {
                    CustomExceptionView view = new CustomExceptionView();
                    view.Owner =localwindow;
                    view.ViewModel.Message = args.Result.ToString();
                    view.ShowDialog();
                   
                }
               

            };

            worker.RunWorkerAsync();
        }


        private void canClose()
        {
        }


        private void canDelete()
        {
            StyledMessageBoxView messageBox = new StyledMessageBoxView();
            messageBox.Owner =localwindow;
            messageBox.Title = "MESSAGE INFORMATION SUPPRESSION";
            messageBox.ViewModel.Message = "Voulez vous supprimer ?";
            if (messageBox.ShowDialog().Value == true)
            {
                try
                {
                    
                   int codeMessage= _exploitService.EXPLOITATION_FACTURE_DELETE(ExploitSelected.IdExploitation);
                   if (codeMessage == 110)
                   {
                       ExploitList = _exploitService.EXPLOITATION_FACTURE_CLIENT_LIST(societeCourante.IdSociete, CurrentClient.IdClient);
                       CacheDatas.ui_ClientExploitations = ExploitList;

                       ExploitSelected = null;
                       IstxtEnabled = false;
                   }
                   else
                   {
                       CustomExceptionView view = new CustomExceptionView();
                       view.Owner = localwindow;
                       view.Title = "MESSAGE INFORMATION SUPPRESSION EXPLOITATION";
                       view.ViewModel.Message ="Cette exploitation ne pas être supprimer, elle est déja utilisée dans une facture";
                       view.ShowDialog();
                   }
                   
                }
                catch (Exception ex)
                {
                    CustomExceptionView view = new CustomExceptionView();
                    view.Owner =localwindow;
                    view.Title = "MESSAGE INFORMATION";
                    view.ViewModel.Message = ex.Message;
                    view.ShowDialog();
                 
                }
            }
        }
        bool canExecute()
        {
            bool values = false;
            if (CurrentDroit.Super || CurrentDroit.Suppression || CurrentDroit.Developpeur || CurrentDroit.Proprietaire)
            {
                if (ExploitSelected != null)
                    if (ExploitSelected.IdExploitation > 0)
                    values = true;
            }
            return values;

           
        }

        private void canNew()
        {
           // if (CurrentDroit.Super || CurrentDroit.Ecriture || CurrentDroit.Proprietaire || CurrentDroit.Developpeur)
           // {
                _exploitSelected = new ExploitationFactureModel();
                ExploitSelected = _exploitSelected;
                IstxtEnabled = true;
                CmbCompteVisible = true;
            //}
        }


        private void canSave()
        {
            try
            {

                if (ExploitSelected.IdExploitation  == 0)
                {
                    if (CurrentClient != null)
                    {
                        ExploitSelected.IdClient = CurrentClient.IdClient;
                        ExploitSelected.IdSite = societeCourante.IdSociete;
                        ExploitSelected.IdLangue = CurrentClient.IdLangue;
                        _exploitService.EXPLOITATION_FACTURE_ADD(ExploitSelected);
                        ExploitList = _exploitService.EXPLOITATION_FACTURE_CLIENT_LIST(societeCourante.IdSociete, CurrentClient.IdClient);
                        CacheDatas.ui_ClientExploitations = ExploitList;
                        ExploitSelected = null;
                        IstxtEnabled = false;
                       
                     
                    }
                    else
                        MessageBox.Show("Pas de client pour cette création ");
                }
                else
                {
                    
                        if (ExploitSelected.IdClient > 0)
                            if (CurrentClient != null)
                            {
                                ExploitSelected.IdClient = CurrentClient.IdClient;
                                ExploitSelected.IdSite = societeCourante.IdSociete;
                                ExploitSelected.IdLangue = CurrentClient.IdLangue;

                             
                                //loadexploit();
                              //  CacheDatas.ui_ClientExploitations = ExploitList;
                               


                            }
                        if (!GlobalDatas.IdDataRefArchiveDatas)
                        {
                            _exploitService.EXPLOITATION_FACTURE_ADD(ExploitSelected);
                            ExploitList = _exploitService.EXPLOITATION_FACTURE_CLIENT_LIST(societeCourante.IdSociete, CurrentClient.IdClient);
                        }
                        else
                        {
                            _exploitService.EXPLOITATION_FACTURE_ADD_ARCHIVE(ExploitSelected);
                            ExploitList = _exploitService.EXPLOITATION_FACTURE_CLIENT_LIST_Archive(societeCourante.IdSociete, CurrentClient.IdClient);
                        }
                        ExploitSelected = null;
                   
                }
            }
            catch (Exception ex)
            {
                CustomExceptionView view = new CustomExceptionView();
                view.Owner =localwindow;
                view.Title = "MESSAGE INFORMATION";
                view.ViewModel.Message = ex.Message;
                view.ShowDialog();
              
            }
        }
        bool canExecuteSave()
        {

            bool values = false;
            if (CurrentDroit.Super || CurrentDroit.Ecriture || CurrentDroit.Developpeur || CurrentDroit.Proprietaire)
            {
                if (ExploitSelected != null)
                    values = true;
            }
            return values;

           
        }

     
        #endregion
    }
}
