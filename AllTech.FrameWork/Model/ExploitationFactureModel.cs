using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AllTech.FrameWork.PropertyChange;
using AllTech.FrameWork.Global;
using FACTURATION_DAL;
using FACTURATION_DAL.Model;
using System.Collections.ObjectModel;

namespace AllTech.FrameWork.Model
{
    public class ExploitationFactureModel : ViewModelBase
    {

        public int IdExploitation { get; set; }
        private string libelle;
        private int idLangue;
        public int IdSite { get; set; }
        public int IdClient { get; set; }
        public int? IdCompteTiers { get; set; }
        private LangueModel langues;
        private ClientModel client;
        private CompteAnalytiqueModel compteAnalytique;


        Facturation DAL = null;

        public ExploitationFactureModel()
        {
            DAL = (Facturation)DataProviderObject.FacturationDal;
            IdExploitation = 0;
            idLangue = 0;
            libelle = string.Empty;
        }


        #region PROPERTIES


        public CompteAnalytiqueModel CompteAnalytique
        {
            get { return compteAnalytique; }
            set { compteAnalytique = value;
            this.OnPropertyChanged("CompteAnalytique");
            }
        }
        public ClientModel Client
        {
            get { return client; }
            set { client = value;
            this.OnPropertyChanged("Client");
            }
        }

        public LangueModel Langues
        {
            get { return langues; }
            set { langues = value;
            this.OnPropertyChanged("Langues");
            }
        }

        public string Libelle
        {
            get { return libelle; }
            set { libelle = value;
            this.OnPropertyChanged("Libelle");
            }
        }

        public int IdLangue
        {
            get { return idLangue; }
            set { idLangue = value;
            this.OnPropertyChanged("IdLangue");
            }
        }
        #endregion

        #region METHODS

        public ObservableCollection<ExploitationFactureModel> EXPLOITATION_FACTURE_GETLISTE(Int32 idSite)
        {
            ObservableCollection<ExploitationFactureModel> factures = new ObservableCollection<ExploitationFactureModel>();
            LangueModel llangue = new LangueModel();
           
            try
            {
                List<ExploitationFacture> exploits = DAL.GetAll_EXPLOITATION_FACTURE(idSite);
                if (exploits.Count > 0)
                {
                    foreach (var exp in exploits)
                    {
                        LangueModel newl = llangue.LANGUE_SELECTBYID(exp.IdLangue);
                       
                        ExploitationFactureModel fmodel = Converfrom(exp);
                        fmodel.Langues = newl;
                        fmodel.Client = ConvertFromClient(exp.Client);
                        fmodel.CompteAnalytique = exp.CompteAnalityque != null ? new CompteAnalytiqueModel { IdCompteAnalytique = exp.CompteAnalityque.IdCompteAnalytique, Code = exp.CompteAnalityque.Code, Libelle = exp.CompteAnalityque.Libelle, Numerocompte = exp.CompteAnalityque.Numerocompte } : null;
                        factures.Add(fmodel);

                    }
                }
                factures.Sort(ep=>ep.Libelle );
                return factures;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }

        public ObservableCollection<ExploitationFactureModel> EXPLOITATION_FACTURE_GETLISTE_archive(Int32 idSite)
        {
            ObservableCollection<ExploitationFactureModel> factures = new ObservableCollection<ExploitationFactureModel>();
            LangueModel llangue = new LangueModel();

            try
            {
                List<ExploitationFacture> exploits = DAL.GetAll_EXPLOITATION_Archive_FACTURE(idSite);
                if (exploits.Count > 0)
                {
                    foreach (var exp in exploits)
                    {
                        LangueModel newl = llangue.LANGUE_SELECTBYID(exp.IdLangue);

                        ExploitationFactureModel fmodel = Converfrom(exp);
                        fmodel.Langues = newl;
                        fmodel.Client = ConvertFromClient(exp.Client);
                        fmodel.CompteAnalytique = exp.CompteAnalityque != null ? new CompteAnalytiqueModel { IdCompteAnalytique = exp.CompteAnalityque.IdCompteAnalytique, Code = exp.CompteAnalityque.Code, Libelle = exp.CompteAnalityque.Libelle, Numerocompte = exp.CompteAnalityque.Numerocompte } : null;
                        factures.Add(fmodel);

                    }
                }
                factures.Sort(ep => ep.Libelle);
                return factures;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }

        public ObservableCollection<ExploitationFactureModel> EXPLOITATION_FACTURE_CLIENT_LIST(Int32 idSite,Int32 idclient)
        {
            ObservableCollection<ExploitationFactureModel> factures = new ObservableCollection<ExploitationFactureModel>();
            LangueModel llangue = new LangueModel();

            try
            {
                List<ExploitationFacture> exploits = DAL.GetAll_EXPLOITATION_BYCLIENT(idSite, idclient);
                if (exploits.Count > 0)
                {
                    foreach (var exp in exploits)
                    {
                        LangueModel newl = llangue.LANGUE_SELECTBYID(exp.IdLangue);

                        ExploitationFactureModel fmodel = Converfrom(exp);
                        fmodel.Langues = newl;
                        fmodel.Client = ConvertFromClient(exp.Client);
                        fmodel.CompteAnalytique = exp.CompteAnalityque != null ? new CompteAnalytiqueModel { IdCompteAnalytique = exp.CompteAnalityque.IdCompteAnalytique, Code = exp.CompteAnalityque.Code, Libelle = exp.CompteAnalityque.Libelle, Numerocompte = exp.CompteAnalityque.Numerocompte } : null;
                        factures.Add(fmodel);

                    }
                }
                factures.Sort(ep => ep.Libelle);
                return factures;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }

        public ObservableCollection<ExploitationFactureModel> EXPLOITATION_FACTURE_CLIENT_LIST_Archive(Int32 idSite, Int32 idclient)
        {
            ObservableCollection<ExploitationFactureModel> factures = new ObservableCollection<ExploitationFactureModel>();
            LangueModel llangue = new LangueModel();

            try
            {
                List<ExploitationFacture> exploits = DAL.GetAll_EXPLOITATION_Archive_BYCLIENT(idSite, idclient);
                if (exploits.Count > 0)
                {
                    foreach (var exp in exploits)
                    {
                        LangueModel newl = llangue.LANGUE_SELECTBYID(exp.IdLangue);

                        ExploitationFactureModel fmodel = Converfrom(exp);
                        fmodel.Langues = newl;
                        fmodel.Client = ConvertFromClient(exp.Client);
                        fmodel.CompteAnalytique = exp.CompteAnalityque != null ? new CompteAnalytiqueModel { IdCompteAnalytique = exp.CompteAnalityque.IdCompteAnalytique, Code = exp.CompteAnalityque.Code, Libelle = exp.CompteAnalityque.Libelle, Numerocompte = exp.CompteAnalityque.Numerocompte } : null;
                        factures.Add(fmodel);

                    }
                }
                factures.Sort(ep => ep.Libelle);
                return factures;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }


        public ObservableCollection<ExploitationFactureModel> EXPLOITATION_FACTURE_GETLISTEByIdLanguage(int idLanguage, Int32 idSite)
        {
            ObservableCollection<ExploitationFactureModel> factures = new ObservableCollection<ExploitationFactureModel>();
            LangueModel llangue = new LangueModel();
            try
            {
                List<ExploitationFacture> exploits = DAL.GetAll_EXPLOITATION_FACTUREBYLangue(idLanguage,idSite );
                if (exploits.Count > 0)
                {
                    foreach (var exp in exploits)
                    {
                        LangueModel newl = llangue.LANGUE_SELECTBYID(exp.IdLangue);

                        ExploitationFactureModel fmodel = Converfrom(exp);
                        fmodel.Langues = newl;
                        fmodel.Client = ConvertFromClient(exp.Client);
                       fmodel.CompteAnalytique = exp.CompteAnalityque != null ? new CompteAnalytiqueModel { IdCompteAnalytique = exp.CompteAnalityque.IdCompteAnalytique, Code = exp.CompteAnalityque.Code, Libelle = exp.CompteAnalityque.Libelle, Numerocompte = exp.CompteAnalityque.Numerocompte } : null;
                        factures.Add(fmodel);

                    }
                }
                return factures;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }


        public ObservableCollection<ExploitationFactureModel> EXPLOITATION_FACTURE_GETLISTEByIdLanguage_Archive(int idLanguage, Int32 idSite)
        {
            ObservableCollection<ExploitationFactureModel> factures = new ObservableCollection<ExploitationFactureModel>();
            LangueModel llangue = new LangueModel();
            try
            {
                List<ExploitationFacture> exploits = DAL.GetAll_EXPLOITATION_Archive_FACTUREBYLangue(idLanguage, idSite);
                if (exploits.Count > 0)
                {
                    foreach (var exp in exploits)
                    {
                        LangueModel newl = llangue.LANGUE_SELECTBYID(exp.IdLangue);

                        ExploitationFactureModel fmodel = Converfrom(exp);
                        fmodel.Langues = newl;
                        fmodel.Client = ConvertFromClient(exp.Client);
                        fmodel.CompteAnalytique = exp.CompteAnalityque != null ? new CompteAnalytiqueModel { IdCompteAnalytique = exp.CompteAnalityque.IdCompteAnalytique, Code = exp.CompteAnalityque.Code, Libelle = exp.CompteAnalityque.Libelle, Numerocompte = exp.CompteAnalityque.Numerocompte } : null;
                        factures.Add(fmodel);

                    }
                }
                return factures;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }




        public ExploitationFactureModel EXPLOITATION_FACTURE_GETLISTEByID(int id, Int32 idSite)
        {
            ExploitationFactureModel facture = null ;
            LangueModel llangue = new LangueModel();
            try
            {
                ExploitationFacture exp = DAL.GetAll_EXPLOITATION_FACTUREBYID(id,idSite );

                if (exp  != null)
                {
                    facture = Converfrom(exp);
                    LangueModel newl = llangue.LANGUE_SELECTBYID(facture.IdLangue);
                    facture.Langues  = newl;
                    facture.CompteAnalytique = exp.CompteAnalityque != null ? new CompteAnalytiqueModel { IdCompteAnalytique = exp.CompteAnalityque.IdCompteAnalytique, Code = exp.CompteAnalityque.Code, Libelle = exp.CompteAnalityque.Libelle, Numerocompte = exp.CompteAnalityque.Numerocompte } : null;
                    facture.Client = ConvertFromClient(exp.Client);
                }

                return facture;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }

        public ExploitationFactureModel EXPLOITATION_FACTURE_GETLISTEByID_Archive(int id, Int32 idSite)
        {
            ExploitationFactureModel facture = null;
            LangueModel llangue = new LangueModel();
            try
            {
                ExploitationFacture exp = DAL.GetAll_EXPLOITATION_Archive_FACTUREBYID(id, idSite);

                if (exp != null)
                {
                    facture = Converfrom(exp);
                    LangueModel newl = llangue.LANGUE_SELECTBYID(facture.IdLangue);
                    facture.Langues = newl;
                    facture.CompteAnalytique = exp.CompteAnalityque != null ? new CompteAnalytiqueModel { IdCompteAnalytique = exp.CompteAnalityque.IdCompteAnalytique, Code = exp.CompteAnalityque.Code, Libelle = exp.CompteAnalityque.Libelle, Numerocompte = exp.CompteAnalityque.Numerocompte } : null;
                    facture.Client = ConvertFromClient(exp.Client);
                }

                return facture;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }

        public bool EXPLOITATION_FACTURE_ADD(ExploitationFactureModel facture)
        {

            try
            {
                if (facture != null)
                {
                    DAL.EXPLOITATION_FACTURE_ADD(ConvertTo(facture));
                }

                return true;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }

        public bool EXPLOITATION_FACTURE_ADD_ARCHIVE(ExploitationFactureModel facture)
        {

            try
            {
                if (facture != null)
                {
                    DAL.EXPLOITATION_FACTURE_ADD_ARCHIVE(ConvertTo(facture));
                }

                return true;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }

        public bool EXPLOITATION_FACTUREE_ADD(Int64 idFacture,int idexploitation,int mode)
        {

            try
            {
                DAL.EXPLOITATION_FACTUREE_ADD(idFacture, idexploitation, mode);
                return true;

            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }
      


        public int  EXPLOITATION_FACTURE_DELETE(int  id)
        {

            try
            {
               return   DAL.EXPLOITATION_FACTURE_DELETE (id );
            }
            catch (Exception de)
            {
                throw new Exception(de.Message);
            }
        }

        #endregion

        #region BUSNESS METHOD

        ExploitationFactureModel Converfrom(ExploitationFacture efacture)
        {
            ExploitationFactureModel newFact = null;
            if (efacture != null)
                newFact = new ExploitationFactureModel
                {
                     IdExploitation = efacture.IdExploitation  ,
                    IdLangue = efacture.IdLangue,
                    Libelle = efacture.Libelle, 
                     IdClient =efacture .IdClient ,
                    IdSite =efacture .IdSite , 
                    IdCompteTiers=efacture.IdCompteTiers


                };
            return newFact;

        }

        ExploitationFacture ConvertTo(ExploitationFactureModel fact)
        {
            ExploitationFacture newFact = null;
            if (fact != null)
                newFact = new ExploitationFacture
                {
                     IdExploitation  = fact.IdExploitation ,
                    IdLangue = fact.IdLangue,
                    Libelle = fact.Libelle , 
                     IdClient =fact .IdClient ,
                    IdSite =fact .IdSite ,
                     IdCompteTiers = fact.IdCompteTiers
                };
            return newFact;

        }

        ClientModel ConvertFromClient(Client client)
        {
            ClientModel newClient = null;
            if (client != null)
                newClient = new ClientModel
                {
                    IdClient = client.IdClient,
                    IdLangue = client.IdLangue,
                    NomClient = client.NomClient,
                    NumeroContribuable = client.NumeroContribuable,
                    IdCompteTiers=client.IdCompteTiers,
                    Rue1 = client.Rue1,
                    Rue2 = client.Rue2,
                    Ville = client.Ville,
                    DateEcheance = client.DateEcheance,
                    Idporata = client.Idporata,
                    TermeDescription = client.TermeDescription,
                    BoitePostal = client.BoitePostal,
                    IdSite = client.IdSite,
                    IdCompte = client.IdCompte,
                    IdExonere = client.IdExonere,
                    NumemroImat = client.NumeroImatriculation,

                    TermeNombre = client.TermeNombre
                };
            return newClient;

        }
        #endregion



    }
}
